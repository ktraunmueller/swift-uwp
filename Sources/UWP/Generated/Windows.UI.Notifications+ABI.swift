// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CUI_CNotifications_CIAdaptiveNotificationContent: WindowsFoundation.IID {
    .init(Data1: 0xEB0DBE66, Data2: 0x7448, Data3: 0x448D, Data4: ( 0x9D,0xB8,0xD7,0x8A,0xCD,0x2A,0xBB,0xA9 ))// EB0DBE66-7448-448D-9DB8-D78ACD2ABBA9
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIAdaptiveNotificationText: WindowsFoundation.IID {
    .init(Data1: 0x46D4A3BE, Data2: 0x609A, Data3: 0x4326, Data4: ( 0xA4,0x0B,0xBF,0xDE,0x87,0x20,0x34,0xA3 ))// 46D4A3BE-609A-4326-A40B-BFDE872034A3
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIBadgeNotification: WindowsFoundation.IID {
    .init(Data1: 0x075CB4CA, Data2: 0xD08A, Data3: 0x4E2F, Data4: ( 0x92,0x33,0x7E,0x28,0x9C,0x1F,0x77,0x22 ))// 075CB4CA-D08A-4E2F-9233-7E289C1F7722
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIBadgeNotificationFactory: WindowsFoundation.IID {
    .init(Data1: 0xEDF255CE, Data2: 0x0618, Data3: 0x4D59, Data4: ( 0x94,0x8A,0x5A,0x61,0x04,0x0C,0x52,0xF9 ))// EDF255CE-0618-4D59-948A-5A61040C52F9
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerForUser: WindowsFoundation.IID {
    .init(Data1: 0x996B21BC, Data2: 0x0386, Data3: 0x44E5, Data4: ( 0xBA,0x8D,0x0C,0x10,0x77,0xA6,0x2E,0x92 ))// 996B21BC-0386-44E5-BA8D-0C1077A62E92
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerStatics: WindowsFoundation.IID {
    .init(Data1: 0x33400FAA, Data2: 0x6DD5, Data3: 0x4105, Data4: ( 0xAE,0xBC,0x9B,0x50,0xFC,0xA4,0x92,0xDA ))// 33400FAA-6DD5-4105-AEBC-9B50FCA492DA
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerStatics2: WindowsFoundation.IID {
    .init(Data1: 0x979A35CE, Data2: 0xF940, Data3: 0x48BF, Data4: ( 0x94,0xE8,0xCA,0x24,0x4D,0x40,0x0B,0x41 ))// 979A35CE-F940-48BF-94E8-CA244D400B41
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdater: WindowsFoundation.IID {
    .init(Data1: 0xB5FA1FD4, Data2: 0x7562, Data3: 0x4F6C, Data4: ( 0xBF,0xA3,0x1B,0x6E,0xD2,0xE5,0x7F,0x2F ))// B5FA1FD4-7562-4F6C-BFA3-1B6ED2E57F2F
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationHintsStatics: WindowsFoundation.IID {
    .init(Data1: 0x06206598, Data2: 0xD496, Data3: 0x497D, Data4: ( 0x86,0x92,0x4F,0x7D,0x7C,0x27,0x70,0xDF ))// 06206598-D496-497D-8692-4F7D7C2770DF
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics: WindowsFoundation.IID {
    .init(Data1: 0x202192D7, Data2: 0x8996, Data3: 0x45AA, Data4: ( 0x8B,0xA1,0xD4,0x61,0xD7,0x2C,0x2A,0x1B ))// 202192D7-8996-45AA-8BA1-D461D72C2A1B
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIKnownNotificationBindingsStatics: WindowsFoundation.IID {
    .init(Data1: 0x79427BAE, Data2: 0xA8B7, Data3: 0x4D58, Data4: ( 0x89,0xEA,0x76,0xA7,0xB7,0xBC,0xCD,0xED ))// 79427BAE-A8B7-4D58-89EA-76A7B7BCCDED
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CINotification: WindowsFoundation.IID {
    .init(Data1: 0x108037FE, Data2: 0xEB76, Data3: 0x4F82, Data4: ( 0x97,0xBC,0xDA,0x07,0x53,0x0A,0x2E,0x20 ))// 108037FE-EB76-4F82-97BC-DA07530A2E20
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CINotificationBinding: WindowsFoundation.IID {
    .init(Data1: 0xF29E4B85, Data2: 0x0370, Data3: 0x4AD3, Data4: ( 0xB4,0xEA,0xDA,0x9E,0x35,0xE7,0xEA,0xBF ))// F29E4B85-0370-4AD3-B4EA-DA9E35E7EABF
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CINotificationData: WindowsFoundation.IID {
    .init(Data1: 0x9FFD2312, Data2: 0x9D6A, Data3: 0x4AAF, Data4: ( 0xB6,0xAC,0xFF,0x17,0xF0,0xC1,0xF2,0x80 ))// 9FFD2312-9D6A-4AAF-B6AC-FF17F0C1F280
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CINotificationDataFactory: WindowsFoundation.IID {
    .init(Data1: 0x23C1E33A, Data2: 0x1C10, Data3: 0x46FB, Data4: ( 0x80,0x40,0xDE,0xC3,0x84,0x62,0x1C,0xF8 ))// 23C1E33A-1C10-46FB-8040-DEC384621CF8
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CINotificationVisual: WindowsFoundation.IID {
    .init(Data1: 0x68835B8E, Data2: 0xAA56, Data3: 0x4E11, Data4: ( 0x86,0xD3,0x5F,0x9A,0x69,0x57,0xBC,0x5B ))// 68835B8E-AA56-4E11-86D3-5F9A6957BC5B
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIScheduledTileNotification: WindowsFoundation.IID {
    .init(Data1: 0x0ABCA6D5, Data2: 0x99DC, Data3: 0x4C78, Data4: ( 0xA1,0x1C,0xC9,0xE7,0xF8,0x6D,0x7E,0xF7 ))// 0ABCA6D5-99DC-4C78-A11C-C9E7F86D7EF7
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIScheduledTileNotificationFactory: WindowsFoundation.IID {
    .init(Data1: 0x3383138A, Data2: 0x98C0, Data3: 0x4C3B, Data4: ( 0xBB,0xD6,0x4A,0x63,0x3C,0x7C,0xFC,0x29 ))// 3383138A-98C0-4C3B-BBD6-4A633C7CFC29
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification: WindowsFoundation.IID {
    .init(Data1: 0x79F577F8, Data2: 0x0DE7, Data3: 0x48CD, Data4: ( 0x97,0x40,0x9B,0x37,0x04,0x90,0xC8,0x38 ))// 79F577F8-0DE7-48CD-9740-9B370490C838
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification2: WindowsFoundation.IID {
    .init(Data1: 0xA66EA09C, Data2: 0x31B4, Data3: 0x43B0, Data4: ( 0xB5,0xDD,0x7A,0x40,0xE8,0x53,0x63,0xB1 ))// A66EA09C-31B4-43B0-B5DD-7A40E85363B1
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification3: WindowsFoundation.IID {
    .init(Data1: 0x98429E8B, Data2: 0xBD32, Data3: 0x4A3B, Data4: ( 0x9D,0x15,0x22,0xAE,0xA4,0x94,0x62,0xA1 ))// 98429E8B-BD32-4A3B-9D15-22AEA49462A1
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification4: WindowsFoundation.IID {
    .init(Data1: 0x1D4761FD, Data2: 0xBDEF, Data3: 0x4E4A, Data4: ( 0x96,0xBE,0x01,0x01,0x36,0x9B,0x58,0xD2 ))// 1D4761FD-BDEF-4E4A-96BE-0101369B58D2
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory: WindowsFoundation.IID {
    .init(Data1: 0xE7BED191, Data2: 0x0BB9, Data3: 0x4189, Data4: ( 0x83,0x94,0x31,0x76,0x1B,0x47,0x6F,0xD7 ))// E7BED191-0BB9-4189-8394-31761B476FD7
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x6173F6B4, Data2: 0x412A, Data3: 0x5E2C, Data4: ( 0xA6,0xED,0xA0,0x20,0x9A,0xEF,0x9A,0x09 ))// 6173F6B4-412A-5E2C-A6ED-A0209AEF9A09
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIShownTileNotification: WindowsFoundation.IID {
    .init(Data1: 0x342D8988, Data2: 0x5AF2, Data3: 0x481A, Data4: ( 0xA6,0xA3,0xF2,0xFD,0xC7,0x8D,0xE8,0x8E ))// 342D8988-5AF2-481A-A6A3-F2FDC78DE88E
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CITileFlyoutNotification: WindowsFoundation.IID {
    .init(Data1: 0x9A53B261, Data2: 0xC70C, Data3: 0x42BE, Data4: ( 0xB2,0xF3,0xF4,0x2A,0xA9,0x7D,0x34,0xE5 ))// 9A53B261-C70C-42BE-B2F3-F42AA97D34E5
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CITileFlyoutNotificationFactory: WindowsFoundation.IID {
    .init(Data1: 0xEF556FF5, Data2: 0x5226, Data3: 0x4F2B, Data4: ( 0xB2,0x78,0x88,0xA3,0x5D,0xFE,0x56,0x9F ))// EF556FF5-5226-4F2B-B278-88A35DFE569F
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CITileFlyoutUpdateManagerStatics: WindowsFoundation.IID {
    .init(Data1: 0x04363B0B, Data2: 0x1AC0, Data3: 0x4B99, Data4: ( 0x88,0xE7,0xAD,0xA8,0x3E,0x95,0x3D,0x48 ))// 04363B0B-1AC0-4B99-88E7-ADA83E953D48
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CITileFlyoutUpdater: WindowsFoundation.IID {
    .init(Data1: 0x8D40C76A, Data2: 0xC465, Data3: 0x4052, Data4: ( 0xA7,0x40,0x5C,0x26,0x54,0xC1,0xA0,0x89 ))// 8D40C76A-C465-4052-A740-5C2654C1A089
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CITileNotification: WindowsFoundation.IID {
    .init(Data1: 0xEBAEC8FA, Data2: 0x50EC, Data3: 0x4C18, Data4: ( 0xB4,0xD0,0x3A,0xF0,0x2E,0x55,0x40,0xAB ))// EBAEC8FA-50EC-4C18-B4D0-3AF02E5540AB
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CITileNotificationFactory: WindowsFoundation.IID {
    .init(Data1: 0xC6ABDD6E, Data2: 0x4928, Data3: 0x46C8, Data4: ( 0xBD,0xBF,0x81,0xA0,0x47,0xDE,0xA0,0xD4 ))// C6ABDD6E-4928-46C8-BDBF-81A047DEA0D4
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerForUser: WindowsFoundation.IID {
    .init(Data1: 0x55141348, Data2: 0x2EE2, Data3: 0x4E2D, Data4: ( 0x9C,0xC1,0x21,0x6A,0x20,0xDE,0xCC,0x9F ))// 55141348-2EE2-4E2D-9CC1-216A20DECC9F
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerStatics: WindowsFoundation.IID {
    .init(Data1: 0xDA159E5D, Data2: 0x3EA9, Data3: 0x4986, Data4: ( 0x8D,0x84,0xB0,0x9D,0x5E,0x12,0x27,0x6D ))// DA159E5D-3EA9-4986-8D84-B09D5E12276D
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerStatics2: WindowsFoundation.IID {
    .init(Data1: 0x731C1DDC, Data2: 0x8E14, Data3: 0x4B7C, Data4: ( 0xA3,0x4B,0x9D,0x22,0xDE,0x76,0xC8,0x4D ))// 731C1DDC-8E14-4B7C-A34B-9D22DE76C84D
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CITileUpdater: WindowsFoundation.IID {
    .init(Data1: 0x0942A48B, Data2: 0x1D91, Data3: 0x44EC, Data4: ( 0x92,0x43,0xC1,0xE8,0x21,0xC2,0x9A,0x20 ))// 0942A48B-1D91-44EC-9243-C1E821C29A20
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CITileUpdater2: WindowsFoundation.IID {
    .init(Data1: 0xA2266E12, Data2: 0x15EE, Data3: 0x43ED, Data4: ( 0x83,0xF5,0x65,0xB3,0x52,0xBB,0x1A,0x84 ))// A2266E12-15EE-43ED-83F5-65B352BB1A84
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastActivatedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xE3BF92F3, Data2: 0xC197, Data3: 0x436F, Data4: ( 0x82,0x65,0x06,0x25,0x82,0x4F,0x8D,0xAC ))// E3BF92F3-C197-436F-8265-0625824F8DAC
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastActivatedEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0xAB7DA512, Data2: 0xCC61, Data3: 0x568E, Data4: ( 0x81,0xBE,0x30,0x4A,0xC3,0x10,0x38,0xFA ))// AB7DA512-CC61-568E-81BE-304AC31038FA
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastCollection: WindowsFoundation.IID {
    .init(Data1: 0x0A8BC3B0, Data2: 0xE0BE, Data3: 0x4858, Data4: ( 0xBC,0x2A,0x89,0xDF,0xE0,0xB3,0x28,0x63 ))// 0A8BC3B0-E0BE-4858-BC2A-89DFE0B32863
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastCollectionFactory: WindowsFoundation.IID {
    .init(Data1: 0x164DD3D7, Data2: 0x73C4, Data3: 0x44F7, Data4: ( 0xB4,0xFF,0xFB,0x6D,0x4B,0xF1,0xF4,0xC6 ))// 164DD3D7-73C4-44F7-B4FF-FB6D4BF1F4C6
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastCollectionManager: WindowsFoundation.IID {
    .init(Data1: 0x2A1821FE, Data2: 0x179D, Data3: 0x49BC, Data4: ( 0xB7,0x9D,0xA5,0x27,0x92,0x0D,0x36,0x65 ))// 2A1821FE-179D-49BC-B79D-A527920D3665
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastDismissedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x3F89D935, Data2: 0xD9CB, Data3: 0x4538, Data4: ( 0xA0,0xF0,0xFF,0xE7,0x65,0x99,0x38,0xF8 ))// 3F89D935-D9CB-4538-A0F0-FFE7659938F8
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastFailedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x35176862, Data2: 0xCFD4, Data3: 0x44F8, Data4: ( 0xAD,0x64,0xF5,0x00,0xFD,0x89,0x6C,0x3B ))// 35176862-CFD4-44F8-AD64-F500FD896C3B
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotification: WindowsFoundation.IID {
    .init(Data1: 0x997E2675, Data2: 0x059E, Data3: 0x4E60, Data4: ( 0x8B,0x06,0x17,0x60,0x91,0x7C,0x8B,0x80 ))// 997E2675-059E-4E60-8B06-1760917C8B80
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotification2: WindowsFoundation.IID {
    .init(Data1: 0x9DFB9FD1, Data2: 0x143A, Data3: 0x490E, Data4: ( 0x90,0xBF,0xB9,0xFB,0xA7,0x13,0x2D,0xE7 ))// 9DFB9FD1-143A-490E-90BF-B9FBA7132DE7
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotification3: WindowsFoundation.IID {
    .init(Data1: 0x31E8AED8, Data2: 0x8141, Data3: 0x4F99, Data4: ( 0xBC,0x0A,0xC4,0xED,0x21,0x29,0x7D,0x77 ))// 31E8AED8-8141-4F99-BC0A-C4ED21297D77
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotification4: WindowsFoundation.IID {
    .init(Data1: 0x15154935, Data2: 0x28EA, Data3: 0x4727, Data4: ( 0x88,0xE9,0xC5,0x86,0x80,0xE2,0xD1,0x18 ))// 15154935-28EA-4727-88E9-C58680E2D118
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotification6: WindowsFoundation.IID {
    .init(Data1: 0x43EBFE53, Data2: 0x89AE, Data3: 0x5C1E, Data4: ( 0xA2,0x79,0x3A,0xEC,0xFE,0x9B,0x6F,0x54 ))// 43EBFE53-89AE-5C1E-A279-3AECFE9B6F54
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationActionTriggerDetail: WindowsFoundation.IID {
    .init(Data1: 0x9445135A, Data2: 0x38F3, Data3: 0x42F6, Data4: ( 0x96,0xAA,0x79,0x55,0xB0,0xF0,0x3D,0xA2 ))// 9445135A-38F3-42F6-96AA-7955B0F03DA2
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationFactory: WindowsFoundation.IID {
    .init(Data1: 0x04124B20, Data2: 0x82C6, Data3: 0x4229, Data4: ( 0xB1,0x09,0xFD,0x9E,0xD4,0x66,0x2B,0x53 ))// 04124B20-82C6-4229-B109-FD9ED4662B53
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistory: WindowsFoundation.IID {
    .init(Data1: 0x5CADDC63, Data2: 0x01D3, Data3: 0x4C97, Data4: ( 0x98,0x6F,0x05,0x33,0x48,0x3F,0xEE,0x14 ))// 5CADDC63-01D3-4C97-986F-0533483FEE14
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistory2: WindowsFoundation.IID {
    .init(Data1: 0x3BC3D253, Data2: 0x2F31, Data3: 0x4092, Data4: ( 0x91,0x29,0x8A,0xD5,0xAB,0xF0,0x67,0xDA ))// 3BC3D253-2F31-4092-9129-8AD5ABF067DA
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistoryChangedTriggerDetail: WindowsFoundation.IID {
    .init(Data1: 0xDB037FFA, Data2: 0x0068, Data3: 0x412C, Data4: ( 0x9C,0x83,0x26,0x7C,0x37,0xF6,0x56,0x70 ))// DB037FFA-0068-412C-9C83-267C37F65670
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistoryChangedTriggerDetail2: WindowsFoundation.IID {
    .init(Data1: 0x0B36E982, Data2: 0xC871, Data3: 0x49FB, Data4: ( 0xBA,0xBB,0x25,0xBD,0xBC,0x4C,0xC4,0x5B ))// 0B36E982-C871-49FB-BABB-25BDBC4CC45B
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser: WindowsFoundation.IID {
    .init(Data1: 0x79AB57F6, Data2: 0x43FE, Data3: 0x487B, Data4: ( 0x8A,0x7F,0x99,0x56,0x72,0x00,0xAE,0x94 ))// 79AB57F6-43FE-487B-8A7F-99567200AE94
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser2: WindowsFoundation.IID {
    .init(Data1: 0x679C64B7, Data2: 0x81AB, Data3: 0x42C2, Data4: ( 0x88,0x19,0xC9,0x58,0x76,0x77,0x53,0xF4 ))// 679C64B7-81AB-42C2-8819-C958767753F4
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics: WindowsFoundation.IID {
    .init(Data1: 0x50AC103F, Data2: 0xD235, Data3: 0x4598, Data4: ( 0xBB,0xEF,0x98,0xFE,0x4D,0x1A,0x3A,0xD4 ))// 50AC103F-D235-4598-BBEF-98FE4D1A3AD4
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2: WindowsFoundation.IID {
    .init(Data1: 0x7AB93C52, Data2: 0x0E48, Data3: 0x4750, Data4: ( 0xBA,0x9D,0x1A,0x41,0x13,0x98,0x18,0x47 ))// 7AB93C52-0E48-4750-BA9D-1A4113981847
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4: WindowsFoundation.IID {
    .init(Data1: 0x8F993FD3, Data2: 0xE516, Data3: 0x45FB, Data4: ( 0x81,0x30,0x39,0x8E,0x93,0xFA,0x52,0xC3 ))// 8F993FD3-E516-45FB-8130-398E93FA52C3
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5: WindowsFoundation.IID {
    .init(Data1: 0xD6F5F569, Data2: 0xD40D, Data3: 0x407C, Data4: ( 0x89,0x89,0x88,0xCA,0xB4,0x2C,0xFD,0x14 ))// D6F5F569-D40D-407C-8989-88CAB42CFD14
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotifier: WindowsFoundation.IID {
    .init(Data1: 0x75927B93, Data2: 0x03F3, Data3: 0x41EC, Data4: ( 0x91,0xD3,0x6E,0x5B,0xAC,0x1B,0x38,0xE7 ))// 75927B93-03F3-41EC-91D3-6E5BAC1B38E7
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotifier2: WindowsFoundation.IID {
    .init(Data1: 0x354389C6, Data2: 0x7C01, Data3: 0x4BD5, Data4: ( 0x9C,0x20,0x60,0x43,0x40,0xCD,0x2B,0x74 ))// 354389C6-7C01-4BD5-9C20-604340CD2B74
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotifier3: WindowsFoundation.IID {
    .init(Data1: 0xAE75A04A, Data2: 0x3B0C, Data3: 0x51AD, Data4: ( 0xB7,0xE8,0xB0,0x8A,0xB6,0x05,0x25,0x49 ))// AE75A04A-3B0C-51AD-B7E8-B08AB6052549
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIUserNotification: WindowsFoundation.IID {
    .init(Data1: 0xADF7E52F, Data2: 0x4E53, Data3: 0x42D5, Data4: ( 0x9C,0x33,0xEB,0x5E,0xA5,0x15,0xB2,0x3E ))// ADF7E52F-4E53-42D5-9C33-EB5EA515B23E
}

private var IID___x_ABI_CWindows_CUI_CNotifications_CIUserNotificationChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xB6BD6839, Data2: 0x79CF, Data3: 0x4B25, Data4: ( 0x82,0xC0,0x0C,0xE1,0xEE,0xF8,0x1F,0x8C ))// B6BD6839-79CF-4B25-82C0-0CE1EEF81F8C
}

public enum __ABI_Windows_UI_Notifications {
    public class IAdaptiveNotificationContent: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIAdaptiveNotificationContent }

        open func get_KindImpl() throws -> UWP.AdaptiveNotificationContentKind {
            var value: __x_ABI_CWindows_CUI_CNotifications_CAdaptiveNotificationContentKind = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIAdaptiveNotificationContent.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, &value))
            }
            return value
        }

        open func get_HintsImpl() throws -> WindowsFoundation.AnyIMap<String, String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIAdaptiveNotificationContent.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Hints(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: value)
        }

    }

    internal static var IAdaptiveNotificationContentVTable: __x_ABI_CWindows_CUI_CNotifications_CIAdaptiveNotificationContentVtbl = .init(
        QueryInterface: { IAdaptiveNotificationContentWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAdaptiveNotificationContentWrapper.addRef($0) },
        Release: { IAdaptiveNotificationContentWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_UI_Notifications.IAdaptiveNotificationContentWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.UI.Notifications.IAdaptiveNotificationContent").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Kind: {
            guard let __unwrapped__instance = IAdaptiveNotificationContentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.kind
            $1?.initialize(to: value)
            return S_OK
        },

        get_Hints: {
            guard let __unwrapped__instance = IAdaptiveNotificationContentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.hints
            let valueWrapper = UWP.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        }
    )

    public typealias IAdaptiveNotificationContentWrapper = InterfaceWrapperBase<__IMPL_Windows_UI_Notifications.IAdaptiveNotificationContentBridge>
    public class IAdaptiveNotificationText: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIAdaptiveNotificationText }

        internal func get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIAdaptiveNotificationText.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIAdaptiveNotificationText.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        internal func get_LanguageImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIAdaptiveNotificationText.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Language(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_LanguageImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIAdaptiveNotificationText.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Language(pThis, _value.get()))
            }
        }

    }

    public class IBadgeNotification: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIBadgeNotification }

        internal func get_ContentImpl() throws -> UWP.XmlDocument? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeNotification.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ExpirationTimeImpl(_ value: WindowsFoundation.DateTime?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExpirationTime(pThis, _value))
            }
        }

        internal func get_ExpirationTimeImpl() throws -> WindowsFoundation.DateTime? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeNotification.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpirationTime(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeWrapper.unwrapFrom(abi: value)
        }

    }

    public class IBadgeNotificationFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIBadgeNotificationFactory }

        internal func CreateBadgeNotificationImpl(_ content: UWP.XmlDocument?) throws -> IBadgeNotification {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeNotificationFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateBadgeNotification(pThis, RawPointer(content), &valueAbi))
                }
            }
            return IBadgeNotification(value!)
        }

    }

    public class IBadgeUpdateManagerForUser: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerForUser }

        internal func CreateBadgeUpdaterForApplicationImpl() throws -> UWP.BadgeUpdater? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerForUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateBadgeUpdaterForApplication(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateBadgeUpdaterForApplicationWithIdImpl(_ applicationId: String) throws -> UWP.BadgeUpdater? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _applicationId = try! HString(applicationId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerForUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateBadgeUpdaterForApplicationWithId(pThis, _applicationId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateBadgeUpdaterForSecondaryTileImpl(_ tileId: String) throws -> UWP.BadgeUpdater? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _tileId = try! HString(tileId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerForUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateBadgeUpdaterForSecondaryTile(pThis, _tileId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func get_UserImpl() throws -> UWP.User? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerForUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_User(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IBadgeUpdateManagerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerStatics }

        internal func CreateBadgeUpdaterForApplicationImpl() throws -> UWP.BadgeUpdater? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateBadgeUpdaterForApplication(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateBadgeUpdaterForApplicationWithIdImpl(_ applicationId: String) throws -> UWP.BadgeUpdater? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _applicationId = try! HString(applicationId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateBadgeUpdaterForApplicationWithId(pThis, _applicationId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateBadgeUpdaterForSecondaryTileImpl(_ tileId: String) throws -> UWP.BadgeUpdater? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _tileId = try! HString(tileId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateBadgeUpdaterForSecondaryTile(pThis, _tileId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func GetTemplateContentImpl(_ type: UWP.BadgeTemplateType) throws -> UWP.XmlDocument? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetTemplateContent(pThis, type, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IBadgeUpdateManagerStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerStatics2 }

        internal func GetForUserImpl(_ user: UWP.User?) throws -> UWP.BadgeUpdateManagerForUser? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForUser(pThis, RawPointer(user), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IBadgeUpdater: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdater }

        internal func UpdateImpl(_ notification: UWP.BadgeNotification?) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Update(pThis, RawPointer(notification)))
            }
        }

        internal func ClearImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
            }
        }

        internal func StartPeriodicUpdateImpl(_ badgeContent: WindowsFoundation.Uri?, _ requestedInterval: UWP.PeriodicUpdateRecurrence) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StartPeriodicUpdate(pThis, RawPointer(badgeContent), requestedInterval))
            }
        }

        internal func StartPeriodicUpdateAtTimeImpl(_ badgeContent: WindowsFoundation.Uri?, _ startTime: WindowsFoundation.DateTime, _ requestedInterval: UWP.PeriodicUpdateRecurrence) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StartPeriodicUpdateAtTime(pThis, RawPointer(badgeContent), .from(swift: startTime), requestedInterval))
            }
        }

        internal func StopPeriodicUpdateImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StopPeriodicUpdate(pThis))
            }
        }

    }

    public class IKnownAdaptiveNotificationHintsStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationHintsStatics }

        internal func get_StyleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationHintsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Style(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_WrapImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationHintsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Wrap(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_MaxLinesImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationHintsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLines(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_MinLinesImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationHintsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinLines(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_TextStackingImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationHintsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextStacking(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_AlignImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationHintsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Align(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IKnownAdaptiveNotificationTextStylesStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics }

        internal func get_CaptionImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Caption(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_BodyImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Body(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_BaseImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Base(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_SubtitleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Subtitle(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_TitleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_SubheaderImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Subheader(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_HeaderImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_TitleNumeralImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TitleNumeral(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_SubheaderNumeralImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SubheaderNumeral(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_HeaderNumeralImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderNumeral(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_CaptionSubtleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CaptionSubtle(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_BodySubtleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BodySubtle(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_BaseSubtleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseSubtle(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_SubtitleSubtleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SubtitleSubtle(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_TitleSubtleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TitleSubtle(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_SubheaderSubtleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SubheaderSubtle(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_SubheaderNumeralSubtleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SubheaderNumeralSubtle(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_HeaderSubtleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderSubtle(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_HeaderNumeralSubtleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownAdaptiveNotificationTextStylesStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderNumeralSubtle(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IKnownNotificationBindingsStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIKnownNotificationBindingsStatics }

        internal func get_ToastGenericImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIKnownNotificationBindingsStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ToastGeneric(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class INotification: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CINotification }

        internal func get_ExpirationTimeImpl() throws -> WindowsFoundation.DateTime? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotification.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpirationTime(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeWrapper.unwrapFrom(abi: value)
        }

        internal func put_ExpirationTimeImpl(_ value: WindowsFoundation.DateTime?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExpirationTime(pThis, _value))
            }
        }

        internal func get_VisualImpl() throws -> UWP.NotificationVisual? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotification.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Visual(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_VisualImpl(_ value: UWP.NotificationVisual?) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Visual(pThis, RawPointer(value)))
            }
        }

    }

    public class INotificationBinding: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CINotificationBinding }

        internal func get_TemplateImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotificationBinding.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Template(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_TemplateImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotificationBinding.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Template(pThis, _value.get()))
            }
        }

        internal func get_LanguageImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotificationBinding.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Language(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_LanguageImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotificationBinding.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Language(pThis, _value.get()))
            }
        }

        internal func get_HintsImpl() throws -> WindowsFoundation.AnyIMap<String, String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotificationBinding.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Hints(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal func GetTextElementsImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.AdaptiveNotificationText?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotificationBinding.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetTextElements(pThis, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CAdaptiveNotificationTextWrapper.unwrapFrom(abi: result)
        }

    }

    public class INotificationData: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CINotificationData }

        internal func get_ValuesImpl() throws -> WindowsFoundation.AnyIMap<String, String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotificationData.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Values(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal func get_SequenceNumberImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotificationData.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SequenceNumber(pThis, &value))
            }
            return value
        }

        internal func put_SequenceNumberImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotificationData.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SequenceNumber(pThis, value))
            }
        }

    }

    public class INotificationDataFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CINotificationDataFactory }

        internal func CreateNotificationDataWithValuesAndSequenceNumberImpl(_ initialValues: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, String>?>?, _ sequenceNumber: UInt32) throws -> INotificationData {
            let (value) = try ComPtrs.initialize { valueAbi in
                let initialValuesWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper(initialValues)
                let _initialValues = try! initialValuesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotificationDataFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateNotificationDataWithValuesAndSequenceNumber(pThis, _initialValues, sequenceNumber, &valueAbi))
                }
            }
            return INotificationData(value!)
        }

        internal func CreateNotificationDataWithValuesImpl(_ initialValues: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, String>?>?) throws -> INotificationData {
            let (value) = try ComPtrs.initialize { valueAbi in
                let initialValuesWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper(initialValues)
                let _initialValues = try! initialValuesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotificationDataFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateNotificationDataWithValues(pThis, _initialValues, &valueAbi))
                }
            }
            return INotificationData(value!)
        }

    }

    public class INotificationVisual: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CINotificationVisual }

        internal func get_LanguageImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotificationVisual.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Language(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_LanguageImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotificationVisual.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Language(pThis, _value.get()))
            }
        }

        internal func get_BindingsImpl() throws -> WindowsFoundation.AnyIVector<UWP.NotificationBinding?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotificationVisual.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bindings(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CNotifications__CNotificationBindingWrapper.unwrapFrom(abi: value)
        }

        internal func GetBindingImpl(_ templateName: String) throws -> UWP.NotificationBinding? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _templateName = try! HString(templateName)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CINotificationVisual.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetBinding(pThis, _templateName.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IScheduledTileNotification: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIScheduledTileNotification }

        internal func get_ContentImpl() throws -> UWP.XmlDocument? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledTileNotification.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DeliveryTimeImpl() throws -> WindowsFoundation.DateTime {
            var value: __x_ABI_CWindows_CFoundation_CDateTime = .init()
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledTileNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeliveryTime(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func put_ExpirationTimeImpl(_ value: WindowsFoundation.DateTime?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledTileNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExpirationTime(pThis, _value))
            }
        }

        internal func get_ExpirationTimeImpl() throws -> WindowsFoundation.DateTime? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledTileNotification.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpirationTime(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeWrapper.unwrapFrom(abi: value)
        }

        internal func put_TagImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledTileNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Tag(pThis, _value.get()))
            }
        }

        internal func get_TagImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledTileNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tag(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_IdImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledTileNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, _value.get()))
            }
        }

        internal func get_IdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledTileNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IScheduledTileNotificationFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIScheduledTileNotificationFactory }

        internal func CreateScheduledTileNotificationImpl(_ content: UWP.XmlDocument?, _ deliveryTime: WindowsFoundation.DateTime) throws -> IScheduledTileNotification {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledTileNotificationFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateScheduledTileNotification(pThis, RawPointer(content), .from(swift: deliveryTime), &valueAbi))
                }
            }
            return IScheduledTileNotification(value!)
        }

    }

    public class IScheduledToastNotification: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification }

        internal func get_ContentImpl() throws -> UWP.XmlDocument? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DeliveryTimeImpl() throws -> WindowsFoundation.DateTime {
            var value: __x_ABI_CWindows_CFoundation_CDateTime = .init()
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeliveryTime(pThis, &value))
            }
            return .from(abi: value)
        }

        internal func get_SnoozeIntervalImpl() throws -> WindowsFoundation.TimeSpan? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SnoozeInterval(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CTimeSpanWrapper.unwrapFrom(abi: value)
        }

        internal func get_MaximumSnoozeCountImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaximumSnoozeCount(pThis, &value))
            }
            return value
        }

        internal func put_IdImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, _value.get()))
            }
        }

        internal func get_IdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IScheduledToastNotification2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification2 }

        internal func put_TagImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Tag(pThis, _value.get()))
            }
        }

        internal func get_TagImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tag(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_GroupImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Group(pThis, _value.get()))
            }
        }

        internal func get_GroupImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Group(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_SuppressPopupImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuppressPopup(pThis, .init(from: value)))
            }
        }

        internal func get_SuppressPopupImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuppressPopup(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IScheduledToastNotification3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification3 }

        internal func get_NotificationMirroringImpl() throws -> UWP.NotificationMirroring {
            var value: __x_ABI_CWindows_CUI_CNotifications_CNotificationMirroring = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NotificationMirroring(pThis, &value))
            }
            return value
        }

        internal func put_NotificationMirroringImpl(_ value: UWP.NotificationMirroring) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NotificationMirroring(pThis, value))
            }
        }

        internal func get_RemoteIdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemoteId(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_RemoteIdImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RemoteId(pThis, _value.get()))
            }
        }

    }

    public class IScheduledToastNotification4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification4 }

        internal func get_ExpirationTimeImpl() throws -> WindowsFoundation.DateTime? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpirationTime(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeWrapper.unwrapFrom(abi: value)
        }

        internal func put_ExpirationTimeImpl(_ value: WindowsFoundation.DateTime?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExpirationTime(pThis, _value))
            }
        }

    }

    public class IScheduledToastNotificationFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory }

        internal func CreateScheduledToastNotificationImpl(_ content: UWP.XmlDocument?, _ deliveryTime: WindowsFoundation.DateTime) throws -> IScheduledToastNotification {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateScheduledToastNotification(pThis, RawPointer(content), .from(swift: deliveryTime), &valueAbi))
                }
            }
            return IScheduledToastNotification(value!)
        }

        internal func CreateScheduledToastNotificationRecurringImpl(_ content: UWP.XmlDocument?, _ deliveryTime: WindowsFoundation.DateTime, _ snoozeInterval: WindowsFoundation.TimeSpan, _ maximumSnoozeCount: UInt32) throws -> IScheduledToastNotification {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateScheduledToastNotificationRecurring(pThis, RawPointer(content), .from(swift: deliveryTime), .from(swift: snoozeInterval), maximumSnoozeCount, &valueAbi))
                }
            }
            return IScheduledToastNotification(value!)
        }

    }

    public class IScheduledToastNotificationShowingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs }

        internal func get_CancelImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_CancelImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

        internal func get_ScheduledToastNotificationImpl() throws -> UWP.ScheduledToastNotification? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScheduledToastNotification(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IShownTileNotification: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIShownTileNotification }

        internal func get_ArgumentsImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIShownTileNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Arguments(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ITileFlyoutNotification: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CITileFlyoutNotification }

        internal func get_ContentImpl() throws -> UWP.XmlDocument? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileFlyoutNotification.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ExpirationTimeImpl(_ value: WindowsFoundation.DateTime?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileFlyoutNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExpirationTime(pThis, _value))
            }
        }

        internal func get_ExpirationTimeImpl() throws -> WindowsFoundation.DateTime? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileFlyoutNotification.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpirationTime(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeWrapper.unwrapFrom(abi: value)
        }

    }

    public class ITileFlyoutNotificationFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CITileFlyoutNotificationFactory }

        internal func CreateTileFlyoutNotificationImpl(_ content: UWP.XmlDocument?) throws -> ITileFlyoutNotification {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileFlyoutNotificationFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateTileFlyoutNotification(pThis, RawPointer(content), &valueAbi))
                }
            }
            return ITileFlyoutNotification(value!)
        }

    }

    public class ITileFlyoutUpdateManagerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CITileFlyoutUpdateManagerStatics }

        internal func CreateTileFlyoutUpdaterForApplicationImpl() throws -> UWP.TileFlyoutUpdater? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileFlyoutUpdateManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateTileFlyoutUpdaterForApplication(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateTileFlyoutUpdaterForApplicationWithIdImpl(_ applicationId: String) throws -> UWP.TileFlyoutUpdater? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _applicationId = try! HString(applicationId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileFlyoutUpdateManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateTileFlyoutUpdaterForApplicationWithId(pThis, _applicationId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateTileFlyoutUpdaterForSecondaryTileImpl(_ tileId: String) throws -> UWP.TileFlyoutUpdater? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _tileId = try! HString(tileId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileFlyoutUpdateManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateTileFlyoutUpdaterForSecondaryTile(pThis, _tileId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func GetTemplateContentImpl(_ type: UWP.TileFlyoutTemplateType) throws -> UWP.XmlDocument? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileFlyoutUpdateManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetTemplateContent(pThis, type, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ITileFlyoutUpdater: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CITileFlyoutUpdater }

        internal func UpdateImpl(_ notification: UWP.TileFlyoutNotification?) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileFlyoutUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Update(pThis, RawPointer(notification)))
            }
        }

        internal func ClearImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileFlyoutUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
            }
        }

        internal func StartPeriodicUpdateImpl(_ tileFlyoutContent: WindowsFoundation.Uri?, _ requestedInterval: UWP.PeriodicUpdateRecurrence) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileFlyoutUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StartPeriodicUpdate(pThis, RawPointer(tileFlyoutContent), requestedInterval))
            }
        }

        internal func StartPeriodicUpdateAtTimeImpl(_ tileFlyoutContent: WindowsFoundation.Uri?, _ startTime: WindowsFoundation.DateTime, _ requestedInterval: UWP.PeriodicUpdateRecurrence) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileFlyoutUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StartPeriodicUpdateAtTime(pThis, RawPointer(tileFlyoutContent), .from(swift: startTime), requestedInterval))
            }
        }

        internal func StopPeriodicUpdateImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileFlyoutUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StopPeriodicUpdate(pThis))
            }
        }

        internal func get_SettingImpl() throws -> UWP.NotificationSetting {
            var value: __x_ABI_CWindows_CUI_CNotifications_CNotificationSetting = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileFlyoutUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Setting(pThis, &value))
            }
            return value
        }

    }

    public class ITileNotification: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CITileNotification }

        internal func get_ContentImpl() throws -> UWP.XmlDocument? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileNotification.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ExpirationTimeImpl(_ value: WindowsFoundation.DateTime?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExpirationTime(pThis, _value))
            }
        }

        internal func get_ExpirationTimeImpl() throws -> WindowsFoundation.DateTime? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileNotification.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpirationTime(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeWrapper.unwrapFrom(abi: value)
        }

        internal func put_TagImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Tag(pThis, _value.get()))
            }
        }

        internal func get_TagImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tag(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ITileNotificationFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CITileNotificationFactory }

        internal func CreateTileNotificationImpl(_ content: UWP.XmlDocument?) throws -> ITileNotification {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileNotificationFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateTileNotification(pThis, RawPointer(content), &valueAbi))
                }
            }
            return ITileNotification(value!)
        }

    }

    public class ITileUpdateManagerForUser: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerForUser }

        internal func CreateTileUpdaterForApplicationImpl() throws -> UWP.TileUpdater? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerForUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateTileUpdaterForApplication(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateTileUpdaterForApplicationWithIdImpl(_ applicationId: String) throws -> UWP.TileUpdater? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _applicationId = try! HString(applicationId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerForUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateTileUpdaterForApplicationWithId(pThis, _applicationId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateTileUpdaterForSecondaryTileImpl(_ tileId: String) throws -> UWP.TileUpdater? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _tileId = try! HString(tileId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerForUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateTileUpdaterForSecondaryTile(pThis, _tileId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func get_UserImpl() throws -> UWP.User? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerForUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_User(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITileUpdateManagerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerStatics }

        internal func CreateTileUpdaterForApplicationImpl() throws -> UWP.TileUpdater? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateTileUpdaterForApplication(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateTileUpdaterForApplicationWithIdImpl(_ applicationId: String) throws -> UWP.TileUpdater? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _applicationId = try! HString(applicationId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateTileUpdaterForApplicationWithId(pThis, _applicationId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateTileUpdaterForSecondaryTileImpl(_ tileId: String) throws -> UWP.TileUpdater? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _tileId = try! HString(tileId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateTileUpdaterForSecondaryTile(pThis, _tileId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func GetTemplateContentImpl(_ type: UWP.TileTemplateType) throws -> UWP.XmlDocument? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetTemplateContent(pThis, type, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ITileUpdateManagerStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerStatics2 }

        internal func GetForUserImpl(_ user: UWP.User?) throws -> UWP.TileUpdateManagerForUser? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForUser(pThis, RawPointer(user), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ITileUpdater: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CITileUpdater }

        internal func UpdateImpl(_ notification: UWP.TileNotification?) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Update(pThis, RawPointer(notification)))
            }
        }

        internal func ClearImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
            }
        }

        internal func EnableNotificationQueueImpl(_ enable: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.EnableNotificationQueue(pThis, .init(from: enable)))
            }
        }

        internal func get_SettingImpl() throws -> UWP.NotificationSetting {
            var value: __x_ABI_CWindows_CUI_CNotifications_CNotificationSetting = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Setting(pThis, &value))
            }
            return value
        }

        internal func AddToScheduleImpl(_ scheduledTile: UWP.ScheduledTileNotification?) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddToSchedule(pThis, RawPointer(scheduledTile)))
            }
        }

        internal func RemoveFromScheduleImpl(_ scheduledTile: UWP.ScheduledTileNotification?) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFromSchedule(pThis, RawPointer(scheduledTile)))
            }
        }

        internal func GetScheduledTileNotificationsImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.ScheduledTileNotification?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdater.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetScheduledTileNotifications(pThis, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CScheduledTileNotificationWrapper.unwrapFrom(abi: result)
        }

        internal func StartPeriodicUpdateImpl(_ tileContent: WindowsFoundation.Uri?, _ requestedInterval: UWP.PeriodicUpdateRecurrence) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StartPeriodicUpdate(pThis, RawPointer(tileContent), requestedInterval))
            }
        }

        internal func StartPeriodicUpdateAtTimeImpl(_ tileContent: WindowsFoundation.Uri?, _ startTime: WindowsFoundation.DateTime, _ requestedInterval: UWP.PeriodicUpdateRecurrence) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StartPeriodicUpdateAtTime(pThis, RawPointer(tileContent), .from(swift: startTime), requestedInterval))
            }
        }

        internal func StopPeriodicUpdateImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StopPeriodicUpdate(pThis))
            }
        }

        internal func StartPeriodicUpdateBatchImpl(_ tileContents: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>?, _ requestedInterval: UWP.PeriodicUpdateRecurrence) throws {
            let tileContentsWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUriWrapper(tileContents)
            let _tileContents = try! tileContentsWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StartPeriodicUpdateBatch(pThis, _tileContents, requestedInterval))
            }
        }

        internal func StartPeriodicUpdateBatchAtTimeImpl(_ tileContents: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>?, _ startTime: WindowsFoundation.DateTime, _ requestedInterval: UWP.PeriodicUpdateRecurrence) throws {
            let tileContentsWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUriWrapper(tileContents)
            let _tileContents = try! tileContentsWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdater.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StartPeriodicUpdateBatchAtTime(pThis, _tileContents, .from(swift: startTime), requestedInterval))
            }
        }

    }

    public class ITileUpdater2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CITileUpdater2 }

        internal func EnableNotificationQueueForSquare150x150Impl(_ enable: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdater2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.EnableNotificationQueueForSquare150x150(pThis, .init(from: enable)))
            }
        }

        internal func EnableNotificationQueueForWide310x150Impl(_ enable: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdater2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.EnableNotificationQueueForWide310x150(pThis, .init(from: enable)))
            }
        }

        internal func EnableNotificationQueueForSquare310x310Impl(_ enable: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CITileUpdater2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.EnableNotificationQueueForSquare310x310(pThis, .init(from: enable)))
            }
        }

    }

    public class IToastActivatedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastActivatedEventArgs }

        internal func get_ArgumentsImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastActivatedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Arguments(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IToastActivatedEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastActivatedEventArgs2 }

        internal func get_UserInputImpl() throws -> WindowsFoundation.ValueSet? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastActivatedEventArgs2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserInput(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IToastCollection: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastCollection }

        internal func get_IdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastCollection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DisplayNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastCollection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_DisplayNameImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastCollection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DisplayName(pThis, _value.get()))
            }
        }

        internal func get_LaunchArgsImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastCollection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LaunchArgs(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_LaunchArgsImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastCollection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LaunchArgs(pThis, _value.get()))
            }
        }

        internal func get_IconImpl() throws -> WindowsFoundation.Uri? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastCollection.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Icon(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_IconImpl(_ value: WindowsFoundation.Uri?) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastCollection.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Icon(pThis, RawPointer(value)))
            }
        }

    }

    public class IToastCollectionFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastCollectionFactory }

        internal func CreateInstanceImpl(_ collectionId: String, _ displayName: String, _ launchArgs: String, _ iconUri: WindowsFoundation.Uri?) throws -> IToastCollection {
            let (value) = try ComPtrs.initialize { valueAbi in
                let _collectionId = try! HString(collectionId)
                let _displayName = try! HString(displayName)
                let _launchArgs = try! HString(launchArgs)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastCollectionFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _collectionId.get(), _displayName.get(), _launchArgs.get(), RawPointer(iconUri), &valueAbi))
                }
            }
            return IToastCollection(value!)
        }

    }

    public class IToastCollectionManager: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastCollectionManager }

        internal func SaveToastCollectionAsyncImpl(_ collection: UWP.ToastCollection?) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastCollectionManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SaveToastCollectionAsync(pThis, RawPointer(collection), &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        internal func FindAllToastCollectionsAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.ToastCollection?>?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastCollectionManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllToastCollectionsAsync(pThis, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CToastCollectionWrapper.unwrapFrom(abi: operation)
        }

        internal func GetToastCollectionAsyncImpl(_ collectionId: String) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.ToastCollection?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _collectionId = try! HString(collectionId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastCollectionManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetToastCollectionAsync(pThis, _collectionId.get(), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CNotifications__CToastCollectionWrapper.unwrapFrom(abi: operation)
        }

        internal func RemoveToastCollectionAsyncImpl(_ collectionId: String) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _collectionId = try! HString(collectionId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastCollectionManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveToastCollectionAsync(pThis, _collectionId.get(), &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        internal func RemoveAllToastCollectionsAsyncImpl() throws -> WindowsFoundation.AnyIAsyncAction? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastCollectionManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAllToastCollectionsAsync(pThis, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        internal func get_UserImpl() throws -> UWP.User? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastCollectionManager.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_User(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AppIdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastCollectionManager.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AppId(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IToastDismissedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastDismissedEventArgs }

        internal func get_ReasonImpl() throws -> UWP.ToastDismissalReason {
            var value: __x_ABI_CWindows_CUI_CNotifications_CToastDismissalReason = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastDismissedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Reason(pThis, &value))
            }
            return value
        }

    }

    public class IToastFailedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastFailedEventArgs }

        internal func get_ErrorCodeImpl() throws -> HRESULT {
            var value: HRESULT = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastFailedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ErrorCode(pThis, &value))
            }
            return value
        }

    }

    public class IToastNotification: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotification }

        internal func get_ContentImpl() throws -> UWP.XmlDocument? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_ExpirationTimeImpl(_ value: WindowsFoundation.DateTime?) throws {
            let valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExpirationTime(pThis, _value))
            }
        }

        internal func get_ExpirationTimeImpl() throws -> WindowsFoundation.DateTime? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpirationTime(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CDateTimeWrapper.unwrapFrom(abi: value)
        }

        internal func add_DismissedImpl(_ handler: TypedEventHandler<UWP.ToastNotification?, UWP.ToastDismissedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CNotifications__CToastNotification___x_ABI_CWindows__CUI__CNotifications__CToastDismissedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Dismissed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_DismissedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Dismissed(pThis, token))
            }
        }

        internal func add_ActivatedImpl(_ handler: TypedEventHandler<UWP.ToastNotification?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CNotifications__CToastNotification_IInspectableWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Activated(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ActivatedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Activated(pThis, token))
            }
        }

        internal func add_FailedImpl(_ handler: TypedEventHandler<UWP.ToastNotification?, UWP.ToastFailedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CNotifications__CToastNotification___x_ABI_CWindows__CUI__CNotifications__CToastFailedEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Failed(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_FailedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Failed(pThis, token))
            }
        }

    }

    public class IToastNotification2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotification2 }

        internal func put_TagImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Tag(pThis, _value.get()))
            }
        }

        internal func get_TagImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tag(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_GroupImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Group(pThis, _value.get()))
            }
        }

        internal func get_GroupImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Group(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_SuppressPopupImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuppressPopup(pThis, .init(from: value)))
            }
        }

        internal func get_SuppressPopupImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuppressPopup(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IToastNotification3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotification3 }

        internal func get_NotificationMirroringImpl() throws -> UWP.NotificationMirroring {
            var value: __x_ABI_CWindows_CUI_CNotifications_CNotificationMirroring = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NotificationMirroring(pThis, &value))
            }
            return value
        }

        internal func put_NotificationMirroringImpl(_ value: UWP.NotificationMirroring) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NotificationMirroring(pThis, value))
            }
        }

        internal func get_RemoteIdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemoteId(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_RemoteIdImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RemoteId(pThis, _value.get()))
            }
        }

    }

    public class IToastNotification4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotification4 }

        internal func get_DataImpl() throws -> UWP.NotificationData? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Data(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func put_DataImpl(_ value: UWP.NotificationData?) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Data(pThis, RawPointer(value)))
            }
        }

        internal func get_PriorityImpl() throws -> UWP.ToastNotificationPriority {
            var value: __x_ABI_CWindows_CUI_CNotifications_CToastNotificationPriority = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Priority(pThis, &value))
            }
            return value
        }

        internal func put_PriorityImpl(_ value: UWP.ToastNotificationPriority) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Priority(pThis, value))
            }
        }

    }

    public class IToastNotification6: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotification6 }

        internal func get_ExpiresOnRebootImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification6.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpiresOnReboot(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ExpiresOnRebootImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotification6.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExpiresOnReboot(pThis, .init(from: value)))
            }
        }

    }

    public class IToastNotificationActionTriggerDetail: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationActionTriggerDetail }

        internal func get_ArgumentImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationActionTriggerDetail.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Argument(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_UserInputImpl() throws -> WindowsFoundation.ValueSet? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationActionTriggerDetail.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserInput(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IToastNotificationFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationFactory }

        internal func CreateToastNotificationImpl(_ content: UWP.XmlDocument?) throws -> IToastNotification {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateToastNotification(pThis, RawPointer(content), &valueAbi))
                }
            }
            return IToastNotification(value!)
        }

    }

    public class IToastNotificationHistory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistory }

        internal func RemoveGroupImpl(_ group: String) throws {
            let _group = try! HString(group)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveGroup(pThis, _group.get()))
            }
        }

        internal func RemoveGroupWithIdImpl(_ group: String, _ applicationId: String) throws {
            let _group = try! HString(group)
            let _applicationId = try! HString(applicationId)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveGroupWithId(pThis, _group.get(), _applicationId.get()))
            }
        }

        internal func RemoveGroupedTagWithIdImpl(_ tag: String, _ group: String, _ applicationId: String) throws {
            let _tag = try! HString(tag)
            let _group = try! HString(group)
            let _applicationId = try! HString(applicationId)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveGroupedTagWithId(pThis, _tag.get(), _group.get(), _applicationId.get()))
            }
        }

        internal func RemoveGroupedTagImpl(_ tag: String, _ group: String) throws {
            let _tag = try! HString(tag)
            let _group = try! HString(group)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveGroupedTag(pThis, _tag.get(), _group.get()))
            }
        }

        internal func RemoveImpl(_ tag: String) throws {
            let _tag = try! HString(tag)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, _tag.get()))
            }
        }

        internal func ClearImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
            }
        }

        internal func ClearWithIdImpl(_ applicationId: String) throws {
            let _applicationId = try! HString(applicationId)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistory.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ClearWithId(pThis, _applicationId.get()))
            }
        }

    }

    public class IToastNotificationHistory2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistory2 }

        internal func GetHistoryImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.ToastNotification?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistory2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetHistory(pThis, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CToastNotificationWrapper.unwrapFrom(abi: result)
        }

        internal func GetHistoryWithIdImpl(_ applicationId: String) throws -> WindowsFoundation.AnyIVectorView<UWP.ToastNotification?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _applicationId = try! HString(applicationId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistory2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetHistoryWithId(pThis, _applicationId.get(), &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CToastNotificationWrapper.unwrapFrom(abi: result)
        }

    }

    public class IToastNotificationHistoryChangedTriggerDetail: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistoryChangedTriggerDetail }

        internal func get_ChangeTypeImpl() throws -> UWP.ToastHistoryChangedType {
            var value: __x_ABI_CWindows_CUI_CNotifications_CToastHistoryChangedType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistoryChangedTriggerDetail.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChangeType(pThis, &value))
            }
            return value
        }

    }

    public class IToastNotificationHistoryChangedTriggerDetail2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistoryChangedTriggerDetail2 }

        internal func get_CollectionIdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistoryChangedTriggerDetail2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CollectionId(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IToastNotificationManagerForUser: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser }

        internal func CreateToastNotifierImpl() throws -> UWP.ToastNotifier? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateToastNotifier(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateToastNotifierWithIdImpl(_ applicationId: String) throws -> UWP.ToastNotifier? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _applicationId = try! HString(applicationId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateToastNotifierWithId(pThis, _applicationId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func get_HistoryImpl() throws -> UWP.ToastNotificationHistory? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_History(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_UserImpl() throws -> UWP.User? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_User(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IToastNotificationManagerForUser2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser2 }

        internal func GetToastNotifierForToastCollectionIdAsyncImpl(_ collectionId: String) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.ToastNotifier?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _collectionId = try! HString(collectionId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetToastNotifierForToastCollectionIdAsync(pThis, _collectionId.get(), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CNotifications__CToastNotifierWrapper.unwrapFrom(abi: operation)
        }

        internal func GetHistoryForToastCollectionIdAsyncImpl(_ collectionId: String) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.ToastNotificationHistory?>? {
            let (operation) = try ComPtrs.initialize { operationAbi in
                let _collectionId = try! HString(collectionId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetHistoryForToastCollectionIdAsync(pThis, _collectionId.get(), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CUI__CNotifications__CToastNotificationHistoryWrapper.unwrapFrom(abi: operation)
        }

        internal func GetToastCollectionManagerImpl() throws -> UWP.ToastCollectionManager? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetToastCollectionManager(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func GetToastCollectionManagerWithAppIdImpl(_ appId: String) throws -> UWP.ToastCollectionManager? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _appId = try! HString(appId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetToastCollectionManagerWithAppId(pThis, _appId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IToastNotificationManagerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics }

        internal func CreateToastNotifierImpl() throws -> UWP.ToastNotifier? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateToastNotifier(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func CreateToastNotifierWithIdImpl(_ applicationId: String) throws -> UWP.ToastNotifier? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _applicationId = try! HString(applicationId)
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateToastNotifierWithId(pThis, _applicationId.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func GetTemplateContentImpl(_ type: UWP.ToastTemplateType) throws -> UWP.XmlDocument? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetTemplateContent(pThis, type, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IToastNotificationManagerStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2 }

        internal func get_HistoryImpl() throws -> UWP.ToastNotificationHistory? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_History(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IToastNotificationManagerStatics4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4 }

        internal func GetForUserImpl(_ user: UWP.User?) throws -> UWP.ToastNotificationManagerForUser? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForUser(pThis, RawPointer(user), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal func ConfigureNotificationMirroringImpl(_ value: UWP.NotificationMirroring) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ConfigureNotificationMirroring(pThis, value))
            }
        }

    }

    public class IToastNotificationManagerStatics5: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5 }

        internal func GetDefaultImpl() throws -> UWP.ToastNotificationManagerForUser? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDefault(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IToastNotifier: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotifier }

        internal func ShowImpl(_ notification: UWP.ToastNotification?) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotifier.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Show(pThis, RawPointer(notification)))
            }
        }

        internal func HideImpl(_ notification: UWP.ToastNotification?) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotifier.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Hide(pThis, RawPointer(notification)))
            }
        }

        internal func get_SettingImpl() throws -> UWP.NotificationSetting {
            var value: __x_ABI_CWindows_CUI_CNotifications_CNotificationSetting = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotifier.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Setting(pThis, &value))
            }
            return value
        }

        internal func AddToScheduleImpl(_ scheduledToast: UWP.ScheduledToastNotification?) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotifier.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddToSchedule(pThis, RawPointer(scheduledToast)))
            }
        }

        internal func RemoveFromScheduleImpl(_ scheduledToast: UWP.ScheduledToastNotification?) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotifier.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFromSchedule(pThis, RawPointer(scheduledToast)))
            }
        }

        internal func GetScheduledToastNotificationsImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.ScheduledToastNotification?>? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotifier.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetScheduledToastNotifications(pThis, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CScheduledToastNotificationWrapper.unwrapFrom(abi: result)
        }

    }

    public class IToastNotifier2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotifier2 }

        internal func UpdateWithTagAndGroupImpl(_ data: UWP.NotificationData?, _ tag: String, _ group: String) throws -> UWP.NotificationUpdateResult {
            var result: __x_ABI_CWindows_CUI_CNotifications_CNotificationUpdateResult = .init(0)
            let _tag = try! HString(tag)
            let _group = try! HString(group)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotifier2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.UpdateWithTagAndGroup(pThis, RawPointer(data), _tag.get(), _group.get(), &result))
            }
            return result
        }

        internal func UpdateWithTagImpl(_ data: UWP.NotificationData?, _ tag: String) throws -> UWP.NotificationUpdateResult {
            var result: __x_ABI_CWindows_CUI_CNotifications_CNotificationUpdateResult = .init(0)
            let _tag = try! HString(tag)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotifier2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.UpdateWithTag(pThis, RawPointer(data), _tag.get(), &result))
            }
            return result
        }

    }

    public class IToastNotifier3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIToastNotifier3 }

        internal func add_ScheduledToastNotificationShowingImpl(_ handler: TypedEventHandler<UWP.ToastNotifier?, UWP.ScheduledToastNotificationShowingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CNotifications__CToastNotifier___x_ABI_CWindows__CUI__CNotifications__CScheduledToastNotificationShowingEventArgsWrapper(handler)
            let _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotifier3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ScheduledToastNotificationShowing(pThis, _handler, &token))
            }
            return token
        }

        internal func remove_ScheduledToastNotificationShowingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIToastNotifier3.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ScheduledToastNotificationShowing(pThis, token))
            }
        }

    }

    public class IUserNotification: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIUserNotification }

        internal func get_NotificationImpl() throws -> UWP.Notification? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIUserNotification.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Notification(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_AppInfoImpl() throws -> UWP.AppInfo? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIUserNotification.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AppInfo(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_IdImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIUserNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return value
        }

        internal func get_CreationTimeImpl() throws -> WindowsFoundation.DateTime {
            var value: __x_ABI_CWindows_CFoundation_CDateTime = .init()
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIUserNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CreationTime(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IUserNotificationChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CUI_CNotifications_CIUserNotificationChangedEventArgs }

        internal func get_ChangeKindImpl() throws -> UWP.UserNotificationChangedKind {
            var value: __x_ABI_CWindows_CUI_CNotifications_CUserNotificationChangedKind = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIUserNotificationChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChangeKind(pThis, &value))
            }
            return value
        }

        internal func get_UserNotificationIdImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CUI_CNotifications_CIUserNotificationChangedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserNotificationId(pThis, &value))
            }
            return value
        }

    }

}
