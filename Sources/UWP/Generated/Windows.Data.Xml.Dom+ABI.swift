// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlAttribute: WindowsFoundation.IID {
    .init(Data1: 0xAC144AA4, Data2: 0xB4F1, Data3: 0x4DB6, Data4: ( 0xB2,0x06,0x8A,0x22,0xC3,0x08,0xDB,0x0A ))// AC144AA4-B4F1-4DB6-B206-8A22C308DB0A
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlCDataSection: WindowsFoundation.IID {
    .init(Data1: 0x4D04B46F, Data2: 0xC8BD, Data3: 0x45B4, Data4: ( 0x88,0x99,0x04,0x00,0xD7,0xC2,0xC6,0x0F ))// 4D04B46F-C8BD-45B4-8899-0400D7C2C60F
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlCharacterData: WindowsFoundation.IID {
    .init(Data1: 0x132E42AB, Data2: 0x4E36, Data3: 0x4DF6, Data4: ( 0xB1,0xC8,0x0C,0xE6,0x2F,0xD8,0x8B,0x26 ))// 132E42AB-4E36-4DF6-B1C8-0CE62FD88B26
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlComment: WindowsFoundation.IID {
    .init(Data1: 0xBCA474D5, Data2: 0xB61F, Data3: 0x4611, Data4: ( 0x9C,0xAC,0x2E,0x92,0xE3,0x47,0x6D,0x47 ))// BCA474D5-B61F-4611-9CAC-2E92E3476D47
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument: WindowsFoundation.IID {
    .init(Data1: 0xF7F3A506, Data2: 0x1E87, Data3: 0x42D6, Data4: ( 0xBC,0xFB,0xB8,0xC8,0x09,0xFA,0x54,0x94 ))// F7F3A506-1E87-42D6-BCFB-B8C809FA5494
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentFragment: WindowsFoundation.IID {
    .init(Data1: 0xE2EA6A96, Data2: 0x0C21, Data3: 0x44A5, Data4: ( 0x8B,0xC9,0x9E,0x4A,0x26,0x27,0x08,0xEC ))// E2EA6A96-0C21-44A5-8BC9-9E4A262708EC
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentIO: WindowsFoundation.IID {
    .init(Data1: 0x6CD0E74E, Data2: 0xEE65, Data3: 0x4489, Data4: ( 0x9E,0xBF,0xCA,0x43,0xE8,0x7B,0xA6,0x37 ))// 6CD0E74E-EE65-4489-9EBF-CA43E87BA637
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentIO2: WindowsFoundation.IID {
    .init(Data1: 0x5D034661, Data2: 0x7BD8, Data3: 0x4AD5, Data4: ( 0x9E,0xBF,0x81,0xE6,0x34,0x72,0x63,0xB1 ))// 5D034661-7BD8-4AD5-9EBF-81E6347263B1
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentStatics: WindowsFoundation.IID {
    .init(Data1: 0x5543D254, Data2: 0xD757, Data3: 0x4B79, Data4: ( 0x95,0x39,0x23,0x2B,0x18,0xF5,0x0B,0xF1 ))// 5543D254-D757-4B79-9539-232B18F50BF1
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentType: WindowsFoundation.IID {
    .init(Data1: 0xF7342425, Data2: 0x9781, Data3: 0x4964, Data4: ( 0x8E,0x94,0x9B,0x1C,0x6D,0xFC,0x9B,0xC7 ))// F7342425-9781-4964-8E94-9B1C6DFC9BC7
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlDomImplementation: WindowsFoundation.IID {
    .init(Data1: 0x6DE58132, Data2: 0xF11D, Data3: 0x4FBB, Data4: ( 0x8C,0xC6,0x58,0x3C,0xBA,0x93,0x11,0x2F ))// 6DE58132-F11D-4FBB-8CC6-583CBA93112F
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlElement: WindowsFoundation.IID {
    .init(Data1: 0x2DFB8A1F, Data2: 0x6B10, Data3: 0x4EF8, Data4: ( 0x9F,0x83,0xEF,0xCC,0xE8,0xFA,0xEC,0x37 ))// 2DFB8A1F-6B10-4EF8-9F83-EFCCE8FAEC37
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlEntityReference: WindowsFoundation.IID {
    .init(Data1: 0x2E2F47BC, Data2: 0xC3D0, Data3: 0x4CCF, Data4: ( 0xBB,0x86,0x0A,0xB8,0xC3,0x6A,0x61,0xCF ))// 2E2F47BC-C3D0-4CCF-BB86-0AB8C36A61CF
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlLoadSettings: WindowsFoundation.IID {
    .init(Data1: 0x58AA07A8, Data2: 0xFED6, Data3: 0x46F7, Data4: ( 0xB4,0xC5,0xFB,0x1B,0xA7,0x21,0x08,0xD6 ))// 58AA07A8-FED6-46F7-B4C5-FB1BA72108D6
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap: WindowsFoundation.IID {
    .init(Data1: 0xB3A69EB0, Data2: 0xAAB0, Data3: 0x4B82, Data4: ( 0xA6,0xFA,0xB1,0x45,0x3F,0x7C,0x02,0x1B ))// B3A69EB0-AAB0-4B82-A6FA-B1453F7C021B
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlNode: WindowsFoundation.IID {
    .init(Data1: 0x1C741D59, Data2: 0x2122, Data3: 0x47D5, Data4: ( 0xA8,0x56,0x83,0xF3,0xD4,0x21,0x48,0x75 ))// 1C741D59-2122-47D5-A856-83F3D4214875
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeList: WindowsFoundation.IID {
    .init(Data1: 0x8C60AD77, Data2: 0x83A4, Data3: 0x4EC1, Data4: ( 0x9C,0x54,0x7B,0xA4,0x29,0xE1,0x3D,0xA6 ))// 8C60AD77-83A4-4EC1-9C54-7BA429E13DA6
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeSelector: WindowsFoundation.IID {
    .init(Data1: 0x63DBBA8B, Data2: 0xD0DB, Data3: 0x4FE1, Data4: ( 0xB7,0x45,0xF9,0x43,0x3A,0xFD,0xC2,0x5B ))// 63DBBA8B-D0DB-4FE1-B745-F9433AFDC25B
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeSerializer: WindowsFoundation.IID {
    .init(Data1: 0x5CC5B382, Data2: 0xE6DD, Data3: 0x4991, Data4: ( 0xAB,0xEF,0x06,0xD8,0xD2,0xE7,0xBD,0x0C ))// 5CC5B382-E6DD-4991-ABEF-06D8D2E7BD0C
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction: WindowsFoundation.IID {
    .init(Data1: 0x2707FD1E, Data2: 0x1E92, Data3: 0x4ECE, Data4: ( 0xB6,0xF4,0x26,0xF0,0x69,0x07,0x8D,0xDC ))// 2707FD1E-1E92-4ECE-B6F4-26F069078DDC
}

private var IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlText: WindowsFoundation.IID {
    .init(Data1: 0xF931A4CB, Data2: 0x308D, Data3: 0x4760, Data4: ( 0xA1,0xD5,0x43,0xB6,0x74,0x50,0xAC,0x7E ))// F931A4CB-308D-4760-A1D5-43B67450AC7E
}

public enum __ABI_Windows_Data_Xml_Dom {
    public class IXmlAttribute: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlAttribute }

        internal func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlAttribute.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_SpecifiedImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlAttribute.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Specified(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_ValueImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlAttribute.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ValueImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlAttribute.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Value(pThis, _value.get()))
            }
        }

    }

    public class IXmlCDataSection: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlCDataSection }

    }

    public class IXmlCharacterData: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlCharacterData }

        open func get_DataImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlCharacterData.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Data(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_DataImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlCharacterData.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Data(pThis, _value.get()))
            }
        }

        open func get_LengthImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlCharacterData.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Length(pThis, &value))
            }
            return value
        }

        open func SubstringDataImpl(_ offset: UInt32, _ count: UInt32) throws -> String {
            var data: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlCharacterData.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SubstringData(pThis, offset, count, &data))
            }
            return .init(from: data)
        }

        open func AppendDataImpl(_ data: String) throws {
            let _data = try! HString(data)
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlCharacterData.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AppendData(pThis, _data.get()))
            }
        }

        open func InsertDataImpl(_ offset: UInt32, _ data: String) throws {
            let _data = try! HString(data)
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlCharacterData.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InsertData(pThis, offset, _data.get()))
            }
        }

        open func DeleteDataImpl(_ offset: UInt32, _ count: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlCharacterData.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DeleteData(pThis, offset, count))
            }
        }

        open func ReplaceDataImpl(_ offset: UInt32, _ count: UInt32, _ data: String) throws {
            let _data = try! HString(data)
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlCharacterData.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceData(pThis, offset, count, _data.get()))
            }
        }

    }

    internal static var IXmlCharacterDataVTable: __x_ABI_CWindows_CData_CXml_CDom_CIXmlCharacterDataVtbl = .init(
        QueryInterface: { IXmlCharacterDataWrapper.queryInterface($0, $1, $2) },
        AddRef: { IXmlCharacterDataWrapper.addRef($0) },
        Release: { IXmlCharacterDataWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 6).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Data_Xml_Dom.IXmlCharacterDataWrapper.IID
            iids[3] = __ABI_Windows_Data_Xml_Dom.IXmlNodeSelectorWrapper.IID
            iids[4] = __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializerWrapper.IID
            iids[5] = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.IID
            $1!.pointee = 6
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Data.Xml.Dom.IXmlCharacterData").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Data: {
            guard let __unwrapped__instance = IXmlCharacterDataWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.data
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        put_Data: {
            guard let __unwrapped__instance = IXmlCharacterDataWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.data = value
            return S_OK
        },

        get_Length: {
            guard let __unwrapped__instance = IXmlCharacterDataWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.length
            $1?.initialize(to: value)
            return S_OK
        },

        SubstringData: {
            do {
                guard let __unwrapped__instance = IXmlCharacterDataWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let offset: UInt32 = $1
                let count: UInt32 = $2
                let data = try __unwrapped__instance.substringData(offset, count)
                $3?.initialize(to: try! HString(data).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        AppendData: {
            do {
                guard let __unwrapped__instance = IXmlCharacterDataWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let data: String = .init(from: $1)
                try __unwrapped__instance.appendData(data)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        InsertData: {
            do {
                guard let __unwrapped__instance = IXmlCharacterDataWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let offset: UInt32 = $1
                let data: String = .init(from: $2)
                try __unwrapped__instance.insertData(offset, data)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        DeleteData: {
            do {
                guard let __unwrapped__instance = IXmlCharacterDataWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let offset: UInt32 = $1
                let count: UInt32 = $2
                try __unwrapped__instance.deleteData(offset, count)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ReplaceData: {
            do {
                guard let __unwrapped__instance = IXmlCharacterDataWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let offset: UInt32 = $1
                let count: UInt32 = $2
                let data: String = .init(from: $3)
                try __unwrapped__instance.replaceData(offset, count, data)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IXmlCharacterDataWrapper = InterfaceWrapperBase<__IMPL_Windows_Data_Xml_Dom.IXmlCharacterDataBridge>
    public class IXmlComment: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlComment }

    }

    public class IXmlDocument: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument }

        internal func get_DoctypeImpl() throws -> UWP.XmlDocumentType? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Doctype(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_ImplementationImpl() throws -> UWP.XmlDomImplementation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Implementation(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_DocumentElementImpl() throws -> UWP.XmlElement? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DocumentElement(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func CreateElementImpl(_ tagName: String) throws -> UWP.XmlElement? {
            let (newElement) = try ComPtrs.initialize { newElementAbi in
                let _tagName = try! HString(tagName)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateElement(pThis, _tagName.get(), &newElementAbi))
                }
            }
            return .from(abi: newElement)
        }

        internal func CreateDocumentFragmentImpl() throws -> UWP.XmlDocumentFragment? {
            let (newDocumentFragment) = try ComPtrs.initialize { newDocumentFragmentAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDocumentFragment(pThis, &newDocumentFragmentAbi))
                }
            }
            return .from(abi: newDocumentFragment)
        }

        internal func CreateTextNodeImpl(_ data: String) throws -> UWP.XmlText? {
            let (newTextNode) = try ComPtrs.initialize { newTextNodeAbi in
                let _data = try! HString(data)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateTextNode(pThis, _data.get(), &newTextNodeAbi))
                }
            }
            return .from(abi: newTextNode)
        }

        internal func CreateCommentImpl(_ data: String) throws -> UWP.XmlComment? {
            let (newComment) = try ComPtrs.initialize { newCommentAbi in
                let _data = try! HString(data)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateComment(pThis, _data.get(), &newCommentAbi))
                }
            }
            return .from(abi: newComment)
        }

        internal func CreateProcessingInstructionImpl(_ target: String, _ data: String) throws -> UWP.XmlProcessingInstruction? {
            let (newProcessingInstruction) = try ComPtrs.initialize { newProcessingInstructionAbi in
                let _target = try! HString(target)
                let _data = try! HString(data)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateProcessingInstruction(pThis, _target.get(), _data.get(), &newProcessingInstructionAbi))
                }
            }
            return .from(abi: newProcessingInstruction)
        }

        internal func CreateAttributeImpl(_ name: String) throws -> UWP.XmlAttribute? {
            let (newAttribute) = try ComPtrs.initialize { newAttributeAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAttribute(pThis, _name.get(), &newAttributeAbi))
                }
            }
            return .from(abi: newAttribute)
        }

        internal func CreateEntityReferenceImpl(_ name: String) throws -> UWP.XmlEntityReference? {
            let (newEntityReference) = try ComPtrs.initialize { newEntityReferenceAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateEntityReference(pThis, _name.get(), &newEntityReferenceAbi))
                }
            }
            return .from(abi: newEntityReference)
        }

        internal func GetElementsByTagNameImpl(_ tagName: String) throws -> UWP.XmlNodeList? {
            let (elements) = try ComPtrs.initialize { elementsAbi in
                let _tagName = try! HString(tagName)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetElementsByTagName(pThis, _tagName.get(), &elementsAbi))
                }
            }
            return .from(abi: elements)
        }

        internal func CreateCDataSectionImpl(_ data: String) throws -> UWP.XmlCDataSection? {
            let (newCDataSection) = try ComPtrs.initialize { newCDataSectionAbi in
                let _data = try! HString(data)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCDataSection(pThis, _data.get(), &newCDataSectionAbi))
                }
            }
            return .from(abi: newCDataSection)
        }

        internal func get_DocumentUriImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DocumentUri(pThis, &value))
            }
            return .init(from: value)
        }

        internal func CreateAttributeNSImpl(_ namespaceUri: Any?, _ qualifiedName: String) throws -> UWP.XmlAttribute? {
            let (newAttribute) = try ComPtrs.initialize { newAttributeAbi in
                let namespaceUriWrapper = __ABI_.AnyWrapper(namespaceUri)
                let _namespaceUri = try! namespaceUriWrapper?.toABI { $0 }
                let _qualifiedName = try! HString(qualifiedName)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAttributeNS(pThis, _namespaceUri, _qualifiedName.get(), &newAttributeAbi))
                }
            }
            return .from(abi: newAttribute)
        }

        internal func CreateElementNSImpl(_ namespaceUri: Any?, _ qualifiedName: String) throws -> UWP.XmlElement? {
            let (newElement) = try ComPtrs.initialize { newElementAbi in
                let namespaceUriWrapper = __ABI_.AnyWrapper(namespaceUri)
                let _namespaceUri = try! namespaceUriWrapper?.toABI { $0 }
                let _qualifiedName = try! HString(qualifiedName)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateElementNS(pThis, _namespaceUri, _qualifiedName.get(), &newElementAbi))
                }
            }
            return .from(abi: newElement)
        }

        internal func GetElementByIdImpl(_ elementId: String) throws -> UWP.XmlElement? {
            let (element) = try ComPtrs.initialize { elementAbi in
                let _elementId = try! HString(elementId)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetElementById(pThis, _elementId.get(), &elementAbi))
                }
            }
            return .from(abi: element)
        }

        internal func ImportNodeImpl(_ node: UWP.AnyIXmlNode?, _ deep: Bool) throws -> UWP.AnyIXmlNode? {
            let (newNode) = try ComPtrs.initialize { newNodeAbi in
                let nodeWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(node)
                let _node = try! nodeWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ImportNode(pThis, _node, .init(from: deep), &newNodeAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: newNode)
        }

    }

    public class IXmlDocumentFragment: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentFragment }

    }

    public class IXmlDocumentIO: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentIO }

        internal func LoadXmlImpl(_ xml: String) throws {
            let _xml = try! HString(xml)
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentIO.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.LoadXml(pThis, _xml.get()))
            }
        }

        internal func LoadXmlWithSettingsImpl(_ xml: String, _ loadSettings: UWP.XmlLoadSettings?) throws {
            let _xml = try! HString(xml)
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentIO.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.LoadXmlWithSettings(pThis, _xml.get(), RawPointer(loadSettings)))
            }
        }

        internal func SaveToFileAsyncImpl(_ file: UWP.AnyIStorageFile?) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                let fileWrapper = __ABI_Windows_Storage.IStorageFileWrapper(file)
                let _file = try! fileWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentIO.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SaveToFileAsync(pThis, _file, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    public class IXmlDocumentIO2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentIO2 }

        internal func LoadXmlFromBufferImpl(_ buffer: UWP.AnyIBuffer?) throws {
            let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
            let _buffer = try! bufferWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentIO2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.LoadXmlFromBuffer(pThis, _buffer))
            }
        }

        internal func LoadXmlFromBufferWithSettingsImpl(_ buffer: UWP.AnyIBuffer?, _ loadSettings: UWP.XmlLoadSettings?) throws {
            let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
            let _buffer = try! bufferWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentIO2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.LoadXmlFromBufferWithSettings(pThis, _buffer, RawPointer(loadSettings)))
            }
        }

    }

    public class IXmlDocumentStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentStatics }

        internal func LoadFromUriAsyncImpl(_ uri: WindowsFoundation.Uri?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.XmlDocument?>? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromUriAsync(pThis, RawPointer(uri), &asyncInfoAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CData__CXml__CDom__CXmlDocumentWrapper.unwrapFrom(abi: asyncInfo)
        }

        internal func LoadFromUriWithSettingsAsyncImpl(_ uri: WindowsFoundation.Uri?, _ loadSettings: UWP.XmlLoadSettings?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.XmlDocument?>? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromUriWithSettingsAsync(pThis, RawPointer(uri), RawPointer(loadSettings), &asyncInfoAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CData__CXml__CDom__CXmlDocumentWrapper.unwrapFrom(abi: asyncInfo)
        }

        internal func LoadFromFileAsyncImpl(_ file: UWP.AnyIStorageFile?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.XmlDocument?>? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                let fileWrapper = __ABI_Windows_Storage.IStorageFileWrapper(file)
                let _file = try! fileWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromFileAsync(pThis, _file, &asyncInfoAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CData__CXml__CDom__CXmlDocumentWrapper.unwrapFrom(abi: asyncInfo)
        }

        internal func LoadFromFileWithSettingsAsyncImpl(_ file: UWP.AnyIStorageFile?, _ loadSettings: UWP.XmlLoadSettings?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.XmlDocument?>? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                let fileWrapper = __ABI_Windows_Storage.IStorageFileWrapper(file)
                let _file = try! fileWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromFileWithSettingsAsync(pThis, _file, RawPointer(loadSettings), &asyncInfoAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CData__CXml__CDom__CXmlDocumentWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    public class IXmlDocumentType: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentType }

        internal func get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_EntitiesImpl() throws -> UWP.XmlNamedNodeMap? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Entities(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal func get_NotationsImpl() throws -> UWP.XmlNamedNodeMap? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Notations(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IXmlDomImplementation: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlDomImplementation }

        internal func HasFeatureImpl(_ feature: String, _ version: Any?) throws -> Bool {
            var featureSupported: boolean = 0
            let _feature = try! HString(feature)
            let versionWrapper = __ABI_.AnyWrapper(version)
            let _version = try! versionWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlDomImplementation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HasFeature(pThis, _feature.get(), _version, &featureSupported))
            }
            return .init(from: featureSupported)
        }

    }

    public class IXmlElement: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlElement }

        internal func get_TagNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TagName(pThis, &value))
            }
            return .init(from: value)
        }

        internal func GetAttributeImpl(_ attributeName: String) throws -> String {
            var attributeValue: HSTRING?
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAttribute(pThis, _attributeName.get(), &attributeValue))
            }
            return .init(from: attributeValue)
        }

        internal func SetAttributeImpl(_ attributeName: String, _ attributeValue: String) throws {
            let _attributeName = try! HString(attributeName)
            let _attributeValue = try! HString(attributeValue)
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAttribute(pThis, _attributeName.get(), _attributeValue.get()))
            }
        }

        internal func RemoveAttributeImpl(_ attributeName: String) throws {
            let _attributeName = try! HString(attributeName)
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAttribute(pThis, _attributeName.get()))
            }
        }

        internal func GetAttributeNodeImpl(_ attributeName: String) throws -> UWP.XmlAttribute? {
            let (attributeNode) = try ComPtrs.initialize { attributeNodeAbi in
                let _attributeName = try! HString(attributeName)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAttributeNode(pThis, _attributeName.get(), &attributeNodeAbi))
                }
            }
            return .from(abi: attributeNode)
        }

        internal func SetAttributeNodeImpl(_ newAttribute: UWP.XmlAttribute?) throws -> UWP.XmlAttribute? {
            let (previousAttribute) = try ComPtrs.initialize { previousAttributeAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetAttributeNode(pThis, RawPointer(newAttribute), &previousAttributeAbi))
                }
            }
            return .from(abi: previousAttribute)
        }

        internal func RemoveAttributeNodeImpl(_ attributeNode: UWP.XmlAttribute?) throws -> UWP.XmlAttribute? {
            let (removedAttribute) = try ComPtrs.initialize { removedAttributeAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAttributeNode(pThis, RawPointer(attributeNode), &removedAttributeAbi))
                }
            }
            return .from(abi: removedAttribute)
        }

        internal func GetElementsByTagNameImpl(_ tagName: String) throws -> UWP.XmlNodeList? {
            let (elements) = try ComPtrs.initialize { elementsAbi in
                let _tagName = try! HString(tagName)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetElementsByTagName(pThis, _tagName.get(), &elementsAbi))
                }
            }
            return .from(abi: elements)
        }

        internal func SetAttributeNSImpl(_ namespaceUri: Any?, _ qualifiedName: String, _ value: String) throws {
            let namespaceUriWrapper = __ABI_.AnyWrapper(namespaceUri)
            let _namespaceUri = try! namespaceUriWrapper?.toABI { $0 }
            let _qualifiedName = try! HString(qualifiedName)
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetAttributeNS(pThis, _namespaceUri, _qualifiedName.get(), _value.get()))
            }
        }

        internal func GetAttributeNSImpl(_ namespaceUri: Any?, _ localName: String) throws -> String {
            var value: HSTRING?
            let namespaceUriWrapper = __ABI_.AnyWrapper(namespaceUri)
            let _namespaceUri = try! namespaceUriWrapper?.toABI { $0 }
            let _localName = try! HString(localName)
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAttributeNS(pThis, _namespaceUri, _localName.get(), &value))
            }
            return .init(from: value)
        }

        internal func RemoveAttributeNSImpl(_ namespaceUri: Any?, _ localName: String) throws {
            let namespaceUriWrapper = __ABI_.AnyWrapper(namespaceUri)
            let _namespaceUri = try! namespaceUriWrapper?.toABI { $0 }
            let _localName = try! HString(localName)
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAttributeNS(pThis, _namespaceUri, _localName.get()))
            }
        }

        internal func SetAttributeNodeNSImpl(_ newAttribute: UWP.XmlAttribute?) throws -> UWP.XmlAttribute? {
            let (previousAttribute) = try ComPtrs.initialize { previousAttributeAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetAttributeNodeNS(pThis, RawPointer(newAttribute), &previousAttributeAbi))
                }
            }
            return .from(abi: previousAttribute)
        }

        internal func GetAttributeNodeNSImpl(_ namespaceUri: Any?, _ localName: String) throws -> UWP.XmlAttribute? {
            let (previousAttribute) = try ComPtrs.initialize { previousAttributeAbi in
                let namespaceUriWrapper = __ABI_.AnyWrapper(namespaceUri)
                let _namespaceUri = try! namespaceUriWrapper?.toABI { $0 }
                let _localName = try! HString(localName)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlElement.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAttributeNodeNS(pThis, _namespaceUri, _localName.get(), &previousAttributeAbi))
                }
            }
            return .from(abi: previousAttribute)
        }

    }

    public class IXmlEntityReference: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlEntityReference }

    }

    public class IXmlLoadSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlLoadSettings }

        internal func get_MaxElementDepthImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlLoadSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxElementDepth(pThis, &value))
            }
            return value
        }

        internal func put_MaxElementDepthImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlLoadSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxElementDepth(pThis, value))
            }
        }

        internal func get_ProhibitDtdImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlLoadSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProhibitDtd(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ProhibitDtdImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlLoadSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProhibitDtd(pThis, .init(from: value)))
            }
        }

        internal func get_ResolveExternalsImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlLoadSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResolveExternals(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ResolveExternalsImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlLoadSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ResolveExternals(pThis, .init(from: value)))
            }
        }

        internal func get_ValidateOnParseImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlLoadSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ValidateOnParse(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ValidateOnParseImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlLoadSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ValidateOnParse(pThis, .init(from: value)))
            }
        }

        internal func get_ElementContentWhiteSpaceImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlLoadSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ElementContentWhiteSpace(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_ElementContentWhiteSpaceImpl(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlLoadSettings.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ElementContentWhiteSpace(pThis, .init(from: value)))
            }
        }

    }

    public class IXmlNamedNodeMap: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap }

        internal func get_LengthImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Length(pThis, &value))
            }
            return value
        }

        internal func ItemImpl(_ index: UInt32) throws -> UWP.AnyIXmlNode? {
            let (node) = try ComPtrs.initialize { nodeAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Item(pThis, index, &nodeAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: node)
        }

        internal func GetNamedItemImpl(_ name: String) throws -> UWP.AnyIXmlNode? {
            let (node) = try ComPtrs.initialize { nodeAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNamedItem(pThis, _name.get(), &nodeAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: node)
        }

        internal func SetNamedItemImpl(_ node: UWP.AnyIXmlNode?) throws -> UWP.AnyIXmlNode? {
            let (previousNode) = try ComPtrs.initialize { previousNodeAbi in
                let nodeWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(node)
                let _node = try! nodeWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetNamedItem(pThis, _node, &previousNodeAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: previousNode)
        }

        internal func RemoveNamedItemImpl(_ name: String) throws -> UWP.AnyIXmlNode? {
            let (previousNode) = try ComPtrs.initialize { previousNodeAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveNamedItem(pThis, _name.get(), &previousNodeAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: previousNode)
        }

        internal func GetNamedItemNSImpl(_ namespaceUri: Any?, _ name: String) throws -> UWP.AnyIXmlNode? {
            let (node) = try ComPtrs.initialize { nodeAbi in
                let namespaceUriWrapper = __ABI_.AnyWrapper(namespaceUri)
                let _namespaceUri = try! namespaceUriWrapper?.toABI { $0 }
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNamedItemNS(pThis, _namespaceUri, _name.get(), &nodeAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: node)
        }

        internal func RemoveNamedItemNSImpl(_ namespaceUri: Any?, _ name: String) throws -> UWP.AnyIXmlNode? {
            let (previousNode) = try ComPtrs.initialize { previousNodeAbi in
                let namespaceUriWrapper = __ABI_.AnyWrapper(namespaceUri)
                let _namespaceUri = try! namespaceUriWrapper?.toABI { $0 }
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveNamedItemNS(pThis, _namespaceUri, _name.get(), &previousNodeAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: previousNode)
        }

        internal func SetNamedItemNSImpl(_ node: UWP.AnyIXmlNode?) throws -> UWP.AnyIXmlNode? {
            let (previousNode) = try ComPtrs.initialize { previousNodeAbi in
                let nodeWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(node)
                let _node = try! nodeWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetNamedItemNS(pThis, _node, &previousNodeAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: previousNode)
        }

    }

    public class IXmlNode: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlNode }

        open func get_NodeValueImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NodeValue(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        open func put_NodeValueImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NodeValue(pThis, _value))
            }
        }

        open func get_NodeTypeImpl() throws -> UWP.NodeType {
            var value: __x_ABI_CWindows_CData_CXml_CDom_CNodeType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NodeType(pThis, &value))
            }
            return value
        }

        open func get_NodeNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NodeName(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_ParentNodeImpl() throws -> UWP.AnyIXmlNode? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ParentNode(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: value)
        }

        open func get_ChildNodesImpl() throws -> UWP.XmlNodeList? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildNodes(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        open func get_FirstChildImpl() throws -> UWP.AnyIXmlNode? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FirstChild(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: value)
        }

        open func get_LastChildImpl() throws -> UWP.AnyIXmlNode? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastChild(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: value)
        }

        open func get_PreviousSiblingImpl() throws -> UWP.AnyIXmlNode? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreviousSibling(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: value)
        }

        open func get_NextSiblingImpl() throws -> UWP.AnyIXmlNode? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NextSibling(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: value)
        }

        open func get_AttributesImpl() throws -> UWP.XmlNamedNodeMap? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Attributes(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        open func HasChildNodesImpl() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HasChildNodes(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_OwnerDocumentImpl() throws -> UWP.XmlDocument? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OwnerDocument(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        open func InsertBeforeImpl(_ newChild: UWP.AnyIXmlNode?, _ referenceChild: UWP.AnyIXmlNode?) throws -> UWP.AnyIXmlNode? {
            let (insertedChild) = try ComPtrs.initialize { insertedChildAbi in
                let newChildWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(newChild)
                let _newChild = try! newChildWrapper?.toABI { $0 }
                let referenceChildWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(referenceChild)
                let _referenceChild = try! referenceChildWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.InsertBefore(pThis, _newChild, _referenceChild, &insertedChildAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: insertedChild)
        }

        open func ReplaceChildImpl(_ newChild: UWP.AnyIXmlNode?, _ referenceChild: UWP.AnyIXmlNode?) throws -> UWP.AnyIXmlNode? {
            let (previousChild) = try ComPtrs.initialize { previousChildAbi in
                let newChildWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(newChild)
                let _newChild = try! newChildWrapper?.toABI { $0 }
                let referenceChildWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(referenceChild)
                let _referenceChild = try! referenceChildWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceChild(pThis, _newChild, _referenceChild, &previousChildAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: previousChild)
        }

        open func RemoveChildImpl(_ childNode: UWP.AnyIXmlNode?) throws -> UWP.AnyIXmlNode? {
            let (removedChild) = try ComPtrs.initialize { removedChildAbi in
                let childNodeWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(childNode)
                let _childNode = try! childNodeWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveChild(pThis, _childNode, &removedChildAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: removedChild)
        }

        open func AppendChildImpl(_ newChild: UWP.AnyIXmlNode?) throws -> UWP.AnyIXmlNode? {
            let (appendedChild) = try ComPtrs.initialize { appendedChildAbi in
                let newChildWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(newChild)
                let _newChild = try! newChildWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.AppendChild(pThis, _newChild, &appendedChildAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: appendedChild)
        }

        open func CloneNodeImpl(_ deep: Bool) throws -> UWP.AnyIXmlNode? {
            let (newNode) = try ComPtrs.initialize { newNodeAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CloneNode(pThis, .init(from: deep), &newNodeAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: newNode)
        }

        open func get_NamespaceUriImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NamespaceUri(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        open func get_LocalNameImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalName(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        open func get_PrefixImpl() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Prefix(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        open func NormalizeImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Normalize(pThis))
            }
        }

        open func put_PrefixImpl(_ value: Any?) throws {
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Prefix(pThis, _value))
            }
        }

    }

    internal static var IXmlNodeVTable: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeVtbl = .init(
        QueryInterface: { IXmlNodeWrapper.queryInterface($0, $1, $2) },
        AddRef: { IXmlNodeWrapper.addRef($0) },
        Release: { IXmlNodeWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.IID
            iids[3] = __ABI_Windows_Data_Xml_Dom.IXmlNodeSelectorWrapper.IID
            iids[4] = __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializerWrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Data.Xml.Dom.IXmlNode").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_NodeValue: {
            guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.nodeValue
            let valueWrapper = __ABI_.AnyWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        put_NodeValue: {
            guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            __unwrapped__instance.nodeValue = value
            return S_OK
        },

        get_NodeType: {
            guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.nodeType
            $1?.initialize(to: value)
            return S_OK
        },

        get_NodeName: {
            guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.nodeName
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        get_ParentNode: {
            guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.parentNode
            let valueWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_ChildNodes: {
            guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.childNodes
            value?.copyTo($1)
            return S_OK
        },

        get_FirstChild: {
            guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.firstChild
            let valueWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_LastChild: {
            guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.lastChild
            let valueWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_PreviousSibling: {
            guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.previousSibling
            let valueWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_NextSibling: {
            guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.nextSibling
            let valueWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_Attributes: {
            guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.attributes
            value?.copyTo($1)
            return S_OK
        },

        HasChildNodes: {
            do {
                guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.hasChildNodes()
                $1?.initialize(to: .init(from: value))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        get_OwnerDocument: {
            guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.ownerDocument
            value?.copyTo($1)
            return S_OK
        },

        InsertBefore: {
            do {
                guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let newChild: UWP.AnyIXmlNode? = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: ComPtr($1))
                let referenceChild: UWP.AnyIXmlNode? = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: ComPtr($2))
                let insertedChild = try __unwrapped__instance.insertBefore(newChild, referenceChild)
                let insertedChildWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(insertedChild)
                insertedChildWrapper?.copyTo($3)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ReplaceChild: {
            do {
                guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let newChild: UWP.AnyIXmlNode? = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: ComPtr($1))
                let referenceChild: UWP.AnyIXmlNode? = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: ComPtr($2))
                let previousChild = try __unwrapped__instance.replaceChild(newChild, referenceChild)
                let previousChildWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(previousChild)
                previousChildWrapper?.copyTo($3)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        RemoveChild: {
            do {
                guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let childNode: UWP.AnyIXmlNode? = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: ComPtr($1))
                let removedChild = try __unwrapped__instance.removeChild(childNode)
                let removedChildWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(removedChild)
                removedChildWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        AppendChild: {
            do {
                guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let newChild: UWP.AnyIXmlNode? = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: ComPtr($1))
                let appendedChild = try __unwrapped__instance.appendChild(newChild)
                let appendedChildWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(appendedChild)
                appendedChildWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        CloneNode: {
            do {
                guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let deep: Bool = .init(from: $1)
                let newNode = try __unwrapped__instance.cloneNode(deep)
                let newNodeWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(newNode)
                newNodeWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        get_NamespaceUri: {
            guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.namespaceUri
            let valueWrapper = __ABI_.AnyWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_LocalName: {
            guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.localName
            let valueWrapper = __ABI_.AnyWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_Prefix: {
            guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.prefix
            let valueWrapper = __ABI_.AnyWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        Normalize: {
            do {
                guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.normalize()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        put_Prefix: {
            guard let __unwrapped__instance = IXmlNodeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            __unwrapped__instance.prefix = value
            return S_OK
        }
    )

    public typealias IXmlNodeWrapper = InterfaceWrapperBase<__IMPL_Windows_Data_Xml_Dom.IXmlNodeBridge>
    public class IXmlNodeList: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeList }

        internal func get_LengthImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeList.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Length(pThis, &value))
            }
            return value
        }

        internal func ItemImpl(_ index: UInt32) throws -> UWP.AnyIXmlNode? {
            let (node) = try ComPtrs.initialize { nodeAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeList.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Item(pThis, index, &nodeAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: node)
        }

    }

    public class IXmlNodeSelector: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeSelector }

        open func SelectSingleNodeImpl(_ xpath: String) throws -> UWP.AnyIXmlNode? {
            let (node) = try ComPtrs.initialize { nodeAbi in
                let _xpath = try! HString(xpath)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeSelector.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectSingleNode(pThis, _xpath.get(), &nodeAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: node)
        }

        open func SelectNodesImpl(_ xpath: String) throws -> UWP.XmlNodeList? {
            let (nodelist) = try ComPtrs.initialize { nodelistAbi in
                let _xpath = try! HString(xpath)
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeSelector.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectNodes(pThis, _xpath.get(), &nodelistAbi))
                }
            }
            return .from(abi: nodelist)
        }

        open func SelectSingleNodeNSImpl(_ xpath: String, _ namespaces: Any?) throws -> UWP.AnyIXmlNode? {
            let (node) = try ComPtrs.initialize { nodeAbi in
                let _xpath = try! HString(xpath)
                let namespacesWrapper = __ABI_.AnyWrapper(namespaces)
                let _namespaces = try! namespacesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeSelector.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectSingleNodeNS(pThis, _xpath.get(), _namespaces, &nodeAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.unwrapFrom(abi: node)
        }

        open func SelectNodesNSImpl(_ xpath: String, _ namespaces: Any?) throws -> UWP.XmlNodeList? {
            let (nodelist) = try ComPtrs.initialize { nodelistAbi in
                let _xpath = try! HString(xpath)
                let namespacesWrapper = __ABI_.AnyWrapper(namespaces)
                let _namespaces = try! namespacesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeSelector.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectNodesNS(pThis, _xpath.get(), _namespaces, &nodelistAbi))
                }
            }
            return .from(abi: nodelist)
        }

    }

    internal static var IXmlNodeSelectorVTable: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeSelectorVtbl = .init(
        QueryInterface: { IXmlNodeSelectorWrapper.queryInterface($0, $1, $2) },
        AddRef: { IXmlNodeSelectorWrapper.addRef($0) },
        Release: { IXmlNodeSelectorWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Data_Xml_Dom.IXmlNodeSelectorWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Data.Xml.Dom.IXmlNodeSelector").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        SelectSingleNode: {
            do {
                guard let __unwrapped__instance = IXmlNodeSelectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let xpath: String = .init(from: $1)
                let node = try __unwrapped__instance.selectSingleNode(xpath)
                let nodeWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(node)
                nodeWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SelectNodes: {
            do {
                guard let __unwrapped__instance = IXmlNodeSelectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let xpath: String = .init(from: $1)
                let nodelist = try __unwrapped__instance.selectNodes(xpath)
                nodelist?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SelectSingleNodeNS: {
            do {
                guard let __unwrapped__instance = IXmlNodeSelectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let xpath: String = .init(from: $1)
                let namespaces: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                let node = try __unwrapped__instance.selectSingleNodeNS(xpath, namespaces)
                let nodeWrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(node)
                nodeWrapper?.copyTo($3)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SelectNodesNS: {
            do {
                guard let __unwrapped__instance = IXmlNodeSelectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let xpath: String = .init(from: $1)
                let namespaces: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                let nodelist = try __unwrapped__instance.selectNodesNS(xpath, namespaces)
                nodelist?.copyTo($3)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IXmlNodeSelectorWrapper = InterfaceWrapperBase<__IMPL_Windows_Data_Xml_Dom.IXmlNodeSelectorBridge>
    public class IXmlNodeSerializer: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeSerializer }

        open func GetXmlImpl() throws -> String {
            var outerXml: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeSerializer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetXml(pThis, &outerXml))
            }
            return .init(from: outerXml)
        }

        open func get_InnerTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeSerializer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InnerText(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_InnerTextImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeSerializer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InnerText(pThis, _value.get()))
            }
        }

    }

    internal static var IXmlNodeSerializerVTable: __x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeSerializerVtbl = .init(
        QueryInterface: { IXmlNodeSerializerWrapper.queryInterface($0, $1, $2) },
        AddRef: { IXmlNodeSerializerWrapper.addRef($0) },
        Release: { IXmlNodeSerializerWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializerWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Data.Xml.Dom.IXmlNodeSerializer").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetXml: {
            do {
                guard let __unwrapped__instance = IXmlNodeSerializerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let outerXml = try __unwrapped__instance.getXml()
                $1?.initialize(to: try! HString(outerXml).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        get_InnerText: {
            guard let __unwrapped__instance = IXmlNodeSerializerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.innerText
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        put_InnerText: {
            guard let __unwrapped__instance = IXmlNodeSerializerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: String = .init(from: $1)
            __unwrapped__instance.innerText = value
            return S_OK
        }
    )

    public typealias IXmlNodeSerializerWrapper = InterfaceWrapperBase<__IMPL_Windows_Data_Xml_Dom.IXmlNodeSerializerBridge>
    public class IXmlProcessingInstruction: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction }

        internal func get_TargetImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Target(pThis, &value))
            }
            return .init(from: value)
        }

        internal func get_DataImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Data(pThis, &value))
            }
            return .init(from: value)
        }

        internal func put_DataImpl(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Data(pThis, _value.get()))
            }
        }

    }

    public class IXmlText: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CData_CXml_CDom_CIXmlText }

        open func SplitTextImpl(_ offset: UInt32) throws -> UWP.AnyIXmlText? {
            let (secondPart) = try ComPtrs.initialize { secondPartAbi in
                _ = try perform(as: __x_ABI_CWindows_CData_CXml_CDom_CIXmlText.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SplitText(pThis, offset, &secondPartAbi))
                }
            }
            return __ABI_Windows_Data_Xml_Dom.IXmlTextWrapper.unwrapFrom(abi: secondPart)
        }

    }

    internal static var IXmlTextVTable: __x_ABI_CWindows_CData_CXml_CDom_CIXmlTextVtbl = .init(
        QueryInterface: { IXmlTextWrapper.queryInterface($0, $1, $2) },
        AddRef: { IXmlTextWrapper.addRef($0) },
        Release: { IXmlTextWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 7).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Data_Xml_Dom.IXmlTextWrapper.IID
            iids[3] = __ABI_Windows_Data_Xml_Dom.IXmlNodeSelectorWrapper.IID
            iids[4] = __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializerWrapper.IID
            iids[5] = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.IID
            iids[6] = __ABI_Windows_Data_Xml_Dom.IXmlCharacterDataWrapper.IID
            $1!.pointee = 7
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Data.Xml.Dom.IXmlText").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        SplitText: {
            do {
                guard let __unwrapped__instance = IXmlTextWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let offset: UInt32 = $1
                let secondPart = try __unwrapped__instance.splitText(offset)
                let secondPartWrapper = __ABI_Windows_Data_Xml_Dom.IXmlTextWrapper(secondPart)
                secondPartWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IXmlTextWrapper = InterfaceWrapperBase<__IMPL_Windows_Data_Xml_Dom.IXmlTextBridge>
}
