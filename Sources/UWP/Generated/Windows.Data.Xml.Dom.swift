// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.nodetype)
public typealias NodeType = __x_ABI_CWindows_CData_CXml_CDom_CNodeType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute)
public final class XmlAttribute : WinRTClass, IXmlNodeSelector, IXmlNodeSerializer, IXmlNode {
    private typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlAttribute
    private typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlAttribute
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CData_CXml_CDom_CIXmlAttribute>?) -> XmlAttribute? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IXmlNodeSelector: __ABI_Windows_Data_Xml_Dom.IXmlNodeSelector! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.selectsinglenode)
    public func selectSingleNode(_ xpath: String) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.selectnodes)
    public func selectNodes(_ xpath: String) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.selectsinglenodens)
    public func selectSingleNodeNS(_ xpath: String, _ namespaces: Any!) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeNSImpl(xpath, namespaces)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.selectnodesns)
    public func selectNodesNS(_ xpath: String, _ namespaces: Any!) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesNSImpl(xpath, namespaces)
    }

    private lazy var _IXmlNodeSerializer: __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializer! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.getxml)
    public func getXml() throws -> String {
        try _IXmlNodeSerializer.GetXmlImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.innertext)
    public var innerText : String {
        get { try! _IXmlNodeSerializer.get_InnerTextImpl() }
        set { try! _IXmlNodeSerializer.put_InnerTextImpl(newValue) }
    }

    private lazy var _IXmlNode: __ABI_Windows_Data_Xml_Dom.IXmlNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.haschildnodes)
    public func hasChildNodes() throws -> Bool {
        try _IXmlNode.HasChildNodesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.insertbefore)
    public func insertBefore(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.InsertBeforeImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.replacechild)
    public func replaceChild(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.ReplaceChildImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.removechild)
    public func removeChild(_ childNode: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.RemoveChildImpl(childNode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.appendchild)
    public func appendChild(_ newChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.AppendChildImpl(newChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.clonenode)
    public func cloneNode(_ deep: Bool) throws -> AnyIXmlNode! {
        try _IXmlNode.CloneNodeImpl(deep)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.normalize)
    public func normalize() throws {
        try _IXmlNode.NormalizeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.attributes)
    public var attributes : XmlNamedNodeMap! {
        get { try! _IXmlNode.get_AttributesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.childnodes)
    public var childNodes : XmlNodeList! {
        get { try! _IXmlNode.get_ChildNodesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.firstchild)
    public var firstChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_FirstChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.lastchild)
    public var lastChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_LastChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.localname)
    public var localName : Any! {
        get { try! _IXmlNode.get_LocalNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.namespaceuri)
    public var namespaceUri : Any! {
        get { try! _IXmlNode.get_NamespaceUriImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.nextsibling)
    public var nextSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_NextSiblingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.nodename)
    public var nodeName : String {
        get { try! _IXmlNode.get_NodeNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.nodetype)
    public var nodeType : NodeType {
        get { try! _IXmlNode.get_NodeTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.nodevalue)
    public var nodeValue : Any! {
        get { try! _IXmlNode.get_NodeValueImpl() }
        set { try! _IXmlNode.put_NodeValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.ownerdocument)
    public var ownerDocument : XmlDocument! {
        get { try! _IXmlNode.get_OwnerDocumentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.parentnode)
    public var parentNode : AnyIXmlNode! {
        get { try! _IXmlNode.get_ParentNodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.prefix)
    public var prefix : Any! {
        get { try! _IXmlNode.get_PrefixImpl() }
        set { try! _IXmlNode.put_PrefixImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.previoussibling)
    public var previousSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_PreviousSiblingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.name)
    public var name : String {
        get { try! _default.get_NameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.specified)
    public var specified : Bool {
        get { try! _default.get_SpecifiedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlattribute.value)
    public var value : String {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    deinit {
        _IXmlNodeSelector = nil
        _IXmlNodeSerializer = nil
        _IXmlNode = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection)
public final class XmlCDataSection : WinRTClass, IXmlNodeSelector, IXmlNodeSerializer, IXmlNode, IXmlCharacterData, IXmlText {
    private typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlCDataSection
    private typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlCDataSection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CData_CXml_CDom_CIXmlCDataSection>?) -> XmlCDataSection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IXmlNodeSelector: __ABI_Windows_Data_Xml_Dom.IXmlNodeSelector! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.selectsinglenode)
    public func selectSingleNode(_ xpath: String) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.selectnodes)
    public func selectNodes(_ xpath: String) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.selectsinglenodens)
    public func selectSingleNodeNS(_ xpath: String, _ namespaces: Any!) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeNSImpl(xpath, namespaces)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.selectnodesns)
    public func selectNodesNS(_ xpath: String, _ namespaces: Any!) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesNSImpl(xpath, namespaces)
    }

    private lazy var _IXmlNodeSerializer: __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializer! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.getxml)
    public func getXml() throws -> String {
        try _IXmlNodeSerializer.GetXmlImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.innertext)
    public var innerText : String {
        get { try! _IXmlNodeSerializer.get_InnerTextImpl() }
        set { try! _IXmlNodeSerializer.put_InnerTextImpl(newValue) }
    }

    private lazy var _IXmlNode: __ABI_Windows_Data_Xml_Dom.IXmlNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.haschildnodes)
    public func hasChildNodes() throws -> Bool {
        try _IXmlNode.HasChildNodesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.insertbefore)
    public func insertBefore(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.InsertBeforeImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.replacechild)
    public func replaceChild(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.ReplaceChildImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.removechild)
    public func removeChild(_ childNode: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.RemoveChildImpl(childNode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.appendchild)
    public func appendChild(_ newChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.AppendChildImpl(newChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.clonenode)
    public func cloneNode(_ deep: Bool) throws -> AnyIXmlNode! {
        try _IXmlNode.CloneNodeImpl(deep)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.normalize)
    public func normalize() throws {
        try _IXmlNode.NormalizeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.attributes)
    public var attributes : XmlNamedNodeMap! {
        get { try! _IXmlNode.get_AttributesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.childnodes)
    public var childNodes : XmlNodeList! {
        get { try! _IXmlNode.get_ChildNodesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.firstchild)
    public var firstChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_FirstChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.lastchild)
    public var lastChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_LastChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.localname)
    public var localName : Any! {
        get { try! _IXmlNode.get_LocalNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.namespaceuri)
    public var namespaceUri : Any! {
        get { try! _IXmlNode.get_NamespaceUriImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.nextsibling)
    public var nextSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_NextSiblingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.nodename)
    public var nodeName : String {
        get { try! _IXmlNode.get_NodeNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.nodetype)
    public var nodeType : NodeType {
        get { try! _IXmlNode.get_NodeTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.nodevalue)
    public var nodeValue : Any! {
        get { try! _IXmlNode.get_NodeValueImpl() }
        set { try! _IXmlNode.put_NodeValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.ownerdocument)
    public var ownerDocument : XmlDocument! {
        get { try! _IXmlNode.get_OwnerDocumentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.parentnode)
    public var parentNode : AnyIXmlNode! {
        get { try! _IXmlNode.get_ParentNodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.prefix)
    public var prefix : Any! {
        get { try! _IXmlNode.get_PrefixImpl() }
        set { try! _IXmlNode.put_PrefixImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.previoussibling)
    public var previousSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_PreviousSiblingImpl() }
    }

    private lazy var _IXmlCharacterData: __ABI_Windows_Data_Xml_Dom.IXmlCharacterData! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.substringdata)
    public func substringData(_ offset: UInt32, _ count: UInt32) throws -> String {
        try _IXmlCharacterData.SubstringDataImpl(offset, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.appenddata)
    public func appendData(_ data: String) throws {
        try _IXmlCharacterData.AppendDataImpl(data)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.insertdata)
    public func insertData(_ offset: UInt32, _ data: String) throws {
        try _IXmlCharacterData.InsertDataImpl(offset, data)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.deletedata)
    public func deleteData(_ offset: UInt32, _ count: UInt32) throws {
        try _IXmlCharacterData.DeleteDataImpl(offset, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.replacedata)
    public func replaceData(_ offset: UInt32, _ count: UInt32, _ data: String) throws {
        try _IXmlCharacterData.ReplaceDataImpl(offset, count, data)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.data)
    public var data : String {
        get { try! _IXmlCharacterData.get_DataImpl() }
        set { try! _IXmlCharacterData.put_DataImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.length)
    public var length : UInt32 {
        get { try! _IXmlCharacterData.get_LengthImpl() }
    }

    private lazy var _IXmlText: __ABI_Windows_Data_Xml_Dom.IXmlText! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcdatasection.splittext)
    public func splitText(_ offset: UInt32) throws -> AnyIXmlText! {
        try _IXmlText.SplitTextImpl(offset)
    }

    deinit {
        _IXmlNodeSelector = nil
        _IXmlNodeSerializer = nil
        _IXmlNode = nil
        _IXmlCharacterData = nil
        _IXmlText = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment)
public final class XmlComment : WinRTClass, IXmlNodeSelector, IXmlNodeSerializer, IXmlNode, IXmlCharacterData {
    private typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlComment
    private typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlComment
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CData_CXml_CDom_CIXmlComment>?) -> XmlComment? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IXmlNodeSelector: __ABI_Windows_Data_Xml_Dom.IXmlNodeSelector! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.selectsinglenode)
    public func selectSingleNode(_ xpath: String) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.selectnodes)
    public func selectNodes(_ xpath: String) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.selectsinglenodens)
    public func selectSingleNodeNS(_ xpath: String, _ namespaces: Any!) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeNSImpl(xpath, namespaces)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.selectnodesns)
    public func selectNodesNS(_ xpath: String, _ namespaces: Any!) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesNSImpl(xpath, namespaces)
    }

    private lazy var _IXmlNodeSerializer: __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializer! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.getxml)
    public func getXml() throws -> String {
        try _IXmlNodeSerializer.GetXmlImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.innertext)
    public var innerText : String {
        get { try! _IXmlNodeSerializer.get_InnerTextImpl() }
        set { try! _IXmlNodeSerializer.put_InnerTextImpl(newValue) }
    }

    private lazy var _IXmlNode: __ABI_Windows_Data_Xml_Dom.IXmlNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.haschildnodes)
    public func hasChildNodes() throws -> Bool {
        try _IXmlNode.HasChildNodesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.insertbefore)
    public func insertBefore(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.InsertBeforeImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.replacechild)
    public func replaceChild(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.ReplaceChildImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.removechild)
    public func removeChild(_ childNode: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.RemoveChildImpl(childNode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.appendchild)
    public func appendChild(_ newChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.AppendChildImpl(newChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.clonenode)
    public func cloneNode(_ deep: Bool) throws -> AnyIXmlNode! {
        try _IXmlNode.CloneNodeImpl(deep)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.normalize)
    public func normalize() throws {
        try _IXmlNode.NormalizeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.attributes)
    public var attributes : XmlNamedNodeMap! {
        get { try! _IXmlNode.get_AttributesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.childnodes)
    public var childNodes : XmlNodeList! {
        get { try! _IXmlNode.get_ChildNodesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.firstchild)
    public var firstChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_FirstChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.lastchild)
    public var lastChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_LastChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.localname)
    public var localName : Any! {
        get { try! _IXmlNode.get_LocalNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.namespaceuri)
    public var namespaceUri : Any! {
        get { try! _IXmlNode.get_NamespaceUriImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.nextsibling)
    public var nextSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_NextSiblingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.nodename)
    public var nodeName : String {
        get { try! _IXmlNode.get_NodeNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.nodetype)
    public var nodeType : NodeType {
        get { try! _IXmlNode.get_NodeTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.nodevalue)
    public var nodeValue : Any! {
        get { try! _IXmlNode.get_NodeValueImpl() }
        set { try! _IXmlNode.put_NodeValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.ownerdocument)
    public var ownerDocument : XmlDocument! {
        get { try! _IXmlNode.get_OwnerDocumentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.parentnode)
    public var parentNode : AnyIXmlNode! {
        get { try! _IXmlNode.get_ParentNodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.prefix)
    public var prefix : Any! {
        get { try! _IXmlNode.get_PrefixImpl() }
        set { try! _IXmlNode.put_PrefixImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.previoussibling)
    public var previousSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_PreviousSiblingImpl() }
    }

    private lazy var _IXmlCharacterData: __ABI_Windows_Data_Xml_Dom.IXmlCharacterData! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.substringdata)
    public func substringData(_ offset: UInt32, _ count: UInt32) throws -> String {
        try _IXmlCharacterData.SubstringDataImpl(offset, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.appenddata)
    public func appendData(_ data: String) throws {
        try _IXmlCharacterData.AppendDataImpl(data)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.insertdata)
    public func insertData(_ offset: UInt32, _ data: String) throws {
        try _IXmlCharacterData.InsertDataImpl(offset, data)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.deletedata)
    public func deleteData(_ offset: UInt32, _ count: UInt32) throws {
        try _IXmlCharacterData.DeleteDataImpl(offset, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.replacedata)
    public func replaceData(_ offset: UInt32, _ count: UInt32, _ data: String) throws {
        try _IXmlCharacterData.ReplaceDataImpl(offset, count, data)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.data)
    public var data : String {
        get { try! _IXmlCharacterData.get_DataImpl() }
        set { try! _IXmlCharacterData.put_DataImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlcomment.length)
    public var length : UInt32 {
        get { try! _IXmlCharacterData.get_LengthImpl() }
    }

    deinit {
        _IXmlNodeSelector = nil
        _IXmlNodeSerializer = nil
        _IXmlNode = nil
        _IXmlCharacterData = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument)
public final class XmlDocument : WinRTClass, IXmlNodeSelector, IXmlNodeSerializer, IXmlNode {
    private typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlDocument
    private typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CData_CXml_CDom_CIXmlDocument>?) -> XmlDocument? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.Data.Xml.Dom.XmlDocument")))
    }

    private static let _IXmlDocumentStatics: __ABI_Windows_Data_Xml_Dom.IXmlDocumentStatics = try! RoGetActivationFactory(HString("Windows.Data.Xml.Dom.XmlDocument"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.loadfromuriasync)
    public static func loadFromUriAsync(_ uri: WindowsFoundation.Uri!) -> WindowsFoundation.AnyIAsyncOperation<XmlDocument?>! {
        return try! _IXmlDocumentStatics.LoadFromUriAsyncImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.loadfromuriasync)
    public static func loadFromUriAsync(_ uri: WindowsFoundation.Uri!, _ loadSettings: XmlLoadSettings!) -> WindowsFoundation.AnyIAsyncOperation<XmlDocument?>! {
        return try! _IXmlDocumentStatics.LoadFromUriWithSettingsAsyncImpl(uri, loadSettings)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.loadfromfileasync)
    public static func loadFromFileAsync(_ file: UWP.AnyIStorageFile!) -> WindowsFoundation.AnyIAsyncOperation<XmlDocument?>! {
        return try! _IXmlDocumentStatics.LoadFromFileAsyncImpl(file)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.loadfromfileasync)
    public static func loadFromFileAsync(_ file: UWP.AnyIStorageFile!, _ loadSettings: XmlLoadSettings!) -> WindowsFoundation.AnyIAsyncOperation<XmlDocument?>! {
        return try! _IXmlDocumentStatics.LoadFromFileWithSettingsAsyncImpl(file, loadSettings)
    }

    private lazy var _IXmlNodeSelector: __ABI_Windows_Data_Xml_Dom.IXmlNodeSelector! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.selectsinglenode)
    public func selectSingleNode(_ xpath: String) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.selectnodes)
    public func selectNodes(_ xpath: String) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.selectsinglenodens)
    public func selectSingleNodeNS(_ xpath: String, _ namespaces: Any!) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeNSImpl(xpath, namespaces)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.selectnodesns)
    public func selectNodesNS(_ xpath: String, _ namespaces: Any!) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesNSImpl(xpath, namespaces)
    }

    private lazy var _IXmlNodeSerializer: __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializer! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.getxml)
    public func getXml() throws -> String {
        try _IXmlNodeSerializer.GetXmlImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.innertext)
    public var innerText : String {
        get { try! _IXmlNodeSerializer.get_InnerTextImpl() }
        set { try! _IXmlNodeSerializer.put_InnerTextImpl(newValue) }
    }

    private lazy var _IXmlNode: __ABI_Windows_Data_Xml_Dom.IXmlNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.haschildnodes)
    public func hasChildNodes() throws -> Bool {
        try _IXmlNode.HasChildNodesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.insertbefore)
    public func insertBefore(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.InsertBeforeImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.replacechild)
    public func replaceChild(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.ReplaceChildImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.removechild)
    public func removeChild(_ childNode: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.RemoveChildImpl(childNode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.appendchild)
    public func appendChild(_ newChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.AppendChildImpl(newChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.clonenode)
    public func cloneNode(_ deep: Bool) throws -> AnyIXmlNode! {
        try _IXmlNode.CloneNodeImpl(deep)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.normalize)
    public func normalize() throws {
        try _IXmlNode.NormalizeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.attributes)
    public var attributes : XmlNamedNodeMap! {
        get { try! _IXmlNode.get_AttributesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.childnodes)
    public var childNodes : XmlNodeList! {
        get { try! _IXmlNode.get_ChildNodesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.firstchild)
    public var firstChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_FirstChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.lastchild)
    public var lastChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_LastChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.localname)
    public var localName : Any! {
        get { try! _IXmlNode.get_LocalNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.namespaceuri)
    public var namespaceUri : Any! {
        get { try! _IXmlNode.get_NamespaceUriImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.nextsibling)
    public var nextSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_NextSiblingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.nodename)
    public var nodeName : String {
        get { try! _IXmlNode.get_NodeNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.nodetype)
    public var nodeType : NodeType {
        get { try! _IXmlNode.get_NodeTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.nodevalue)
    public var nodeValue : Any! {
        get { try! _IXmlNode.get_NodeValueImpl() }
        set { try! _IXmlNode.put_NodeValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.ownerdocument)
    public var ownerDocument : XmlDocument! {
        get { try! _IXmlNode.get_OwnerDocumentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.parentnode)
    public var parentNode : AnyIXmlNode! {
        get { try! _IXmlNode.get_ParentNodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.prefix)
    public var prefix : Any! {
        get { try! _IXmlNode.get_PrefixImpl() }
        set { try! _IXmlNode.put_PrefixImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.previoussibling)
    public var previousSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_PreviousSiblingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.createelement)
    public func createElement(_ tagName: String) throws -> XmlElement! {
        try _default.CreateElementImpl(tagName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.createdocumentfragment)
    public func createDocumentFragment() throws -> XmlDocumentFragment! {
        try _default.CreateDocumentFragmentImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.createtextnode)
    public func createTextNode(_ data: String) throws -> XmlText! {
        try _default.CreateTextNodeImpl(data)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.createcomment)
    public func createComment(_ data: String) throws -> XmlComment! {
        try _default.CreateCommentImpl(data)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.createprocessinginstruction)
    public func createProcessingInstruction(_ target: String, _ data: String) throws -> XmlProcessingInstruction! {
        try _default.CreateProcessingInstructionImpl(target, data)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.createattribute)
    public func createAttribute(_ name: String) throws -> XmlAttribute! {
        try _default.CreateAttributeImpl(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.createentityreference)
    public func createEntityReference(_ name: String) throws -> XmlEntityReference! {
        try _default.CreateEntityReferenceImpl(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.getelementsbytagname)
    public func getElementsByTagName(_ tagName: String) throws -> XmlNodeList! {
        try _default.GetElementsByTagNameImpl(tagName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.createcdatasection)
    public func createCDataSection(_ data: String) throws -> XmlCDataSection! {
        try _default.CreateCDataSectionImpl(data)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.createattributens)
    public func createAttributeNS(_ namespaceUri: Any!, _ qualifiedName: String) throws -> XmlAttribute! {
        try _default.CreateAttributeNSImpl(namespaceUri, qualifiedName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.createelementns)
    public func createElementNS(_ namespaceUri: Any!, _ qualifiedName: String) throws -> XmlElement! {
        try _default.CreateElementNSImpl(namespaceUri, qualifiedName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.getelementbyid)
    public func getElementById(_ elementId: String) throws -> XmlElement! {
        try _default.GetElementByIdImpl(elementId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.importnode)
    public func importNode(_ node: AnyIXmlNode!, _ deep: Bool) throws -> AnyIXmlNode! {
        try _default.ImportNodeImpl(node, deep)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.doctype)
    public var doctype : XmlDocumentType! {
        get { try! _default.get_DoctypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.documentelement)
    public var documentElement : XmlElement! {
        get { try! _default.get_DocumentElementImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.documenturi)
    public var documentUri : String {
        get { try! _default.get_DocumentUriImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.implementation)
    public var implementation : XmlDomImplementation! {
        get { try! _default.get_ImplementationImpl() }
    }

    private lazy var _IXmlDocumentIO: __ABI_Windows_Data_Xml_Dom.IXmlDocumentIO! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.loadxml)
    public func loadXml(_ xml: String) throws {
        try _IXmlDocumentIO.LoadXmlImpl(xml)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.loadxml)
    public func loadXml(_ xml: String, _ loadSettings: XmlLoadSettings!) throws {
        try _IXmlDocumentIO.LoadXmlWithSettingsImpl(xml, loadSettings)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.savetofileasync)
    public func saveToFileAsync(_ file: UWP.AnyIStorageFile!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IXmlDocumentIO.SaveToFileAsyncImpl(file)
    }

    private lazy var _IXmlDocumentIO2: __ABI_Windows_Data_Xml_Dom.IXmlDocumentIO2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.loadxmlfrombuffer)
    public func loadXmlFromBuffer(_ buffer: UWP.AnyIBuffer!) throws {
        try _IXmlDocumentIO2.LoadXmlFromBufferImpl(buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocument.loadxmlfrombuffer)
    public func loadXmlFromBuffer(_ buffer: UWP.AnyIBuffer!, _ loadSettings: XmlLoadSettings!) throws {
        try _IXmlDocumentIO2.LoadXmlFromBufferWithSettingsImpl(buffer, loadSettings)
    }

    deinit {
        _IXmlNodeSelector = nil
        _IXmlNodeSerializer = nil
        _IXmlNode = nil
        _default = nil
        _IXmlDocumentIO = nil
        _IXmlDocumentIO2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment)
public final class XmlDocumentFragment : WinRTClass, IXmlNodeSelector, IXmlNodeSerializer, IXmlNode {
    private typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlDocumentFragment
    private typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentFragment
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentFragment>?) -> XmlDocumentFragment? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IXmlNodeSelector: __ABI_Windows_Data_Xml_Dom.IXmlNodeSelector! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.selectsinglenode)
    public func selectSingleNode(_ xpath: String) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.selectnodes)
    public func selectNodes(_ xpath: String) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.selectsinglenodens)
    public func selectSingleNodeNS(_ xpath: String, _ namespaces: Any!) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeNSImpl(xpath, namespaces)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.selectnodesns)
    public func selectNodesNS(_ xpath: String, _ namespaces: Any!) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesNSImpl(xpath, namespaces)
    }

    private lazy var _IXmlNodeSerializer: __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializer! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.getxml)
    public func getXml() throws -> String {
        try _IXmlNodeSerializer.GetXmlImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.innertext)
    public var innerText : String {
        get { try! _IXmlNodeSerializer.get_InnerTextImpl() }
        set { try! _IXmlNodeSerializer.put_InnerTextImpl(newValue) }
    }

    private lazy var _IXmlNode: __ABI_Windows_Data_Xml_Dom.IXmlNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.haschildnodes)
    public func hasChildNodes() throws -> Bool {
        try _IXmlNode.HasChildNodesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.insertbefore)
    public func insertBefore(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.InsertBeforeImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.replacechild)
    public func replaceChild(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.ReplaceChildImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.removechild)
    public func removeChild(_ childNode: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.RemoveChildImpl(childNode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.appendchild)
    public func appendChild(_ newChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.AppendChildImpl(newChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.clonenode)
    public func cloneNode(_ deep: Bool) throws -> AnyIXmlNode! {
        try _IXmlNode.CloneNodeImpl(deep)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.normalize)
    public func normalize() throws {
        try _IXmlNode.NormalizeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.attributes)
    public var attributes : XmlNamedNodeMap! {
        get { try! _IXmlNode.get_AttributesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.childnodes)
    public var childNodes : XmlNodeList! {
        get { try! _IXmlNode.get_ChildNodesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.firstchild)
    public var firstChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_FirstChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.lastchild)
    public var lastChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_LastChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.localname)
    public var localName : Any! {
        get { try! _IXmlNode.get_LocalNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.namespaceuri)
    public var namespaceUri : Any! {
        get { try! _IXmlNode.get_NamespaceUriImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.nextsibling)
    public var nextSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_NextSiblingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.nodename)
    public var nodeName : String {
        get { try! _IXmlNode.get_NodeNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.nodetype)
    public var nodeType : NodeType {
        get { try! _IXmlNode.get_NodeTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.nodevalue)
    public var nodeValue : Any! {
        get { try! _IXmlNode.get_NodeValueImpl() }
        set { try! _IXmlNode.put_NodeValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.ownerdocument)
    public var ownerDocument : XmlDocument! {
        get { try! _IXmlNode.get_OwnerDocumentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.parentnode)
    public var parentNode : AnyIXmlNode! {
        get { try! _IXmlNode.get_ParentNodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.prefix)
    public var prefix : Any! {
        get { try! _IXmlNode.get_PrefixImpl() }
        set { try! _IXmlNode.put_PrefixImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumentfragment.previoussibling)
    public var previousSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_PreviousSiblingImpl() }
    }

    deinit {
        _IXmlNodeSelector = nil
        _IXmlNodeSerializer = nil
        _IXmlNode = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype)
public final class XmlDocumentType : WinRTClass, IXmlNodeSelector, IXmlNodeSerializer, IXmlNode {
    private typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlDocumentType
    private typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentType
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CData_CXml_CDom_CIXmlDocumentType>?) -> XmlDocumentType? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IXmlNodeSelector: __ABI_Windows_Data_Xml_Dom.IXmlNodeSelector! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.selectsinglenode)
    public func selectSingleNode(_ xpath: String) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.selectnodes)
    public func selectNodes(_ xpath: String) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.selectsinglenodens)
    public func selectSingleNodeNS(_ xpath: String, _ namespaces: Any!) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeNSImpl(xpath, namespaces)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.selectnodesns)
    public func selectNodesNS(_ xpath: String, _ namespaces: Any!) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesNSImpl(xpath, namespaces)
    }

    private lazy var _IXmlNodeSerializer: __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializer! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.getxml)
    public func getXml() throws -> String {
        try _IXmlNodeSerializer.GetXmlImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.innertext)
    public var innerText : String {
        get { try! _IXmlNodeSerializer.get_InnerTextImpl() }
        set { try! _IXmlNodeSerializer.put_InnerTextImpl(newValue) }
    }

    private lazy var _IXmlNode: __ABI_Windows_Data_Xml_Dom.IXmlNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.haschildnodes)
    public func hasChildNodes() throws -> Bool {
        try _IXmlNode.HasChildNodesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.insertbefore)
    public func insertBefore(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.InsertBeforeImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.replacechild)
    public func replaceChild(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.ReplaceChildImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.removechild)
    public func removeChild(_ childNode: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.RemoveChildImpl(childNode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.appendchild)
    public func appendChild(_ newChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.AppendChildImpl(newChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.clonenode)
    public func cloneNode(_ deep: Bool) throws -> AnyIXmlNode! {
        try _IXmlNode.CloneNodeImpl(deep)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.normalize)
    public func normalize() throws {
        try _IXmlNode.NormalizeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.attributes)
    public var attributes : XmlNamedNodeMap! {
        get { try! _IXmlNode.get_AttributesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.childnodes)
    public var childNodes : XmlNodeList! {
        get { try! _IXmlNode.get_ChildNodesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.firstchild)
    public var firstChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_FirstChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.lastchild)
    public var lastChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_LastChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.localname)
    public var localName : Any! {
        get { try! _IXmlNode.get_LocalNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.namespaceuri)
    public var namespaceUri : Any! {
        get { try! _IXmlNode.get_NamespaceUriImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.nextsibling)
    public var nextSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_NextSiblingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.nodename)
    public var nodeName : String {
        get { try! _IXmlNode.get_NodeNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.nodetype)
    public var nodeType : NodeType {
        get { try! _IXmlNode.get_NodeTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.nodevalue)
    public var nodeValue : Any! {
        get { try! _IXmlNode.get_NodeValueImpl() }
        set { try! _IXmlNode.put_NodeValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.ownerdocument)
    public var ownerDocument : XmlDocument! {
        get { try! _IXmlNode.get_OwnerDocumentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.parentnode)
    public var parentNode : AnyIXmlNode! {
        get { try! _IXmlNode.get_ParentNodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.prefix)
    public var prefix : Any! {
        get { try! _IXmlNode.get_PrefixImpl() }
        set { try! _IXmlNode.put_PrefixImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.previoussibling)
    public var previousSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_PreviousSiblingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.entities)
    public var entities : XmlNamedNodeMap! {
        get { try! _default.get_EntitiesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.name)
    public var name : String {
        get { try! _default.get_NameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldocumenttype.notations)
    public var notations : XmlNamedNodeMap! {
        get { try! _default.get_NotationsImpl() }
    }

    deinit {
        _IXmlNodeSelector = nil
        _IXmlNodeSerializer = nil
        _IXmlNode = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldomimplementation)
public final class XmlDomImplementation : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlDomImplementation
    private typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlDomImplementation
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CData_CXml_CDom_CIXmlDomImplementation>?) -> XmlDomImplementation? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmldomimplementation.hasfeature)
    public func hasFeature(_ feature: String, _ version: Any!) throws -> Bool {
        try _default.HasFeatureImpl(feature, version)
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement)
public final class XmlElement : WinRTClass, IXmlNodeSelector, IXmlNodeSerializer, IXmlNode {
    private typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlElement
    private typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlElement
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CData_CXml_CDom_CIXmlElement>?) -> XmlElement? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IXmlNodeSelector: __ABI_Windows_Data_Xml_Dom.IXmlNodeSelector! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.selectsinglenode)
    public func selectSingleNode(_ xpath: String) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.selectnodes)
    public func selectNodes(_ xpath: String) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.selectsinglenodens)
    public func selectSingleNodeNS(_ xpath: String, _ namespaces: Any!) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeNSImpl(xpath, namespaces)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.selectnodesns)
    public func selectNodesNS(_ xpath: String, _ namespaces: Any!) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesNSImpl(xpath, namespaces)
    }

    private lazy var _IXmlNodeSerializer: __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializer! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.getxml)
    public func getXml() throws -> String {
        try _IXmlNodeSerializer.GetXmlImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.innertext)
    public var innerText : String {
        get { try! _IXmlNodeSerializer.get_InnerTextImpl() }
        set { try! _IXmlNodeSerializer.put_InnerTextImpl(newValue) }
    }

    private lazy var _IXmlNode: __ABI_Windows_Data_Xml_Dom.IXmlNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.haschildnodes)
    public func hasChildNodes() throws -> Bool {
        try _IXmlNode.HasChildNodesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.insertbefore)
    public func insertBefore(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.InsertBeforeImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.replacechild)
    public func replaceChild(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.ReplaceChildImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.removechild)
    public func removeChild(_ childNode: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.RemoveChildImpl(childNode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.appendchild)
    public func appendChild(_ newChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.AppendChildImpl(newChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.clonenode)
    public func cloneNode(_ deep: Bool) throws -> AnyIXmlNode! {
        try _IXmlNode.CloneNodeImpl(deep)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.normalize)
    public func normalize() throws {
        try _IXmlNode.NormalizeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.attributes)
    public var attributes : XmlNamedNodeMap! {
        get { try! _IXmlNode.get_AttributesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.childnodes)
    public var childNodes : XmlNodeList! {
        get { try! _IXmlNode.get_ChildNodesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.firstchild)
    public var firstChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_FirstChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.lastchild)
    public var lastChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_LastChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.localname)
    public var localName : Any! {
        get { try! _IXmlNode.get_LocalNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.namespaceuri)
    public var namespaceUri : Any! {
        get { try! _IXmlNode.get_NamespaceUriImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.nextsibling)
    public var nextSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_NextSiblingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.nodename)
    public var nodeName : String {
        get { try! _IXmlNode.get_NodeNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.nodetype)
    public var nodeType : NodeType {
        get { try! _IXmlNode.get_NodeTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.nodevalue)
    public var nodeValue : Any! {
        get { try! _IXmlNode.get_NodeValueImpl() }
        set { try! _IXmlNode.put_NodeValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.ownerdocument)
    public var ownerDocument : XmlDocument! {
        get { try! _IXmlNode.get_OwnerDocumentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.parentnode)
    public var parentNode : AnyIXmlNode! {
        get { try! _IXmlNode.get_ParentNodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.prefix)
    public var prefix : Any! {
        get { try! _IXmlNode.get_PrefixImpl() }
        set { try! _IXmlNode.put_PrefixImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.previoussibling)
    public var previousSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_PreviousSiblingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.getattribute)
    public func getAttribute(_ attributeName: String) throws -> String {
        try _default.GetAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.setattribute)
    public func setAttribute(_ attributeName: String, _ attributeValue: String) throws {
        try _default.SetAttributeImpl(attributeName, attributeValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.removeattribute)
    public func removeAttribute(_ attributeName: String) throws {
        try _default.RemoveAttributeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.getattributenode)
    public func getAttributeNode(_ attributeName: String) throws -> XmlAttribute! {
        try _default.GetAttributeNodeImpl(attributeName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.setattributenode)
    public func setAttributeNode(_ newAttribute: XmlAttribute!) throws -> XmlAttribute! {
        try _default.SetAttributeNodeImpl(newAttribute)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.removeattributenode)
    public func removeAttributeNode(_ attributeNode: XmlAttribute!) throws -> XmlAttribute! {
        try _default.RemoveAttributeNodeImpl(attributeNode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.getelementsbytagname)
    public func getElementsByTagName(_ tagName: String) throws -> XmlNodeList! {
        try _default.GetElementsByTagNameImpl(tagName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.setattributens)
    public func setAttributeNS(_ namespaceUri: Any!, _ qualifiedName: String, _ value: String) throws {
        try _default.SetAttributeNSImpl(namespaceUri, qualifiedName, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.getattributens)
    public func getAttributeNS(_ namespaceUri: Any!, _ localName: String) throws -> String {
        try _default.GetAttributeNSImpl(namespaceUri, localName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.removeattributens)
    public func removeAttributeNS(_ namespaceUri: Any!, _ localName: String) throws {
        try _default.RemoveAttributeNSImpl(namespaceUri, localName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.setattributenodens)
    public func setAttributeNodeNS(_ newAttribute: XmlAttribute!) throws -> XmlAttribute! {
        try _default.SetAttributeNodeNSImpl(newAttribute)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.getattributenodens)
    public func getAttributeNodeNS(_ namespaceUri: Any!, _ localName: String) throws -> XmlAttribute! {
        try _default.GetAttributeNodeNSImpl(namespaceUri, localName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlelement.tagname)
    public var tagName : String {
        get { try! _default.get_TagNameImpl() }
    }

    deinit {
        _IXmlNodeSelector = nil
        _IXmlNodeSerializer = nil
        _IXmlNode = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference)
public final class XmlEntityReference : WinRTClass, IXmlNodeSelector, IXmlNodeSerializer, IXmlNode {
    private typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlEntityReference
    private typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlEntityReference
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CData_CXml_CDom_CIXmlEntityReference>?) -> XmlEntityReference? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IXmlNodeSelector: __ABI_Windows_Data_Xml_Dom.IXmlNodeSelector! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.selectsinglenode)
    public func selectSingleNode(_ xpath: String) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.selectnodes)
    public func selectNodes(_ xpath: String) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.selectsinglenodens)
    public func selectSingleNodeNS(_ xpath: String, _ namespaces: Any!) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeNSImpl(xpath, namespaces)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.selectnodesns)
    public func selectNodesNS(_ xpath: String, _ namespaces: Any!) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesNSImpl(xpath, namespaces)
    }

    private lazy var _IXmlNodeSerializer: __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializer! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.getxml)
    public func getXml() throws -> String {
        try _IXmlNodeSerializer.GetXmlImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.innertext)
    public var innerText : String {
        get { try! _IXmlNodeSerializer.get_InnerTextImpl() }
        set { try! _IXmlNodeSerializer.put_InnerTextImpl(newValue) }
    }

    private lazy var _IXmlNode: __ABI_Windows_Data_Xml_Dom.IXmlNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.haschildnodes)
    public func hasChildNodes() throws -> Bool {
        try _IXmlNode.HasChildNodesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.insertbefore)
    public func insertBefore(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.InsertBeforeImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.replacechild)
    public func replaceChild(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.ReplaceChildImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.removechild)
    public func removeChild(_ childNode: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.RemoveChildImpl(childNode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.appendchild)
    public func appendChild(_ newChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.AppendChildImpl(newChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.clonenode)
    public func cloneNode(_ deep: Bool) throws -> AnyIXmlNode! {
        try _IXmlNode.CloneNodeImpl(deep)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.normalize)
    public func normalize() throws {
        try _IXmlNode.NormalizeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.attributes)
    public var attributes : XmlNamedNodeMap! {
        get { try! _IXmlNode.get_AttributesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.childnodes)
    public var childNodes : XmlNodeList! {
        get { try! _IXmlNode.get_ChildNodesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.firstchild)
    public var firstChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_FirstChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.lastchild)
    public var lastChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_LastChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.localname)
    public var localName : Any! {
        get { try! _IXmlNode.get_LocalNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.namespaceuri)
    public var namespaceUri : Any! {
        get { try! _IXmlNode.get_NamespaceUriImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.nextsibling)
    public var nextSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_NextSiblingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.nodename)
    public var nodeName : String {
        get { try! _IXmlNode.get_NodeNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.nodetype)
    public var nodeType : NodeType {
        get { try! _IXmlNode.get_NodeTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.nodevalue)
    public var nodeValue : Any! {
        get { try! _IXmlNode.get_NodeValueImpl() }
        set { try! _IXmlNode.put_NodeValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.ownerdocument)
    public var ownerDocument : XmlDocument! {
        get { try! _IXmlNode.get_OwnerDocumentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.parentnode)
    public var parentNode : AnyIXmlNode! {
        get { try! _IXmlNode.get_ParentNodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.prefix)
    public var prefix : Any! {
        get { try! _IXmlNode.get_PrefixImpl() }
        set { try! _IXmlNode.put_PrefixImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlentityreference.previoussibling)
    public var previousSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_PreviousSiblingImpl() }
    }

    deinit {
        _IXmlNodeSelector = nil
        _IXmlNodeSerializer = nil
        _IXmlNode = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlloadsettings)
public final class XmlLoadSettings : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlLoadSettings
    private typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlLoadSettings
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CData_CXml_CDom_CIXmlLoadSettings>?) -> XmlLoadSettings? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.Data.Xml.Dom.XmlLoadSettings")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlloadsettings.elementcontentwhitespace)
    public var elementContentWhiteSpace : Bool {
        get { try! _default.get_ElementContentWhiteSpaceImpl() }
        set { try! _default.put_ElementContentWhiteSpaceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlloadsettings.maxelementdepth)
    public var maxElementDepth : UInt32 {
        get { try! _default.get_MaxElementDepthImpl() }
        set { try! _default.put_MaxElementDepthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlloadsettings.prohibitdtd)
    public var prohibitDtd : Bool {
        get { try! _default.get_ProhibitDtdImpl() }
        set { try! _default.put_ProhibitDtdImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlloadsettings.resolveexternals)
    public var resolveExternals : Bool {
        get { try! _default.get_ResolveExternalsImpl() }
        set { try! _default.put_ResolveExternalsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlloadsettings.validateonparse)
    public var validateOnParse : Bool {
        get { try! _default.get_ValidateOnParseImpl() }
        set { try! _default.put_ValidateOnParseImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnamednodemap)
public final class XmlNamedNodeMap : WinRTClass, IVectorView, IIterable {
    public typealias T = AnyIXmlNode?
    private typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlNamedNodeMap
    private typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap>?) -> XmlNamedNodeMap? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }

    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    private lazy var _IVectorView: IVectorViewIXmlNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnamednodemap.getat)
    public func getAt(_ index: UInt32) -> AnyIXmlNode? {
        try! _IVectorView.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnamednodemap.indexof)
    public func indexOf(_ value: AnyIXmlNode?, _ index: inout UInt32) -> Bool {
        try! _IVectorView.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnamednodemap.size)
    public var size : UInt32 {
        get { try! _IVectorView.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableIXmlNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnamednodemap.first)
    public func first() -> WindowsFoundation.AnyIIterator<AnyIXmlNode?>? {
        try! _IIterable.FirstImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnamednodemap.item)
    public func item(_ index: UInt32) throws -> AnyIXmlNode! {
        try _default.ItemImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnamednodemap.getnameditem)
    public func getNamedItem(_ name: String) throws -> AnyIXmlNode! {
        try _default.GetNamedItemImpl(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnamednodemap.setnameditem)
    public func setNamedItem(_ node: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _default.SetNamedItemImpl(node)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnamednodemap.removenameditem)
    public func removeNamedItem(_ name: String) throws -> AnyIXmlNode! {
        try _default.RemoveNamedItemImpl(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnamednodemap.getnameditemns)
    public func getNamedItemNS(_ namespaceUri: Any!, _ name: String) throws -> AnyIXmlNode! {
        try _default.GetNamedItemNSImpl(namespaceUri, name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnamednodemap.removenameditemns)
    public func removeNamedItemNS(_ namespaceUri: Any!, _ name: String) throws -> AnyIXmlNode! {
        try _default.RemoveNamedItemNSImpl(namespaceUri, name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnamednodemap.setnameditemns)
    public func setNamedItemNS(_ node: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _default.SetNamedItemNSImpl(node)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnamednodemap.length)
    public var length : UInt32 {
        get { try! _default.get_LengthImpl() }
    }

    deinit {
        _IVectorView = nil
        _IIterable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnodelist)
public final class XmlNodeList : WinRTClass, IVectorView, IIterable {
    public typealias T = AnyIXmlNode?
    private typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlNodeList
    private typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeList
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeList>?) -> XmlNodeList? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Int { 0 }
    public var endIndex: Int { Int(size) }
    public func index(after i: Int) -> Int {
        i+1
    }

    public func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    public var count: Int { Int(size) }

    public subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    private lazy var _IVectorView: IVectorViewIXmlNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnodelist.getat)
    public func getAt(_ index: UInt32) -> AnyIXmlNode? {
        try! _IVectorView.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnodelist.indexof)
    public func indexOf(_ value: AnyIXmlNode?, _ index: inout UInt32) -> Bool {
        try! _IVectorView.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnodelist.size)
    public var size : UInt32 {
        get { try! _IVectorView.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableIXmlNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnodelist.first)
    public func first() -> WindowsFoundation.AnyIIterator<AnyIXmlNode?>? {
        try! _IIterable.FirstImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnodelist.item)
    public func item(_ index: UInt32) throws -> AnyIXmlNode! {
        try _default.ItemImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlnodelist.length)
    public var length : UInt32 {
        get { try! _default.get_LengthImpl() }
    }

    deinit {
        _IVectorView = nil
        _IIterable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction)
public final class XmlProcessingInstruction : WinRTClass, IXmlNodeSelector, IXmlNodeSerializer, IXmlNode {
    private typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlProcessingInstruction
    private typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction>?) -> XmlProcessingInstruction? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IXmlNodeSelector: __ABI_Windows_Data_Xml_Dom.IXmlNodeSelector! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.selectsinglenode)
    public func selectSingleNode(_ xpath: String) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.selectnodes)
    public func selectNodes(_ xpath: String) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.selectsinglenodens)
    public func selectSingleNodeNS(_ xpath: String, _ namespaces: Any!) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeNSImpl(xpath, namespaces)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.selectnodesns)
    public func selectNodesNS(_ xpath: String, _ namespaces: Any!) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesNSImpl(xpath, namespaces)
    }

    private lazy var _IXmlNodeSerializer: __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializer! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.getxml)
    public func getXml() throws -> String {
        try _IXmlNodeSerializer.GetXmlImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.innertext)
    public var innerText : String {
        get { try! _IXmlNodeSerializer.get_InnerTextImpl() }
        set { try! _IXmlNodeSerializer.put_InnerTextImpl(newValue) }
    }

    private lazy var _IXmlNode: __ABI_Windows_Data_Xml_Dom.IXmlNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.haschildnodes)
    public func hasChildNodes() throws -> Bool {
        try _IXmlNode.HasChildNodesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.insertbefore)
    public func insertBefore(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.InsertBeforeImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.replacechild)
    public func replaceChild(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.ReplaceChildImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.removechild)
    public func removeChild(_ childNode: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.RemoveChildImpl(childNode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.appendchild)
    public func appendChild(_ newChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.AppendChildImpl(newChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.clonenode)
    public func cloneNode(_ deep: Bool) throws -> AnyIXmlNode! {
        try _IXmlNode.CloneNodeImpl(deep)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.normalize)
    public func normalize() throws {
        try _IXmlNode.NormalizeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.attributes)
    public var attributes : XmlNamedNodeMap! {
        get { try! _IXmlNode.get_AttributesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.childnodes)
    public var childNodes : XmlNodeList! {
        get { try! _IXmlNode.get_ChildNodesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.firstchild)
    public var firstChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_FirstChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.lastchild)
    public var lastChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_LastChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.localname)
    public var localName : Any! {
        get { try! _IXmlNode.get_LocalNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.namespaceuri)
    public var namespaceUri : Any! {
        get { try! _IXmlNode.get_NamespaceUriImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.nextsibling)
    public var nextSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_NextSiblingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.nodename)
    public var nodeName : String {
        get { try! _IXmlNode.get_NodeNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.nodetype)
    public var nodeType : NodeType {
        get { try! _IXmlNode.get_NodeTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.nodevalue)
    public var nodeValue : Any! {
        get { try! _IXmlNode.get_NodeValueImpl() }
        set { try! _IXmlNode.put_NodeValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.ownerdocument)
    public var ownerDocument : XmlDocument! {
        get { try! _IXmlNode.get_OwnerDocumentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.parentnode)
    public var parentNode : AnyIXmlNode! {
        get { try! _IXmlNode.get_ParentNodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.prefix)
    public var prefix : Any! {
        get { try! _IXmlNode.get_PrefixImpl() }
        set { try! _IXmlNode.put_PrefixImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.previoussibling)
    public var previousSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_PreviousSiblingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.data)
    public var data : String {
        get { try! _default.get_DataImpl() }
        set { try! _default.put_DataImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmlprocessinginstruction.target)
    public var target : String {
        get { try! _default.get_TargetImpl() }
    }

    deinit {
        _IXmlNodeSelector = nil
        _IXmlNodeSerializer = nil
        _IXmlNode = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext)
public final class XmlText : WinRTClass, IXmlNodeSelector, IXmlNodeSerializer, IXmlNode, IXmlCharacterData, IXmlText {
    private typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlText
    private typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlText
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CData_CXml_CDom_CIXmlText>?) -> XmlText? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IXmlNodeSelector: __ABI_Windows_Data_Xml_Dom.IXmlNodeSelector! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.selectsinglenode)
    public func selectSingleNode(_ xpath: String) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.selectnodes)
    public func selectNodes(_ xpath: String) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesImpl(xpath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.selectsinglenodens)
    public func selectSingleNodeNS(_ xpath: String, _ namespaces: Any!) throws -> AnyIXmlNode! {
        try _IXmlNodeSelector.SelectSingleNodeNSImpl(xpath, namespaces)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.selectnodesns)
    public func selectNodesNS(_ xpath: String, _ namespaces: Any!) throws -> XmlNodeList! {
        try _IXmlNodeSelector.SelectNodesNSImpl(xpath, namespaces)
    }

    private lazy var _IXmlNodeSerializer: __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializer! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.getxml)
    public func getXml() throws -> String {
        try _IXmlNodeSerializer.GetXmlImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.innertext)
    public var innerText : String {
        get { try! _IXmlNodeSerializer.get_InnerTextImpl() }
        set { try! _IXmlNodeSerializer.put_InnerTextImpl(newValue) }
    }

    private lazy var _IXmlNode: __ABI_Windows_Data_Xml_Dom.IXmlNode! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.haschildnodes)
    public func hasChildNodes() throws -> Bool {
        try _IXmlNode.HasChildNodesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.insertbefore)
    public func insertBefore(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.InsertBeforeImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.replacechild)
    public func replaceChild(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.ReplaceChildImpl(newChild, referenceChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.removechild)
    public func removeChild(_ childNode: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.RemoveChildImpl(childNode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.appendchild)
    public func appendChild(_ newChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
        try _IXmlNode.AppendChildImpl(newChild)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.clonenode)
    public func cloneNode(_ deep: Bool) throws -> AnyIXmlNode! {
        try _IXmlNode.CloneNodeImpl(deep)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.normalize)
    public func normalize() throws {
        try _IXmlNode.NormalizeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.attributes)
    public var attributes : XmlNamedNodeMap! {
        get { try! _IXmlNode.get_AttributesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.childnodes)
    public var childNodes : XmlNodeList! {
        get { try! _IXmlNode.get_ChildNodesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.firstchild)
    public var firstChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_FirstChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.lastchild)
    public var lastChild : AnyIXmlNode! {
        get { try! _IXmlNode.get_LastChildImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.localname)
    public var localName : Any! {
        get { try! _IXmlNode.get_LocalNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.namespaceuri)
    public var namespaceUri : Any! {
        get { try! _IXmlNode.get_NamespaceUriImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.nextsibling)
    public var nextSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_NextSiblingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.nodename)
    public var nodeName : String {
        get { try! _IXmlNode.get_NodeNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.nodetype)
    public var nodeType : NodeType {
        get { try! _IXmlNode.get_NodeTypeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.nodevalue)
    public var nodeValue : Any! {
        get { try! _IXmlNode.get_NodeValueImpl() }
        set { try! _IXmlNode.put_NodeValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.ownerdocument)
    public var ownerDocument : XmlDocument! {
        get { try! _IXmlNode.get_OwnerDocumentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.parentnode)
    public var parentNode : AnyIXmlNode! {
        get { try! _IXmlNode.get_ParentNodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.prefix)
    public var prefix : Any! {
        get { try! _IXmlNode.get_PrefixImpl() }
        set { try! _IXmlNode.put_PrefixImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.previoussibling)
    public var previousSibling : AnyIXmlNode! {
        get { try! _IXmlNode.get_PreviousSiblingImpl() }
    }

    private lazy var _IXmlCharacterData: __ABI_Windows_Data_Xml_Dom.IXmlCharacterData! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.substringdata)
    public func substringData(_ offset: UInt32, _ count: UInt32) throws -> String {
        try _IXmlCharacterData.SubstringDataImpl(offset, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.appenddata)
    public func appendData(_ data: String) throws {
        try _IXmlCharacterData.AppendDataImpl(data)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.insertdata)
    public func insertData(_ offset: UInt32, _ data: String) throws {
        try _IXmlCharacterData.InsertDataImpl(offset, data)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.deletedata)
    public func deleteData(_ offset: UInt32, _ count: UInt32) throws {
        try _IXmlCharacterData.DeleteDataImpl(offset, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.replacedata)
    public func replaceData(_ offset: UInt32, _ count: UInt32, _ data: String) throws {
        try _IXmlCharacterData.ReplaceDataImpl(offset, count, data)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.data)
    public var data : String {
        get { try! _IXmlCharacterData.get_DataImpl() }
        set { try! _IXmlCharacterData.put_DataImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.length)
    public var length : UInt32 {
        get { try! _IXmlCharacterData.get_LengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.xmltext.splittext)
    public func splitText(_ offset: UInt32) throws -> AnyIXmlText! {
        try _default.SplitTextImpl(offset)
    }

    deinit {
        _IXmlNodeSelector = nil
        _IXmlNodeSerializer = nil
        _IXmlNode = nil
        _IXmlCharacterData = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata)
public protocol IXmlCharacterData : IXmlNodeSelector, IXmlNodeSerializer, IXmlNode {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.substringdata)
    func substringData(_ offset: UInt32, _ count: UInt32) throws -> String
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.appenddata)
    func appendData(_ data: String) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.insertdata)
    func insertData(_ offset: UInt32, _ data: String) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.deletedata)
    func deleteData(_ offset: UInt32, _ count: UInt32) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.replacedata)
    func replaceData(_ offset: UInt32, _ count: UInt32, _ data: String) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.data)
    var data: String { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.length)
    var length: UInt32 { get }
}

extension IXmlCharacterData {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Data_Xml_Dom.IXmlCharacterDataWrapper.IID:
                let wrapper = __ABI_Windows_Data_Xml_Dom.IXmlCharacterDataWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Data_Xml_Dom.IXmlNodeSelectorWrapper.IID:
                let wrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeSelectorWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializerWrapper.IID:
                let wrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializerWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.IID:
                let wrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIXmlCharacterData = any IXmlCharacterData

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode)
public protocol IXmlNode : IXmlNodeSelector, IXmlNodeSerializer {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.haschildnodes)
    func hasChildNodes() throws -> Bool
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.insertbefore)
    func insertBefore(_ newChild: UWP.AnyIXmlNode!, _ referenceChild: UWP.AnyIXmlNode!) throws -> UWP.AnyIXmlNode!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.replacechild)
    func replaceChild(_ newChild: UWP.AnyIXmlNode!, _ referenceChild: UWP.AnyIXmlNode!) throws -> UWP.AnyIXmlNode!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.removechild)
    func removeChild(_ childNode: UWP.AnyIXmlNode!) throws -> UWP.AnyIXmlNode!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.appendchild)
    func appendChild(_ newChild: UWP.AnyIXmlNode!) throws -> UWP.AnyIXmlNode!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.clonenode)
    func cloneNode(_ deep: Bool) throws -> UWP.AnyIXmlNode!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.normalize)
    func normalize() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.attributes)
    var attributes: UWP.XmlNamedNodeMap! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.childnodes)
    var childNodes: UWP.XmlNodeList! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.firstchild)
    var firstChild: UWP.AnyIXmlNode! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.lastchild)
    var lastChild: UWP.AnyIXmlNode! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.localname)
    var localName: Any! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.namespaceuri)
    var namespaceUri: Any! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.nextsibling)
    var nextSibling: UWP.AnyIXmlNode! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.nodename)
    var nodeName: String { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.nodetype)
    var nodeType: UWP.NodeType { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.nodevalue)
    var nodeValue: Any! { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.ownerdocument)
    var ownerDocument: UWP.XmlDocument! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.parentnode)
    var parentNode: UWP.AnyIXmlNode! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.prefix)
    var prefix: Any! { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.previoussibling)
    var previousSibling: UWP.AnyIXmlNode! { get }
}

extension IXmlNode {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.IID:
                let wrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Data_Xml_Dom.IXmlNodeSelectorWrapper.IID:
                let wrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeSelectorWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializerWrapper.IID:
                let wrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializerWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIXmlNode = any IXmlNode

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnodeselector)
public protocol IXmlNodeSelector : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnodeselector.selectsinglenode)
    func selectSingleNode(_ xpath: String) throws -> UWP.AnyIXmlNode!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnodeselector.selectnodes)
    func selectNodes(_ xpath: String) throws -> UWP.XmlNodeList!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnodeselector.selectsinglenodens)
    func selectSingleNodeNS(_ xpath: String, _ namespaces: Any!) throws -> UWP.AnyIXmlNode!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnodeselector.selectnodesns)
    func selectNodesNS(_ xpath: String, _ namespaces: Any!) throws -> UWP.XmlNodeList!
}

extension IXmlNodeSelector {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Data_Xml_Dom.IXmlNodeSelectorWrapper.IID:
                let wrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeSelectorWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIXmlNodeSelector = any IXmlNodeSelector

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnodeserializer)
public protocol IXmlNodeSerializer : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnodeserializer.getxml)
    func getXml() throws -> String
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnodeserializer.innertext)
    var innerText: String { get set }
}

extension IXmlNodeSerializer {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializerWrapper.IID:
                let wrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializerWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIXmlNodeSerializer = any IXmlNodeSerializer

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext)
public protocol IXmlText : IXmlNodeSelector, IXmlNodeSerializer, IXmlNode, IXmlCharacterData {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.splittext)
    func splitText(_ offset: UInt32) throws -> UWP.AnyIXmlText!
}

extension IXmlText {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Data_Xml_Dom.IXmlTextWrapper.IID:
                let wrapper = __ABI_Windows_Data_Xml_Dom.IXmlTextWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Data_Xml_Dom.IXmlNodeSelectorWrapper.IID:
                let wrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeSelectorWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializerWrapper.IID:
                let wrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializerWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper.IID:
                let wrapper = __ABI_Windows_Data_Xml_Dom.IXmlNodeWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Data_Xml_Dom.IXmlCharacterDataWrapper.IID:
                let wrapper = __ABI_Windows_Data_Xml_Dom.IXmlCharacterDataWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIXmlText = any IXmlText

extension UWP.NodeType {
    public static var invalid : UWP.NodeType {
        __x_ABI_CWindows_CData_CXml_CDom_CNodeType_Invalid
    }
    public static var elementNode : UWP.NodeType {
        __x_ABI_CWindows_CData_CXml_CDom_CNodeType_ElementNode
    }
    public static var attributeNode : UWP.NodeType {
        __x_ABI_CWindows_CData_CXml_CDom_CNodeType_AttributeNode
    }
    public static var textNode : UWP.NodeType {
        __x_ABI_CWindows_CData_CXml_CDom_CNodeType_TextNode
    }
    public static var dataSectionNode : UWP.NodeType {
        __x_ABI_CWindows_CData_CXml_CDom_CNodeType_DataSectionNode
    }
    public static var entityReferenceNode : UWP.NodeType {
        __x_ABI_CWindows_CData_CXml_CDom_CNodeType_EntityReferenceNode
    }
    public static var entityNode : UWP.NodeType {
        __x_ABI_CWindows_CData_CXml_CDom_CNodeType_EntityNode
    }
    public static var processingInstructionNode : UWP.NodeType {
        __x_ABI_CWindows_CData_CXml_CDom_CNodeType_ProcessingInstructionNode
    }
    public static var commentNode : UWP.NodeType {
        __x_ABI_CWindows_CData_CXml_CDom_CNodeType_CommentNode
    }
    public static var documentNode : UWP.NodeType {
        __x_ABI_CWindows_CData_CXml_CDom_CNodeType_DocumentNode
    }
    public static var documentTypeNode : UWP.NodeType {
        __x_ABI_CWindows_CData_CXml_CDom_CNodeType_DocumentTypeNode
    }
    public static var documentFragmentNode : UWP.NodeType {
        __x_ABI_CWindows_CData_CXml_CDom_CNodeType_DocumentFragmentNode
    }
    public static var notationNode : UWP.NodeType {
        __x_ABI_CWindows_CData_CXml_CDom_CNodeType_NotationNode
    }
}
extension UWP.NodeType: @retroactive Hashable, @retroactive Codable {}

