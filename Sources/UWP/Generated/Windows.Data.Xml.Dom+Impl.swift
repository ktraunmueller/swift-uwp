// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public enum __IMPL_Windows_Data_Xml_Dom {
    public enum IXmlCharacterDataBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlCharacterData
        public typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlCharacterData
        public typealias SwiftProjection = AnyIXmlCharacterData
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IXmlCharacterDataImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Data_Xml_Dom.IXmlCharacterDataVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IXmlCharacterDataImpl: IXmlCharacterData, WinRTAbiImpl {
        fileprivate typealias Bridge = IXmlCharacterDataBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.substringdata)
        fileprivate func substringData(_ offset: UInt32, _ count: UInt32) throws -> String {
            try _default.SubstringDataImpl(offset, count)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.appenddata)
        fileprivate func appendData(_ data: String) throws {
            try _default.AppendDataImpl(data)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.insertdata)
        fileprivate func insertData(_ offset: UInt32, _ data: String) throws {
            try _default.InsertDataImpl(offset, data)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.deletedata)
        fileprivate func deleteData(_ offset: UInt32, _ count: UInt32) throws {
            try _default.DeleteDataImpl(offset, count)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.replacedata)
        fileprivate func replaceData(_ offset: UInt32, _ count: UInt32, _ data: String) throws {
            try _default.ReplaceDataImpl(offset, count, data)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.data)
        fileprivate var data : String {
            get { try! _default.get_DataImpl() }
            set { try! _default.put_DataImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.length)
        fileprivate var length : UInt32 {
            get { try! _default.get_LengthImpl() }
        }

        private lazy var _IXmlNodeSelector: __ABI_Windows_Data_Xml_Dom.IXmlNodeSelector! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.selectsinglenode)
        fileprivate func selectSingleNode(_ xpath: String) throws -> AnyIXmlNode! {
            try _IXmlNodeSelector.SelectSingleNodeImpl(xpath)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.selectnodes)
        fileprivate func selectNodes(_ xpath: String) throws -> XmlNodeList! {
            try _IXmlNodeSelector.SelectNodesImpl(xpath)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.selectsinglenodens)
        fileprivate func selectSingleNodeNS(_ xpath: String, _ namespaces: Any!) throws -> AnyIXmlNode! {
            try _IXmlNodeSelector.SelectSingleNodeNSImpl(xpath, namespaces)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.selectnodesns)
        fileprivate func selectNodesNS(_ xpath: String, _ namespaces: Any!) throws -> XmlNodeList! {
            try _IXmlNodeSelector.SelectNodesNSImpl(xpath, namespaces)
        }

        private lazy var _IXmlNodeSerializer: __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializer! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.getxml)
        fileprivate func getXml() throws -> String {
            try _IXmlNodeSerializer.GetXmlImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.innertext)
        fileprivate var innerText : String {
            get { try! _IXmlNodeSerializer.get_InnerTextImpl() }
            set { try! _IXmlNodeSerializer.put_InnerTextImpl(newValue) }
        }

        private lazy var _IXmlNode: __ABI_Windows_Data_Xml_Dom.IXmlNode! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.haschildnodes)
        fileprivate func hasChildNodes() throws -> Bool {
            try _IXmlNode.HasChildNodesImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.insertbefore)
        fileprivate func insertBefore(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
            try _IXmlNode.InsertBeforeImpl(newChild, referenceChild)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.replacechild)
        fileprivate func replaceChild(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
            try _IXmlNode.ReplaceChildImpl(newChild, referenceChild)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.removechild)
        fileprivate func removeChild(_ childNode: AnyIXmlNode!) throws -> AnyIXmlNode! {
            try _IXmlNode.RemoveChildImpl(childNode)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.appendchild)
        fileprivate func appendChild(_ newChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
            try _IXmlNode.AppendChildImpl(newChild)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.clonenode)
        fileprivate func cloneNode(_ deep: Bool) throws -> AnyIXmlNode! {
            try _IXmlNode.CloneNodeImpl(deep)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.normalize)
        fileprivate func normalize() throws {
            try _IXmlNode.NormalizeImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.attributes)
        fileprivate var attributes : XmlNamedNodeMap! {
            get { try! _IXmlNode.get_AttributesImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.childnodes)
        fileprivate var childNodes : XmlNodeList! {
            get { try! _IXmlNode.get_ChildNodesImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.firstchild)
        fileprivate var firstChild : AnyIXmlNode! {
            get { try! _IXmlNode.get_FirstChildImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.lastchild)
        fileprivate var lastChild : AnyIXmlNode! {
            get { try! _IXmlNode.get_LastChildImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.localname)
        fileprivate var localName : Any! {
            get { try! _IXmlNode.get_LocalNameImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.namespaceuri)
        fileprivate var namespaceUri : Any! {
            get { try! _IXmlNode.get_NamespaceUriImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.nextsibling)
        fileprivate var nextSibling : AnyIXmlNode! {
            get { try! _IXmlNode.get_NextSiblingImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.nodename)
        fileprivate var nodeName : String {
            get { try! _IXmlNode.get_NodeNameImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.nodetype)
        fileprivate var nodeType : NodeType {
            get { try! _IXmlNode.get_NodeTypeImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.nodevalue)
        fileprivate var nodeValue : Any! {
            get { try! _IXmlNode.get_NodeValueImpl() }
            set { try! _IXmlNode.put_NodeValueImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.ownerdocument)
        fileprivate var ownerDocument : XmlDocument! {
            get { try! _IXmlNode.get_OwnerDocumentImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.parentnode)
        fileprivate var parentNode : AnyIXmlNode! {
            get { try! _IXmlNode.get_ParentNodeImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.prefix)
        fileprivate var prefix : Any! {
            get { try! _IXmlNode.get_PrefixImpl() }
            set { try! _IXmlNode.put_PrefixImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlcharacterdata.previoussibling)
        fileprivate var previousSibling : AnyIXmlNode! {
            get { try! _IXmlNode.get_PreviousSiblingImpl() }
        }

    }

    public enum IXmlNodeBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlNode
        public typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlNode
        public typealias SwiftProjection = AnyIXmlNode
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IXmlNodeImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Data_Xml_Dom.IXmlNodeVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IXmlNodeImpl: IXmlNode, WinRTAbiImpl {
        fileprivate typealias Bridge = IXmlNodeBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.haschildnodes)
        fileprivate func hasChildNodes() throws -> Bool {
            try _default.HasChildNodesImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.insertbefore)
        fileprivate func insertBefore(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
            try _default.InsertBeforeImpl(newChild, referenceChild)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.replacechild)
        fileprivate func replaceChild(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
            try _default.ReplaceChildImpl(newChild, referenceChild)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.removechild)
        fileprivate func removeChild(_ childNode: AnyIXmlNode!) throws -> AnyIXmlNode! {
            try _default.RemoveChildImpl(childNode)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.appendchild)
        fileprivate func appendChild(_ newChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
            try _default.AppendChildImpl(newChild)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.clonenode)
        fileprivate func cloneNode(_ deep: Bool) throws -> AnyIXmlNode! {
            try _default.CloneNodeImpl(deep)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.normalize)
        fileprivate func normalize() throws {
            try _default.NormalizeImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.attributes)
        fileprivate var attributes : XmlNamedNodeMap! {
            get { try! _default.get_AttributesImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.childnodes)
        fileprivate var childNodes : XmlNodeList! {
            get { try! _default.get_ChildNodesImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.firstchild)
        fileprivate var firstChild : AnyIXmlNode! {
            get { try! _default.get_FirstChildImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.lastchild)
        fileprivate var lastChild : AnyIXmlNode! {
            get { try! _default.get_LastChildImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.localname)
        fileprivate var localName : Any! {
            get { try! _default.get_LocalNameImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.namespaceuri)
        fileprivate var namespaceUri : Any! {
            get { try! _default.get_NamespaceUriImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.nextsibling)
        fileprivate var nextSibling : AnyIXmlNode! {
            get { try! _default.get_NextSiblingImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.nodename)
        fileprivate var nodeName : String {
            get { try! _default.get_NodeNameImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.nodetype)
        fileprivate var nodeType : NodeType {
            get { try! _default.get_NodeTypeImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.nodevalue)
        fileprivate var nodeValue : Any! {
            get { try! _default.get_NodeValueImpl() }
            set { try! _default.put_NodeValueImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.ownerdocument)
        fileprivate var ownerDocument : XmlDocument! {
            get { try! _default.get_OwnerDocumentImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.parentnode)
        fileprivate var parentNode : AnyIXmlNode! {
            get { try! _default.get_ParentNodeImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.prefix)
        fileprivate var prefix : Any! {
            get { try! _default.get_PrefixImpl() }
            set { try! _default.put_PrefixImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.previoussibling)
        fileprivate var previousSibling : AnyIXmlNode! {
            get { try! _default.get_PreviousSiblingImpl() }
        }

        private lazy var _IXmlNodeSelector: __ABI_Windows_Data_Xml_Dom.IXmlNodeSelector! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.selectsinglenode)
        fileprivate func selectSingleNode(_ xpath: String) throws -> AnyIXmlNode! {
            try _IXmlNodeSelector.SelectSingleNodeImpl(xpath)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.selectnodes)
        fileprivate func selectNodes(_ xpath: String) throws -> XmlNodeList! {
            try _IXmlNodeSelector.SelectNodesImpl(xpath)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.selectsinglenodens)
        fileprivate func selectSingleNodeNS(_ xpath: String, _ namespaces: Any!) throws -> AnyIXmlNode! {
            try _IXmlNodeSelector.SelectSingleNodeNSImpl(xpath, namespaces)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.selectnodesns)
        fileprivate func selectNodesNS(_ xpath: String, _ namespaces: Any!) throws -> XmlNodeList! {
            try _IXmlNodeSelector.SelectNodesNSImpl(xpath, namespaces)
        }

        private lazy var _IXmlNodeSerializer: __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializer! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.getxml)
        fileprivate func getXml() throws -> String {
            try _IXmlNodeSerializer.GetXmlImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnode.innertext)
        fileprivate var innerText : String {
            get { try! _IXmlNodeSerializer.get_InnerTextImpl() }
            set { try! _IXmlNodeSerializer.put_InnerTextImpl(newValue) }
        }

    }

    public enum IXmlNodeSelectorBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeSelector
        public typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlNodeSelector
        public typealias SwiftProjection = AnyIXmlNodeSelector
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IXmlNodeSelectorImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Data_Xml_Dom.IXmlNodeSelectorVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IXmlNodeSelectorImpl: IXmlNodeSelector, WinRTAbiImpl {
        fileprivate typealias Bridge = IXmlNodeSelectorBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnodeselector.selectsinglenode)
        fileprivate func selectSingleNode(_ xpath: String) throws -> AnyIXmlNode! {
            try _default.SelectSingleNodeImpl(xpath)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnodeselector.selectnodes)
        fileprivate func selectNodes(_ xpath: String) throws -> XmlNodeList! {
            try _default.SelectNodesImpl(xpath)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnodeselector.selectsinglenodens)
        fileprivate func selectSingleNodeNS(_ xpath: String, _ namespaces: Any!) throws -> AnyIXmlNode! {
            try _default.SelectSingleNodeNSImpl(xpath, namespaces)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnodeselector.selectnodesns)
        fileprivate func selectNodesNS(_ xpath: String, _ namespaces: Any!) throws -> XmlNodeList! {
            try _default.SelectNodesNSImpl(xpath, namespaces)
        }

    }

    public enum IXmlNodeSerializerBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlNodeSerializer
        public typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializer
        public typealias SwiftProjection = AnyIXmlNodeSerializer
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IXmlNodeSerializerImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Data_Xml_Dom.IXmlNodeSerializerVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IXmlNodeSerializerImpl: IXmlNodeSerializer, WinRTAbiImpl {
        fileprivate typealias Bridge = IXmlNodeSerializerBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnodeserializer.getxml)
        fileprivate func getXml() throws -> String {
            try _default.GetXmlImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmlnodeserializer.innertext)
        fileprivate var innerText : String {
            get { try! _default.get_InnerTextImpl() }
            set { try! _default.put_InnerTextImpl(newValue) }
        }

    }

    public enum IXmlTextBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CData_CXml_CDom_CIXmlText
        public typealias SwiftABI = __ABI_Windows_Data_Xml_Dom.IXmlText
        public typealias SwiftProjection = AnyIXmlText
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IXmlTextImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Data_Xml_Dom.IXmlTextVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IXmlTextImpl: IXmlText, WinRTAbiImpl {
        fileprivate typealias Bridge = IXmlTextBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.splittext)
        fileprivate func splitText(_ offset: UInt32) throws -> AnyIXmlText! {
            try _default.SplitTextImpl(offset)
        }

        private lazy var _IXmlNodeSelector: __ABI_Windows_Data_Xml_Dom.IXmlNodeSelector! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.selectsinglenode)
        fileprivate func selectSingleNode(_ xpath: String) throws -> AnyIXmlNode! {
            try _IXmlNodeSelector.SelectSingleNodeImpl(xpath)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.selectnodes)
        fileprivate func selectNodes(_ xpath: String) throws -> XmlNodeList! {
            try _IXmlNodeSelector.SelectNodesImpl(xpath)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.selectsinglenodens)
        fileprivate func selectSingleNodeNS(_ xpath: String, _ namespaces: Any!) throws -> AnyIXmlNode! {
            try _IXmlNodeSelector.SelectSingleNodeNSImpl(xpath, namespaces)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.selectnodesns)
        fileprivate func selectNodesNS(_ xpath: String, _ namespaces: Any!) throws -> XmlNodeList! {
            try _IXmlNodeSelector.SelectNodesNSImpl(xpath, namespaces)
        }

        private lazy var _IXmlNodeSerializer: __ABI_Windows_Data_Xml_Dom.IXmlNodeSerializer! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.getxml)
        fileprivate func getXml() throws -> String {
            try _IXmlNodeSerializer.GetXmlImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.innertext)
        fileprivate var innerText : String {
            get { try! _IXmlNodeSerializer.get_InnerTextImpl() }
            set { try! _IXmlNodeSerializer.put_InnerTextImpl(newValue) }
        }

        private lazy var _IXmlNode: __ABI_Windows_Data_Xml_Dom.IXmlNode! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.haschildnodes)
        fileprivate func hasChildNodes() throws -> Bool {
            try _IXmlNode.HasChildNodesImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.insertbefore)
        fileprivate func insertBefore(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
            try _IXmlNode.InsertBeforeImpl(newChild, referenceChild)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.replacechild)
        fileprivate func replaceChild(_ newChild: AnyIXmlNode!, _ referenceChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
            try _IXmlNode.ReplaceChildImpl(newChild, referenceChild)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.removechild)
        fileprivate func removeChild(_ childNode: AnyIXmlNode!) throws -> AnyIXmlNode! {
            try _IXmlNode.RemoveChildImpl(childNode)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.appendchild)
        fileprivate func appendChild(_ newChild: AnyIXmlNode!) throws -> AnyIXmlNode! {
            try _IXmlNode.AppendChildImpl(newChild)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.clonenode)
        fileprivate func cloneNode(_ deep: Bool) throws -> AnyIXmlNode! {
            try _IXmlNode.CloneNodeImpl(deep)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.normalize)
        fileprivate func normalize() throws {
            try _IXmlNode.NormalizeImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.attributes)
        fileprivate var attributes : XmlNamedNodeMap! {
            get { try! _IXmlNode.get_AttributesImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.childnodes)
        fileprivate var childNodes : XmlNodeList! {
            get { try! _IXmlNode.get_ChildNodesImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.firstchild)
        fileprivate var firstChild : AnyIXmlNode! {
            get { try! _IXmlNode.get_FirstChildImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.lastchild)
        fileprivate var lastChild : AnyIXmlNode! {
            get { try! _IXmlNode.get_LastChildImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.localname)
        fileprivate var localName : Any! {
            get { try! _IXmlNode.get_LocalNameImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.namespaceuri)
        fileprivate var namespaceUri : Any! {
            get { try! _IXmlNode.get_NamespaceUriImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.nextsibling)
        fileprivate var nextSibling : AnyIXmlNode! {
            get { try! _IXmlNode.get_NextSiblingImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.nodename)
        fileprivate var nodeName : String {
            get { try! _IXmlNode.get_NodeNameImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.nodetype)
        fileprivate var nodeType : NodeType {
            get { try! _IXmlNode.get_NodeTypeImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.nodevalue)
        fileprivate var nodeValue : Any! {
            get { try! _IXmlNode.get_NodeValueImpl() }
            set { try! _IXmlNode.put_NodeValueImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.ownerdocument)
        fileprivate var ownerDocument : XmlDocument! {
            get { try! _IXmlNode.get_OwnerDocumentImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.parentnode)
        fileprivate var parentNode : AnyIXmlNode! {
            get { try! _IXmlNode.get_ParentNodeImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.prefix)
        fileprivate var prefix : Any! {
            get { try! _IXmlNode.get_PrefixImpl() }
            set { try! _IXmlNode.put_PrefixImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.previoussibling)
        fileprivate var previousSibling : AnyIXmlNode! {
            get { try! _IXmlNode.get_PreviousSiblingImpl() }
        }

        private lazy var _IXmlCharacterData: __ABI_Windows_Data_Xml_Dom.IXmlCharacterData! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.substringdata)
        fileprivate func substringData(_ offset: UInt32, _ count: UInt32) throws -> String {
            try _IXmlCharacterData.SubstringDataImpl(offset, count)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.appenddata)
        fileprivate func appendData(_ data: String) throws {
            try _IXmlCharacterData.AppendDataImpl(data)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.insertdata)
        fileprivate func insertData(_ offset: UInt32, _ data: String) throws {
            try _IXmlCharacterData.InsertDataImpl(offset, data)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.deletedata)
        fileprivate func deleteData(_ offset: UInt32, _ count: UInt32) throws {
            try _IXmlCharacterData.DeleteDataImpl(offset, count)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.replacedata)
        fileprivate func replaceData(_ offset: UInt32, _ count: UInt32, _ data: String) throws {
            try _IXmlCharacterData.ReplaceDataImpl(offset, count, data)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.data)
        fileprivate var data : String {
            get { try! _IXmlCharacterData.get_DataImpl() }
            set { try! _IXmlCharacterData.put_DataImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.data.xml.dom.ixmltext.length)
        fileprivate var length : UInt32 {
            get { try! _IXmlCharacterData.get_LengthImpl() }
        }

    }

}
