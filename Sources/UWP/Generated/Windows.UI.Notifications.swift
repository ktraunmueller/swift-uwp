// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.adaptivenotificationcontentkind)
public typealias AdaptiveNotificationContentKind = __x_ABI_CWindows_CUI_CNotifications_CAdaptiveNotificationContentKind
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgetemplatetype)
public typealias BadgeTemplateType = __x_ABI_CWindows_CUI_CNotifications_CBadgeTemplateType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notificationkinds)
public typealias NotificationKinds = __x_ABI_CWindows_CUI_CNotifications_CNotificationKinds
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notificationmirroring)
public typealias NotificationMirroring = __x_ABI_CWindows_CUI_CNotifications_CNotificationMirroring
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notificationsetting)
public typealias NotificationSetting = __x_ABI_CWindows_CUI_CNotifications_CNotificationSetting
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notificationupdateresult)
public typealias NotificationUpdateResult = __x_ABI_CWindows_CUI_CNotifications_CNotificationUpdateResult
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.periodicupdaterecurrence)
public typealias PeriodicUpdateRecurrence = __x_ABI_CWindows_CUI_CNotifications_CPeriodicUpdateRecurrence
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileflyouttemplatetype)
public typealias TileFlyoutTemplateType = __x_ABI_CWindows_CUI_CNotifications_CTileFlyoutTemplateType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tiletemplatetype)
public typealias TileTemplateType = __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastdismissalreason)
public typealias ToastDismissalReason = __x_ABI_CWindows_CUI_CNotifications_CToastDismissalReason
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toasthistorychangedtype)
public typealias ToastHistoryChangedType = __x_ABI_CWindows_CUI_CNotifications_CToastHistoryChangedType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationpriority)
public typealias ToastNotificationPriority = __x_ABI_CWindows_CUI_CNotifications_CToastNotificationPriority
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toasttemplatetype)
public typealias ToastTemplateType = __x_ABI_CWindows_CUI_CNotifications_CToastTemplateType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.usernotificationchangedkind)
public typealias UserNotificationChangedKind = __x_ABI_CWindows_CUI_CNotifications_CUserNotificationChangedKind
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.adaptivenotificationtext)
public final class AdaptiveNotificationText : WinRTClass, IAdaptiveNotificationContent {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IAdaptiveNotificationText
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIAdaptiveNotificationText
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIAdaptiveNotificationText>?) -> AdaptiveNotificationText? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.UI.Notifications.AdaptiveNotificationText")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.adaptivenotificationtext.language)
    public var language : String {
        get { try! _default.get_LanguageImpl() }
        set { try! _default.put_LanguageImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.adaptivenotificationtext.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    private lazy var _IAdaptiveNotificationContent: __ABI_Windows_UI_Notifications.IAdaptiveNotificationContent! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.adaptivenotificationtext.hints)
    public var hints : WindowsFoundation.AnyIMap<String, String>! {
        get { try! _IAdaptiveNotificationContent.get_HintsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.adaptivenotificationtext.kind)
    public var kind : AdaptiveNotificationContentKind {
        get { try! _IAdaptiveNotificationContent.get_KindImpl() }
    }

    deinit {
        _default = nil
        _IAdaptiveNotificationContent = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgenotification)
public final class BadgeNotification : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IBadgeNotification
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIBadgeNotification
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIBadgeNotification>?) -> BadgeNotification? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IBadgeNotificationFactory: __ABI_Windows_UI_Notifications.IBadgeNotificationFactory = try! RoGetActivationFactory(HString("Windows.UI.Notifications.BadgeNotification"))
    public init(_ content: UWP.XmlDocument!) {
        super.init(try! Self._IBadgeNotificationFactory.CreateBadgeNotificationImpl(content))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgenotification.content)
    public var content : UWP.XmlDocument! {
        get { try! _default.get_ContentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgenotification.expirationtime)
    public var expirationTime : WindowsFoundation.DateTime? {
        get { try! _default.get_ExpirationTimeImpl() }
        set { try! _default.put_ExpirationTimeImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdatemanager)
public final class BadgeUpdateManager {
    private static let _IBadgeUpdateManagerStatics: __ABI_Windows_UI_Notifications.IBadgeUpdateManagerStatics = try! RoGetActivationFactory(HString("Windows.UI.Notifications.BadgeUpdateManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdatemanager.createbadgeupdaterforapplication)
    public static func createBadgeUpdaterForApplication() -> BadgeUpdater! {
        return try! _IBadgeUpdateManagerStatics.CreateBadgeUpdaterForApplicationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdatemanager.createbadgeupdaterforapplication)
    public static func createBadgeUpdaterForApplication(_ applicationId: String) -> BadgeUpdater! {
        return try! _IBadgeUpdateManagerStatics.CreateBadgeUpdaterForApplicationWithIdImpl(applicationId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdatemanager.createbadgeupdaterforsecondarytile)
    public static func createBadgeUpdaterForSecondaryTile(_ tileId: String) -> BadgeUpdater! {
        return try! _IBadgeUpdateManagerStatics.CreateBadgeUpdaterForSecondaryTileImpl(tileId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdatemanager.gettemplatecontent)
    public static func getTemplateContent(_ type: BadgeTemplateType) -> UWP.XmlDocument! {
        return try! _IBadgeUpdateManagerStatics.GetTemplateContentImpl(type)
    }

    private static let _IBadgeUpdateManagerStatics2: __ABI_Windows_UI_Notifications.IBadgeUpdateManagerStatics2 = try! RoGetActivationFactory(HString("Windows.UI.Notifications.BadgeUpdateManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdatemanager.getforuser)
    public static func getForUser(_ user: UWP.User!) -> BadgeUpdateManagerForUser! {
        return try! _IBadgeUpdateManagerStatics2.GetForUserImpl(user)
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdatemanagerforuser)
public final class BadgeUpdateManagerForUser : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IBadgeUpdateManagerForUser
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerForUser
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdateManagerForUser>?) -> BadgeUpdateManagerForUser? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdatemanagerforuser.createbadgeupdaterforapplication)
    public func createBadgeUpdaterForApplication() throws -> BadgeUpdater! {
        try _default.CreateBadgeUpdaterForApplicationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdatemanagerforuser.createbadgeupdaterforapplication)
    public func createBadgeUpdaterForApplication(_ applicationId: String) throws -> BadgeUpdater! {
        try _default.CreateBadgeUpdaterForApplicationWithIdImpl(applicationId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdatemanagerforuser.createbadgeupdaterforsecondarytile)
    public func createBadgeUpdaterForSecondaryTile(_ tileId: String) throws -> BadgeUpdater! {
        try _default.CreateBadgeUpdaterForSecondaryTileImpl(tileId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdatemanagerforuser.user)
    public var user : UWP.User! {
        get { try! _default.get_UserImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdater)
public final class BadgeUpdater : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IBadgeUpdater
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdater
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIBadgeUpdater>?) -> BadgeUpdater? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdater.update)
    public func update(_ notification: BadgeNotification!) throws {
        try _default.UpdateImpl(notification)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdater.clear)
    public func clear() throws {
        try _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdater.startperiodicupdate)
    public func startPeriodicUpdate(_ badgeContent: WindowsFoundation.Uri!, _ requestedInterval: PeriodicUpdateRecurrence) throws {
        try _default.StartPeriodicUpdateImpl(badgeContent, requestedInterval)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdater.startperiodicupdate)
    public func startPeriodicUpdate(_ badgeContent: WindowsFoundation.Uri!, _ startTime: WindowsFoundation.DateTime, _ requestedInterval: PeriodicUpdateRecurrence) throws {
        try _default.StartPeriodicUpdateAtTimeImpl(badgeContent, startTime, requestedInterval)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.badgeupdater.stopperiodicupdate)
    public func stopPeriodicUpdate() throws {
        try _default.StopPeriodicUpdateImpl()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationhints)
public final class KnownAdaptiveNotificationHints {
    private static let _IKnownAdaptiveNotificationHintsStatics: __ABI_Windows_UI_Notifications.IKnownAdaptiveNotificationHintsStatics = try! RoGetActivationFactory(HString("Windows.UI.Notifications.KnownAdaptiveNotificationHints"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationhints.align)
    public static var align : String {
        get { try! _IKnownAdaptiveNotificationHintsStatics.get_AlignImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationhints.maxlines)
    public static var maxLines : String {
        get { try! _IKnownAdaptiveNotificationHintsStatics.get_MaxLinesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationhints.minlines)
    public static var minLines : String {
        get { try! _IKnownAdaptiveNotificationHintsStatics.get_MinLinesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationhints.style)
    public static var style : String {
        get { try! _IKnownAdaptiveNotificationHintsStatics.get_StyleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationhints.textstacking)
    public static var textStacking : String {
        get { try! _IKnownAdaptiveNotificationHintsStatics.get_TextStackingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationhints.wrap)
    public static var wrap : String {
        get { try! _IKnownAdaptiveNotificationHintsStatics.get_WrapImpl() }
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles)
public final class KnownAdaptiveNotificationTextStyles {
    private static let _IKnownAdaptiveNotificationTextStylesStatics: __ABI_Windows_UI_Notifications.IKnownAdaptiveNotificationTextStylesStatics = try! RoGetActivationFactory(HString("Windows.UI.Notifications.KnownAdaptiveNotificationTextStyles"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.base)
    public static var base : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_BaseImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.basesubtle)
    public static var baseSubtle : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_BaseSubtleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.body)
    public static var body : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_BodyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.bodysubtle)
    public static var bodySubtle : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_BodySubtleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.caption)
    public static var caption : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_CaptionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.captionsubtle)
    public static var captionSubtle : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_CaptionSubtleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.header)
    public static var header : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_HeaderImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.headernumeral)
    public static var headerNumeral : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_HeaderNumeralImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.headernumeralsubtle)
    public static var headerNumeralSubtle : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_HeaderNumeralSubtleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.headersubtle)
    public static var headerSubtle : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_HeaderSubtleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.subheader)
    public static var subheader : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_SubheaderImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.subheadernumeral)
    public static var subheaderNumeral : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_SubheaderNumeralImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.subheadernumeralsubtle)
    public static var subheaderNumeralSubtle : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_SubheaderNumeralSubtleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.subheadersubtle)
    public static var subheaderSubtle : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_SubheaderSubtleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.subtitle)
    public static var subtitle : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_SubtitleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.subtitlesubtle)
    public static var subtitleSubtle : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_SubtitleSubtleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.title)
    public static var title : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_TitleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.titlenumeral)
    public static var titleNumeral : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_TitleNumeralImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownadaptivenotificationtextstyles.titlesubtle)
    public static var titleSubtle : String {
        get { try! _IKnownAdaptiveNotificationTextStylesStatics.get_TitleSubtleImpl() }
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownnotificationbindings)
public final class KnownNotificationBindings {
    private static let _IKnownNotificationBindingsStatics: __ABI_Windows_UI_Notifications.IKnownNotificationBindingsStatics = try! RoGetActivationFactory(HString("Windows.UI.Notifications.KnownNotificationBindings"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.knownnotificationbindings.toastgeneric)
    public static var toastGeneric : String {
        get { try! _IKnownNotificationBindingsStatics.get_ToastGenericImpl() }
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notification)
public final class Notification : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.INotification
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CINotification
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CINotification>?) -> Notification? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.UI.Notifications.Notification")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notification.expirationtime)
    public var expirationTime : WindowsFoundation.DateTime? {
        get { try! _default.get_ExpirationTimeImpl() }
        set { try! _default.put_ExpirationTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notification.visual)
    public var visual : NotificationVisual! {
        get { try! _default.get_VisualImpl() }
        set { try! _default.put_VisualImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notificationbinding)
public final class NotificationBinding : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.INotificationBinding
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CINotificationBinding
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CINotificationBinding>?) -> NotificationBinding? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notificationbinding.gettextelements)
    public func getTextElements() throws -> WindowsFoundation.AnyIVectorView<AdaptiveNotificationText?>! {
        try _default.GetTextElementsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notificationbinding.hints)
    public var hints : WindowsFoundation.AnyIMap<String, String>! {
        get { try! _default.get_HintsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notificationbinding.language)
    public var language : String {
        get { try! _default.get_LanguageImpl() }
        set { try! _default.put_LanguageImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notificationbinding.template)
    public var template : String {
        get { try! _default.get_TemplateImpl() }
        set { try! _default.put_TemplateImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notificationdata)
public final class NotificationData : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.INotificationData
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CINotificationData
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CINotificationData>?) -> NotificationData? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.UI.Notifications.NotificationData")))
    }

    private static let _INotificationDataFactory: __ABI_Windows_UI_Notifications.INotificationDataFactory = try! RoGetActivationFactory(HString("Windows.UI.Notifications.NotificationData"))
    public init(_ initialValues: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, String>?>!, _ sequenceNumber: UInt32) {
        super.init(try! Self._INotificationDataFactory.CreateNotificationDataWithValuesAndSequenceNumberImpl(initialValues, sequenceNumber))
    }

    public init(_ initialValues: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, String>?>!) {
        super.init(try! Self._INotificationDataFactory.CreateNotificationDataWithValuesImpl(initialValues))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notificationdata.sequencenumber)
    public var sequenceNumber : UInt32 {
        get { try! _default.get_SequenceNumberImpl() }
        set { try! _default.put_SequenceNumberImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notificationdata.values)
    public var values : WindowsFoundation.AnyIMap<String, String>! {
        get { try! _default.get_ValuesImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notificationvisual)
public final class NotificationVisual : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.INotificationVisual
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CINotificationVisual
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CINotificationVisual>?) -> NotificationVisual? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notificationvisual.getbinding)
    public func getBinding(_ templateName: String) throws -> NotificationBinding! {
        try _default.GetBindingImpl(templateName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notificationvisual.bindings)
    public var bindings : WindowsFoundation.AnyIVector<NotificationBinding?>! {
        get { try! _default.get_BindingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.notificationvisual.language)
    public var language : String {
        get { try! _default.get_LanguageImpl() }
        set { try! _default.put_LanguageImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtilenotification)
public final class ScheduledTileNotification : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IScheduledTileNotification
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIScheduledTileNotification
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIScheduledTileNotification>?) -> ScheduledTileNotification? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IScheduledTileNotificationFactory: __ABI_Windows_UI_Notifications.IScheduledTileNotificationFactory = try! RoGetActivationFactory(HString("Windows.UI.Notifications.ScheduledTileNotification"))
    public init(_ content: UWP.XmlDocument!, _ deliveryTime: WindowsFoundation.DateTime) {
        super.init(try! Self._IScheduledTileNotificationFactory.CreateScheduledTileNotificationImpl(content, deliveryTime))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtilenotification.content)
    public var content : UWP.XmlDocument! {
        get { try! _default.get_ContentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtilenotification.deliverytime)
    public var deliveryTime : WindowsFoundation.DateTime {
        get { try! _default.get_DeliveryTimeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtilenotification.expirationtime)
    public var expirationTime : WindowsFoundation.DateTime? {
        get { try! _default.get_ExpirationTimeImpl() }
        set { try! _default.put_ExpirationTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtilenotification.id)
    public var id : String {
        get { try! _default.get_IdImpl() }
        set { try! _default.put_IdImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtilenotification.tag)
    public var tag : String {
        get { try! _default.get_TagImpl() }
        set { try! _default.put_TagImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtoastnotification)
public final class ScheduledToastNotification : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IScheduledToastNotification
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotification>?) -> ScheduledToastNotification? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IScheduledToastNotificationFactory: __ABI_Windows_UI_Notifications.IScheduledToastNotificationFactory = try! RoGetActivationFactory(HString("Windows.UI.Notifications.ScheduledToastNotification"))
    public init(_ content: UWP.XmlDocument!, _ deliveryTime: WindowsFoundation.DateTime) {
        super.init(try! Self._IScheduledToastNotificationFactory.CreateScheduledToastNotificationImpl(content, deliveryTime))
    }

    public init(_ content: UWP.XmlDocument!, _ deliveryTime: WindowsFoundation.DateTime, _ snoozeInterval: WindowsFoundation.TimeSpan, _ maximumSnoozeCount: UInt32) {
        super.init(try! Self._IScheduledToastNotificationFactory.CreateScheduledToastNotificationRecurringImpl(content, deliveryTime, snoozeInterval, maximumSnoozeCount))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtoastnotification.content)
    public var content : UWP.XmlDocument! {
        get { try! _default.get_ContentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtoastnotification.deliverytime)
    public var deliveryTime : WindowsFoundation.DateTime {
        get { try! _default.get_DeliveryTimeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtoastnotification.id)
    public var id : String {
        get { try! _default.get_IdImpl() }
        set { try! _default.put_IdImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtoastnotification.maximumsnoozecount)
    public var maximumSnoozeCount : UInt32 {
        get { try! _default.get_MaximumSnoozeCountImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtoastnotification.snoozeinterval)
    public var snoozeInterval : WindowsFoundation.TimeSpan? {
        get { try! _default.get_SnoozeIntervalImpl() }
    }

    private lazy var _IScheduledToastNotification2: __ABI_Windows_UI_Notifications.IScheduledToastNotification2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtoastnotification.group)
    public var group : String {
        get { try! _IScheduledToastNotification2.get_GroupImpl() }
        set { try! _IScheduledToastNotification2.put_GroupImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtoastnotification.suppresspopup)
    public var suppressPopup : Bool {
        get { try! _IScheduledToastNotification2.get_SuppressPopupImpl() }
        set { try! _IScheduledToastNotification2.put_SuppressPopupImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtoastnotification.tag)
    public var tag : String {
        get { try! _IScheduledToastNotification2.get_TagImpl() }
        set { try! _IScheduledToastNotification2.put_TagImpl(newValue) }
    }

    private lazy var _IScheduledToastNotification3: __ABI_Windows_UI_Notifications.IScheduledToastNotification3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtoastnotification.notificationmirroring)
    public var notificationMirroring : NotificationMirroring {
        get { try! _IScheduledToastNotification3.get_NotificationMirroringImpl() }
        set { try! _IScheduledToastNotification3.put_NotificationMirroringImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtoastnotification.remoteid)
    public var remoteId : String {
        get { try! _IScheduledToastNotification3.get_RemoteIdImpl() }
        set { try! _IScheduledToastNotification3.put_RemoteIdImpl(newValue) }
    }

    private lazy var _IScheduledToastNotification4: __ABI_Windows_UI_Notifications.IScheduledToastNotification4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtoastnotification.expirationtime)
    public var expirationTime : WindowsFoundation.DateTime? {
        get { try! _IScheduledToastNotification4.get_ExpirationTimeImpl() }
        set { try! _IScheduledToastNotification4.put_ExpirationTimeImpl(newValue) }
    }

    deinit {
        _default = nil
        _IScheduledToastNotification2 = nil
        _IScheduledToastNotification3 = nil
        _IScheduledToastNotification4 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtoastnotificationshowingeventargs)
public final class ScheduledToastNotificationShowingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IScheduledToastNotificationShowingEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs>?) -> ScheduledToastNotificationShowingEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtoastnotificationshowingeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtoastnotificationshowingeventargs.cancel)
    public var cancel : Bool {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.scheduledtoastnotificationshowingeventargs.scheduledtoastnotification)
    public var scheduledToastNotification : ScheduledToastNotification! {
        get { try! _default.get_ScheduledToastNotificationImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.showntilenotification)
public final class ShownTileNotification : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IShownTileNotification
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIShownTileNotification
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIShownTileNotification>?) -> ShownTileNotification? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.showntilenotification.arguments)
    public var arguments : String {
        get { try! _default.get_ArgumentsImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileflyoutnotification)
public final class TileFlyoutNotification : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.ITileFlyoutNotification
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CITileFlyoutNotification
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CITileFlyoutNotification>?) -> TileFlyoutNotification? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _ITileFlyoutNotificationFactory: __ABI_Windows_UI_Notifications.ITileFlyoutNotificationFactory = try! RoGetActivationFactory(HString("Windows.UI.Notifications.TileFlyoutNotification"))
    public init(_ content: UWP.XmlDocument!) {
        super.init(try! Self._ITileFlyoutNotificationFactory.CreateTileFlyoutNotificationImpl(content))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileflyoutnotification.content)
    public var content : UWP.XmlDocument! {
        get { try! _default.get_ContentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileflyoutnotification.expirationtime)
    public var expirationTime : WindowsFoundation.DateTime? {
        get { try! _default.get_ExpirationTimeImpl() }
        set { try! _default.put_ExpirationTimeImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileflyoutupdatemanager)
public final class TileFlyoutUpdateManager {
    private static let _ITileFlyoutUpdateManagerStatics: __ABI_Windows_UI_Notifications.ITileFlyoutUpdateManagerStatics = try! RoGetActivationFactory(HString("Windows.UI.Notifications.TileFlyoutUpdateManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileflyoutupdatemanager.createtileflyoutupdaterforapplication)
    public static func createTileFlyoutUpdaterForApplication() -> TileFlyoutUpdater! {
        return try! _ITileFlyoutUpdateManagerStatics.CreateTileFlyoutUpdaterForApplicationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileflyoutupdatemanager.createtileflyoutupdaterforapplication)
    public static func createTileFlyoutUpdaterForApplication(_ applicationId: String) -> TileFlyoutUpdater! {
        return try! _ITileFlyoutUpdateManagerStatics.CreateTileFlyoutUpdaterForApplicationWithIdImpl(applicationId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileflyoutupdatemanager.createtileflyoutupdaterforsecondarytile)
    public static func createTileFlyoutUpdaterForSecondaryTile(_ tileId: String) -> TileFlyoutUpdater! {
        return try! _ITileFlyoutUpdateManagerStatics.CreateTileFlyoutUpdaterForSecondaryTileImpl(tileId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileflyoutupdatemanager.gettemplatecontent)
    public static func getTemplateContent(_ type: TileFlyoutTemplateType) -> UWP.XmlDocument! {
        return try! _ITileFlyoutUpdateManagerStatics.GetTemplateContentImpl(type)
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileflyoutupdater)
public final class TileFlyoutUpdater : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.ITileFlyoutUpdater
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CITileFlyoutUpdater
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CITileFlyoutUpdater>?) -> TileFlyoutUpdater? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileflyoutupdater.update)
    public func update(_ notification: TileFlyoutNotification!) throws {
        try _default.UpdateImpl(notification)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileflyoutupdater.clear)
    public func clear() throws {
        try _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileflyoutupdater.startperiodicupdate)
    public func startPeriodicUpdate(_ tileFlyoutContent: WindowsFoundation.Uri!, _ requestedInterval: PeriodicUpdateRecurrence) throws {
        try _default.StartPeriodicUpdateImpl(tileFlyoutContent, requestedInterval)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileflyoutupdater.startperiodicupdate)
    public func startPeriodicUpdate(_ tileFlyoutContent: WindowsFoundation.Uri!, _ startTime: WindowsFoundation.DateTime, _ requestedInterval: PeriodicUpdateRecurrence) throws {
        try _default.StartPeriodicUpdateAtTimeImpl(tileFlyoutContent, startTime, requestedInterval)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileflyoutupdater.stopperiodicupdate)
    public func stopPeriodicUpdate() throws {
        try _default.StopPeriodicUpdateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileflyoutupdater.setting)
    public var setting : NotificationSetting {
        get { try! _default.get_SettingImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tilenotification)
public final class TileNotification : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.ITileNotification
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CITileNotification
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CITileNotification>?) -> TileNotification? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _ITileNotificationFactory: __ABI_Windows_UI_Notifications.ITileNotificationFactory = try! RoGetActivationFactory(HString("Windows.UI.Notifications.TileNotification"))
    public init(_ content: UWP.XmlDocument!) {
        super.init(try! Self._ITileNotificationFactory.CreateTileNotificationImpl(content))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tilenotification.content)
    public var content : UWP.XmlDocument! {
        get { try! _default.get_ContentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tilenotification.expirationtime)
    public var expirationTime : WindowsFoundation.DateTime? {
        get { try! _default.get_ExpirationTimeImpl() }
        set { try! _default.put_ExpirationTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tilenotification.tag)
    public var tag : String {
        get { try! _default.get_TagImpl() }
        set { try! _default.put_TagImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdatemanager)
public final class TileUpdateManager {
    private static let _ITileUpdateManagerStatics: __ABI_Windows_UI_Notifications.ITileUpdateManagerStatics = try! RoGetActivationFactory(HString("Windows.UI.Notifications.TileUpdateManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdatemanager.createtileupdaterforapplication)
    public static func createTileUpdaterForApplication() -> TileUpdater! {
        return try! _ITileUpdateManagerStatics.CreateTileUpdaterForApplicationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdatemanager.createtileupdaterforapplication)
    public static func createTileUpdaterForApplication(_ applicationId: String) -> TileUpdater! {
        return try! _ITileUpdateManagerStatics.CreateTileUpdaterForApplicationWithIdImpl(applicationId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdatemanager.createtileupdaterforsecondarytile)
    public static func createTileUpdaterForSecondaryTile(_ tileId: String) -> TileUpdater! {
        return try! _ITileUpdateManagerStatics.CreateTileUpdaterForSecondaryTileImpl(tileId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdatemanager.gettemplatecontent)
    public static func getTemplateContent(_ type: TileTemplateType) -> UWP.XmlDocument! {
        return try! _ITileUpdateManagerStatics.GetTemplateContentImpl(type)
    }

    private static let _ITileUpdateManagerStatics2: __ABI_Windows_UI_Notifications.ITileUpdateManagerStatics2 = try! RoGetActivationFactory(HString("Windows.UI.Notifications.TileUpdateManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdatemanager.getforuser)
    public static func getForUser(_ user: UWP.User!) -> TileUpdateManagerForUser! {
        return try! _ITileUpdateManagerStatics2.GetForUserImpl(user)
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdatemanagerforuser)
public final class TileUpdateManagerForUser : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.ITileUpdateManagerForUser
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerForUser
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CITileUpdateManagerForUser>?) -> TileUpdateManagerForUser? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdatemanagerforuser.createtileupdaterforapplicationforuser)
    public func createTileUpdaterForApplicationForUser() throws -> TileUpdater! {
        try _default.CreateTileUpdaterForApplicationImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdatemanagerforuser.createtileupdaterforapplication)
    public func createTileUpdaterForApplication(_ applicationId: String) throws -> TileUpdater! {
        try _default.CreateTileUpdaterForApplicationWithIdImpl(applicationId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdatemanagerforuser.createtileupdaterforsecondarytile)
    public func createTileUpdaterForSecondaryTile(_ tileId: String) throws -> TileUpdater! {
        try _default.CreateTileUpdaterForSecondaryTileImpl(tileId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdatemanagerforuser.user)
    public var user : UWP.User! {
        get { try! _default.get_UserImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdater)
public final class TileUpdater : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.ITileUpdater
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CITileUpdater
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CITileUpdater>?) -> TileUpdater? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdater.update)
    public func update(_ notification: TileNotification!) throws {
        try _default.UpdateImpl(notification)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdater.clear)
    public func clear() throws {
        try _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdater.enablenotificationqueue)
    public func enableNotificationQueue(_ enable: Bool) throws {
        try _default.EnableNotificationQueueImpl(enable)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdater.addtoschedule)
    public func addToSchedule(_ scheduledTile: ScheduledTileNotification!) throws {
        try _default.AddToScheduleImpl(scheduledTile)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdater.removefromschedule)
    public func removeFromSchedule(_ scheduledTile: ScheduledTileNotification!) throws {
        try _default.RemoveFromScheduleImpl(scheduledTile)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdater.getscheduledtilenotifications)
    public func getScheduledTileNotifications() throws -> WindowsFoundation.AnyIVectorView<ScheduledTileNotification?>! {
        try _default.GetScheduledTileNotificationsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdater.startperiodicupdate)
    public func startPeriodicUpdate(_ tileContent: WindowsFoundation.Uri!, _ requestedInterval: PeriodicUpdateRecurrence) throws {
        try _default.StartPeriodicUpdateImpl(tileContent, requestedInterval)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdater.startperiodicupdate)
    public func startPeriodicUpdate(_ tileContent: WindowsFoundation.Uri!, _ startTime: WindowsFoundation.DateTime, _ requestedInterval: PeriodicUpdateRecurrence) throws {
        try _default.StartPeriodicUpdateAtTimeImpl(tileContent, startTime, requestedInterval)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdater.stopperiodicupdate)
    public func stopPeriodicUpdate() throws {
        try _default.StopPeriodicUpdateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdater.startperiodicupdatebatch)
    public func startPeriodicUpdateBatch(_ tileContents: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ requestedInterval: PeriodicUpdateRecurrence) throws {
        try _default.StartPeriodicUpdateBatchImpl(tileContents, requestedInterval)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdater.startperiodicupdatebatch)
    public func startPeriodicUpdateBatch(_ tileContents: WindowsFoundation.AnyIIterable<WindowsFoundation.Uri?>!, _ startTime: WindowsFoundation.DateTime, _ requestedInterval: PeriodicUpdateRecurrence) throws {
        try _default.StartPeriodicUpdateBatchAtTimeImpl(tileContents, startTime, requestedInterval)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdater.setting)
    public var setting : NotificationSetting {
        get { try! _default.get_SettingImpl() }
    }

    private lazy var _ITileUpdater2: __ABI_Windows_UI_Notifications.ITileUpdater2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdater.enablenotificationqueueforsquare150x150)
    public func enableNotificationQueueForSquare150x150(_ enable: Bool) throws {
        try _ITileUpdater2.EnableNotificationQueueForSquare150x150Impl(enable)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdater.enablenotificationqueueforwide310x150)
    public func enableNotificationQueueForWide310x150(_ enable: Bool) throws {
        try _ITileUpdater2.EnableNotificationQueueForWide310x150Impl(enable)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.tileupdater.enablenotificationqueueforsquare310x310)
    public func enableNotificationQueueForSquare310x310(_ enable: Bool) throws {
        try _ITileUpdater2.EnableNotificationQueueForSquare310x310Impl(enable)
    }

    deinit {
        _default = nil
        _ITileUpdater2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastactivatedeventargs)
public final class ToastActivatedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IToastActivatedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIToastActivatedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIToastActivatedEventArgs>?) -> ToastActivatedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastactivatedeventargs.arguments)
    public var arguments : String {
        get { try! _default.get_ArgumentsImpl() }
    }

    private lazy var _IToastActivatedEventArgs2: __ABI_Windows_UI_Notifications.IToastActivatedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastactivatedeventargs.userinput)
    public var userInput : WindowsFoundation.ValueSet! {
        get { try! _IToastActivatedEventArgs2.get_UserInputImpl() }
    }

    deinit {
        _default = nil
        _IToastActivatedEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastcollection)
public final class ToastCollection : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IToastCollection
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIToastCollection
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIToastCollection>?) -> ToastCollection? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IToastCollectionFactory: __ABI_Windows_UI_Notifications.IToastCollectionFactory = try! RoGetActivationFactory(HString("Windows.UI.Notifications.ToastCollection"))
    public init(_ collectionId: String, _ displayName: String, _ launchArgs: String, _ iconUri: WindowsFoundation.Uri!) {
        super.init(try! Self._IToastCollectionFactory.CreateInstanceImpl(collectionId, displayName, launchArgs, iconUri))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastcollection.displayname)
    public var displayName : String {
        get { try! _default.get_DisplayNameImpl() }
        set { try! _default.put_DisplayNameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastcollection.icon)
    public var icon : WindowsFoundation.Uri! {
        get { try! _default.get_IconImpl() }
        set { try! _default.put_IconImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastcollection.id)
    public var id : String {
        get { try! _default.get_IdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastcollection.launchargs)
    public var launchArgs : String {
        get { try! _default.get_LaunchArgsImpl() }
        set { try! _default.put_LaunchArgsImpl(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastcollectionmanager)
public final class ToastCollectionManager : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IToastCollectionManager
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIToastCollectionManager
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIToastCollectionManager>?) -> ToastCollectionManager? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastcollectionmanager.savetoastcollectionasync)
    public func saveToastCollectionAsync(_ collection: ToastCollection!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.SaveToastCollectionAsyncImpl(collection)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastcollectionmanager.findalltoastcollectionsasync)
    public func findAllToastCollectionsAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<ToastCollection?>?>! {
        try _default.FindAllToastCollectionsAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastcollectionmanager.gettoastcollectionasync)
    public func getToastCollectionAsync(_ collectionId: String) throws -> WindowsFoundation.AnyIAsyncOperation<ToastCollection?>! {
        try _default.GetToastCollectionAsyncImpl(collectionId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastcollectionmanager.removetoastcollectionasync)
    public func removeToastCollectionAsync(_ collectionId: String) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.RemoveToastCollectionAsyncImpl(collectionId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastcollectionmanager.removealltoastcollectionsasync)
    public func removeAllToastCollectionsAsync() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.RemoveAllToastCollectionsAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastcollectionmanager.appid)
    public var appId : String {
        get { try! _default.get_AppIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastcollectionmanager.user)
    public var user : UWP.User! {
        get { try! _default.get_UserImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastdismissedeventargs)
public final class ToastDismissedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IToastDismissedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIToastDismissedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIToastDismissedEventArgs>?) -> ToastDismissedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastdismissedeventargs.reason)
    public var reason : ToastDismissalReason {
        get { try! _default.get_ReasonImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastfailedeventargs)
public final class ToastFailedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IToastFailedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIToastFailedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIToastFailedEventArgs>?) -> ToastFailedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastfailedeventargs.errorcode)
    public var errorCode : HRESULT {
        get { try! _default.get_ErrorCodeImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotification)
public final class ToastNotification : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IToastNotification
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIToastNotification
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIToastNotification>?) -> ToastNotification? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _IToastNotificationFactory: __ABI_Windows_UI_Notifications.IToastNotificationFactory = try! RoGetActivationFactory(HString("Windows.UI.Notifications.ToastNotification"))
    public init(_ content: UWP.XmlDocument!) {
        super.init(try! Self._IToastNotificationFactory.CreateToastNotificationImpl(content))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotification.content)
    public var content : UWP.XmlDocument! {
        get { try! _default.get_ContentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotification.expirationtime)
    public var expirationTime : WindowsFoundation.DateTime? {
        get { try! _default.get_ExpirationTimeImpl() }
        set { try! _default.put_ExpirationTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotification.activated)
    public lazy var activated : Event<TypedEventHandler<ToastNotification?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_ActivatedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_ActivatedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotification.dismissed)
    public lazy var dismissed : Event<TypedEventHandler<ToastNotification?, ToastDismissedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DismissedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DismissedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotification.failed)
    public lazy var failed : Event<TypedEventHandler<ToastNotification?, ToastFailedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_FailedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_FailedImpl($0)
       }
      )
    }()

    private lazy var _IToastNotification2: __ABI_Windows_UI_Notifications.IToastNotification2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotification.group)
    public var group : String {
        get { try! _IToastNotification2.get_GroupImpl() }
        set { try! _IToastNotification2.put_GroupImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotification.suppresspopup)
    public var suppressPopup : Bool {
        get { try! _IToastNotification2.get_SuppressPopupImpl() }
        set { try! _IToastNotification2.put_SuppressPopupImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotification.tag)
    public var tag : String {
        get { try! _IToastNotification2.get_TagImpl() }
        set { try! _IToastNotification2.put_TagImpl(newValue) }
    }

    private lazy var _IToastNotification3: __ABI_Windows_UI_Notifications.IToastNotification3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotification.notificationmirroring)
    public var notificationMirroring : NotificationMirroring {
        get { try! _IToastNotification3.get_NotificationMirroringImpl() }
        set { try! _IToastNotification3.put_NotificationMirroringImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotification.remoteid)
    public var remoteId : String {
        get { try! _IToastNotification3.get_RemoteIdImpl() }
        set { try! _IToastNotification3.put_RemoteIdImpl(newValue) }
    }

    private lazy var _IToastNotification4: __ABI_Windows_UI_Notifications.IToastNotification4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotification.data)
    public var data : NotificationData! {
        get { try! _IToastNotification4.get_DataImpl() }
        set { try! _IToastNotification4.put_DataImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotification.priority)
    public var priority : ToastNotificationPriority {
        get { try! _IToastNotification4.get_PriorityImpl() }
        set { try! _IToastNotification4.put_PriorityImpl(newValue) }
    }

    private lazy var _IToastNotification6: __ABI_Windows_UI_Notifications.IToastNotification6! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotification.expiresonreboot)
    public var expiresOnReboot : Bool {
        get { try! _IToastNotification6.get_ExpiresOnRebootImpl() }
        set { try! _IToastNotification6.put_ExpiresOnRebootImpl(newValue) }
    }

    deinit {
        _default = nil
        _IToastNotification2 = nil
        _IToastNotification3 = nil
        _IToastNotification4 = nil
        _IToastNotification6 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationactiontriggerdetail)
public final class ToastNotificationActionTriggerDetail : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IToastNotificationActionTriggerDetail
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationActionTriggerDetail
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIToastNotificationActionTriggerDetail>?) -> ToastNotificationActionTriggerDetail? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationactiontriggerdetail.argument)
    public var argument : String {
        get { try! _default.get_ArgumentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationactiontriggerdetail.userinput)
    public var userInput : WindowsFoundation.ValueSet! {
        get { try! _default.get_UserInputImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationhistory)
public final class ToastNotificationHistory : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IToastNotificationHistory
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistory
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistory>?) -> ToastNotificationHistory? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private lazy var _IToastNotificationHistory2: __ABI_Windows_UI_Notifications.IToastNotificationHistory2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationhistory.gethistory)
    public func getHistory() throws -> WindowsFoundation.AnyIVectorView<ToastNotification?>! {
        try _IToastNotificationHistory2.GetHistoryImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationhistory.gethistory)
    public func getHistory(_ applicationId: String) throws -> WindowsFoundation.AnyIVectorView<ToastNotification?>! {
        try _IToastNotificationHistory2.GetHistoryWithIdImpl(applicationId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationhistory.removegroup)
    public func removeGroup(_ group: String) throws {
        try _default.RemoveGroupImpl(group)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationhistory.removegroup)
    public func removeGroup(_ group: String, _ applicationId: String) throws {
        try _default.RemoveGroupWithIdImpl(group, applicationId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationhistory.remove)
    public func remove(_ tag: String, _ group: String, _ applicationId: String) throws {
        try _default.RemoveGroupedTagWithIdImpl(tag, group, applicationId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationhistory.remove)
    public func remove(_ tag: String, _ group: String) throws {
        try _default.RemoveGroupedTagImpl(tag, group)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationhistory.remove)
    public func remove(_ tag: String) throws {
        try _default.RemoveImpl(tag)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationhistory.clear)
    public func clear() throws {
        try _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationhistory.clear)
    public func clear(_ applicationId: String) throws {
        try _default.ClearWithIdImpl(applicationId)
    }

    deinit {
        _IToastNotificationHistory2 = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationhistorychangedtriggerdetail)
public final class ToastNotificationHistoryChangedTriggerDetail : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IToastNotificationHistoryChangedTriggerDetail
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistoryChangedTriggerDetail
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIToastNotificationHistoryChangedTriggerDetail>?) -> ToastNotificationHistoryChangedTriggerDetail? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationhistorychangedtriggerdetail.changetype)
    public var changeType : ToastHistoryChangedType {
        get { try! _default.get_ChangeTypeImpl() }
    }

    private lazy var _IToastNotificationHistoryChangedTriggerDetail2: __ABI_Windows_UI_Notifications.IToastNotificationHistoryChangedTriggerDetail2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationhistorychangedtriggerdetail.collectionid)
    public var collectionId : String {
        get { try! _IToastNotificationHistoryChangedTriggerDetail2.get_CollectionIdImpl() }
    }

    deinit {
        _default = nil
        _IToastNotificationHistoryChangedTriggerDetail2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanager)
public final class ToastNotificationManager {
    private static let _IToastNotificationManagerStatics: __ABI_Windows_UI_Notifications.IToastNotificationManagerStatics = try! RoGetActivationFactory(HString("Windows.UI.Notifications.ToastNotificationManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanager.createtoastnotifier)
    public static func createToastNotifier() -> ToastNotifier! {
        return try! _IToastNotificationManagerStatics.CreateToastNotifierImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanager.createtoastnotifier)
    public static func createToastNotifier(_ applicationId: String) -> ToastNotifier! {
        return try! _IToastNotificationManagerStatics.CreateToastNotifierWithIdImpl(applicationId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanager.gettemplatecontent)
    public static func getTemplateContent(_ type: ToastTemplateType) -> UWP.XmlDocument! {
        return try! _IToastNotificationManagerStatics.GetTemplateContentImpl(type)
    }

    private static let _IToastNotificationManagerStatics2: __ABI_Windows_UI_Notifications.IToastNotificationManagerStatics2 = try! RoGetActivationFactory(HString("Windows.UI.Notifications.ToastNotificationManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanager.history)
    public static var history : ToastNotificationHistory! {
        get { try! _IToastNotificationManagerStatics2.get_HistoryImpl() }
    }

    private static let _IToastNotificationManagerStatics4: __ABI_Windows_UI_Notifications.IToastNotificationManagerStatics4 = try! RoGetActivationFactory(HString("Windows.UI.Notifications.ToastNotificationManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanager.getforuser)
    public static func getForUser(_ user: UWP.User!) -> ToastNotificationManagerForUser! {
        return try! _IToastNotificationManagerStatics4.GetForUserImpl(user)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanager.configurenotificationmirroring)
    public static func configureNotificationMirroring(_ value: NotificationMirroring) {
        try! _IToastNotificationManagerStatics4.ConfigureNotificationMirroringImpl(value)
    }

    private static let _IToastNotificationManagerStatics5: __ABI_Windows_UI_Notifications.IToastNotificationManagerStatics5 = try! RoGetActivationFactory(HString("Windows.UI.Notifications.ToastNotificationManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanager.getdefault)
    public static func getDefault() -> ToastNotificationManagerForUser! {
        return try! _IToastNotificationManagerStatics5.GetDefaultImpl()
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanagerforuser)
public final class ToastNotificationManagerForUser : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IToastNotificationManagerForUser
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser>?) -> ToastNotificationManagerForUser? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanagerforuser.createtoastnotifier)
    public func createToastNotifier() throws -> ToastNotifier! {
        try _default.CreateToastNotifierImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanagerforuser.createtoastnotifier)
    public func createToastNotifier(_ applicationId: String) throws -> ToastNotifier! {
        try _default.CreateToastNotifierWithIdImpl(applicationId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanagerforuser.history)
    public var history : ToastNotificationHistory! {
        get { try! _default.get_HistoryImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanagerforuser.user)
    public var user : UWP.User! {
        get { try! _default.get_UserImpl() }
    }

    private lazy var _IToastNotificationManagerForUser2: __ABI_Windows_UI_Notifications.IToastNotificationManagerForUser2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanagerforuser.gettoastnotifierfortoastcollectionidasync)
    public func getToastNotifierForToastCollectionIdAsync(_ collectionId: String) throws -> WindowsFoundation.AnyIAsyncOperation<ToastNotifier?>! {
        try _IToastNotificationManagerForUser2.GetToastNotifierForToastCollectionIdAsyncImpl(collectionId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanagerforuser.gethistoryfortoastcollectionidasync)
    public func getHistoryForToastCollectionIdAsync(_ collectionId: String) throws -> WindowsFoundation.AnyIAsyncOperation<ToastNotificationHistory?>! {
        try _IToastNotificationManagerForUser2.GetHistoryForToastCollectionIdAsyncImpl(collectionId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanagerforuser.gettoastcollectionmanager)
    public func getToastCollectionManager() throws -> ToastCollectionManager! {
        try _IToastNotificationManagerForUser2.GetToastCollectionManagerImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotificationmanagerforuser.gettoastcollectionmanager)
    public func getToastCollectionManager(_ appId: String) throws -> ToastCollectionManager! {
        try _IToastNotificationManagerForUser2.GetToastCollectionManagerWithAppIdImpl(appId)
    }

    deinit {
        _default = nil
        _IToastNotificationManagerForUser2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotifier)
public final class ToastNotifier : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IToastNotifier
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIToastNotifier
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIToastNotifier>?) -> ToastNotifier? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotifier.show)
    public func show(_ notification: ToastNotification!) throws {
        try _default.ShowImpl(notification)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotifier.hide)
    public func hide(_ notification: ToastNotification!) throws {
        try _default.HideImpl(notification)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotifier.addtoschedule)
    public func addToSchedule(_ scheduledToast: ScheduledToastNotification!) throws {
        try _default.AddToScheduleImpl(scheduledToast)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotifier.removefromschedule)
    public func removeFromSchedule(_ scheduledToast: ScheduledToastNotification!) throws {
        try _default.RemoveFromScheduleImpl(scheduledToast)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotifier.getscheduledtoastnotifications)
    public func getScheduledToastNotifications() throws -> WindowsFoundation.AnyIVectorView<ScheduledToastNotification?>! {
        try _default.GetScheduledToastNotificationsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotifier.setting)
    public var setting : NotificationSetting {
        get { try! _default.get_SettingImpl() }
    }

    private lazy var _IToastNotifier2: __ABI_Windows_UI_Notifications.IToastNotifier2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotifier.update)
    public func update(_ data: NotificationData!, _ tag: String, _ group: String) throws -> NotificationUpdateResult {
        try _IToastNotifier2.UpdateWithTagAndGroupImpl(data, tag, group)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotifier.update)
    public func update(_ data: NotificationData!, _ tag: String) throws -> NotificationUpdateResult {
        try _IToastNotifier2.UpdateWithTagImpl(data, tag)
    }

    private lazy var _IToastNotifier3: __ABI_Windows_UI_Notifications.IToastNotifier3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.toastnotifier.scheduledtoastnotificationshowing)
    public lazy var scheduledToastNotificationShowing : Event<TypedEventHandler<ToastNotifier?, ScheduledToastNotificationShowingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._IToastNotifier3 else { return .init() }
          return try! this.add_ScheduledToastNotificationShowingImpl($0)
        },
        remove: { [weak self] in
         try? self?._IToastNotifier3.remove_ScheduledToastNotificationShowingImpl($0)
       }
      )
    }()

    deinit {
        _default = nil
        _IToastNotifier2 = nil
        _IToastNotifier3 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.usernotification)
public final class UserNotification : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IUserNotification
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIUserNotification
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIUserNotification>?) -> UserNotification? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.usernotification.appinfo)
    public var appInfo : UWP.AppInfo! {
        get { try! _default.get_AppInfoImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.usernotification.creationtime)
    public var creationTime : WindowsFoundation.DateTime {
        get { try! _default.get_CreationTimeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.usernotification.id)
    public var id : UInt32 {
        get { try! _default.get_IdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.usernotification.notification)
    public var notification : Notification! {
        get { try! _default.get_NotificationImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.usernotificationchangedeventargs)
public final class UserNotificationChangedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Notifications.IUserNotificationChangedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CNotifications_CIUserNotificationChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CWindows_CUI_CNotifications_CIUserNotificationChangedEventArgs>?) -> UserNotificationChangedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.usernotificationchangedeventargs.changekind)
    public var changeKind : UserNotificationChangedKind {
        get { try! _default.get_ChangeKindImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.usernotificationchangedeventargs.usernotificationid)
    public var userNotificationId : UInt32 {
        get { try! _default.get_UserNotificationIdImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.iadaptivenotificationcontent)
public protocol IAdaptiveNotificationContent : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.iadaptivenotificationcontent.hints)
    var hints: WindowsFoundation.AnyIMap<String, String>! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.notifications.iadaptivenotificationcontent.kind)
    var kind: UWP.AdaptiveNotificationContentKind { get }
}

extension IAdaptiveNotificationContent {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_UI_Notifications.IAdaptiveNotificationContentWrapper.IID:
                let wrapper = __ABI_Windows_UI_Notifications.IAdaptiveNotificationContentWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyIAdaptiveNotificationContent = any IAdaptiveNotificationContent

extension UWP.AdaptiveNotificationContentKind {
    public static var text : UWP.AdaptiveNotificationContentKind {
        __x_ABI_CWindows_CUI_CNotifications_CAdaptiveNotificationContentKind_Text
    }
}
extension UWP.AdaptiveNotificationContentKind: @retroactive Hashable, @retroactive Codable {}

extension UWP.BadgeTemplateType {
    public static var badgeGlyph : UWP.BadgeTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CBadgeTemplateType_BadgeGlyph
    }
    public static var badgeNumber : UWP.BadgeTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CBadgeTemplateType_BadgeNumber
    }
}
extension UWP.BadgeTemplateType: @retroactive Hashable, @retroactive Codable {}

extension UWP.NotificationKinds {
    public static var unknown : UWP.NotificationKinds {
        __x_ABI_CWindows_CUI_CNotifications_CNotificationKinds_Unknown
    }
    public static var toast : UWP.NotificationKinds {
        __x_ABI_CWindows_CUI_CNotifications_CNotificationKinds_Toast
    }
}
extension UWP.NotificationKinds: @retroactive Hashable, @retroactive Codable {}

extension UWP.NotificationMirroring {
    public static var allowed : UWP.NotificationMirroring {
        __x_ABI_CWindows_CUI_CNotifications_CNotificationMirroring_Allowed
    }
    public static var disabled : UWP.NotificationMirroring {
        __x_ABI_CWindows_CUI_CNotifications_CNotificationMirroring_Disabled
    }
}
extension UWP.NotificationMirroring: @retroactive Hashable, @retroactive Codable {}

extension UWP.NotificationSetting {
    public static var enabled : UWP.NotificationSetting {
        __x_ABI_CWindows_CUI_CNotifications_CNotificationSetting_Enabled
    }
    public static var disabledForApplication : UWP.NotificationSetting {
        __x_ABI_CWindows_CUI_CNotifications_CNotificationSetting_DisabledForApplication
    }
    public static var disabledForUser : UWP.NotificationSetting {
        __x_ABI_CWindows_CUI_CNotifications_CNotificationSetting_DisabledForUser
    }
    public static var disabledByGroupPolicy : UWP.NotificationSetting {
        __x_ABI_CWindows_CUI_CNotifications_CNotificationSetting_DisabledByGroupPolicy
    }
    public static var disabledByManifest : UWP.NotificationSetting {
        __x_ABI_CWindows_CUI_CNotifications_CNotificationSetting_DisabledByManifest
    }
}
extension UWP.NotificationSetting: @retroactive Hashable, @retroactive Codable {}

extension UWP.NotificationUpdateResult {
    public static var succeeded : UWP.NotificationUpdateResult {
        __x_ABI_CWindows_CUI_CNotifications_CNotificationUpdateResult_Succeeded
    }
    public static var failed : UWP.NotificationUpdateResult {
        __x_ABI_CWindows_CUI_CNotifications_CNotificationUpdateResult_Failed
    }
    public static var notificationNotFound : UWP.NotificationUpdateResult {
        __x_ABI_CWindows_CUI_CNotifications_CNotificationUpdateResult_NotificationNotFound
    }
}
extension UWP.NotificationUpdateResult: @retroactive Hashable, @retroactive Codable {}

extension UWP.PeriodicUpdateRecurrence {
    public static var halfHour : UWP.PeriodicUpdateRecurrence {
        __x_ABI_CWindows_CUI_CNotifications_CPeriodicUpdateRecurrence_HalfHour
    }
    public static var hour : UWP.PeriodicUpdateRecurrence {
        __x_ABI_CWindows_CUI_CNotifications_CPeriodicUpdateRecurrence_Hour
    }
    public static var sixHours : UWP.PeriodicUpdateRecurrence {
        __x_ABI_CWindows_CUI_CNotifications_CPeriodicUpdateRecurrence_SixHours
    }
    public static var twelveHours : UWP.PeriodicUpdateRecurrence {
        __x_ABI_CWindows_CUI_CNotifications_CPeriodicUpdateRecurrence_TwelveHours
    }
    public static var daily : UWP.PeriodicUpdateRecurrence {
        __x_ABI_CWindows_CUI_CNotifications_CPeriodicUpdateRecurrence_Daily
    }
}
extension UWP.PeriodicUpdateRecurrence: @retroactive Hashable, @retroactive Codable {}

extension UWP.TileFlyoutTemplateType {
    public static var tileFlyoutTemplate01 : UWP.TileFlyoutTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileFlyoutTemplateType_TileFlyoutTemplate01
    }
}
extension UWP.TileFlyoutTemplateType: @retroactive Hashable, @retroactive Codable {}

extension UWP.TileTemplateType {
    public static var tileSquareImage : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquareImage
    }
    public static var tileSquareBlock : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquareBlock
    }
    public static var tileSquareText01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquareText01
    }
    public static var tileSquareText02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquareText02
    }
    public static var tileSquareText03 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquareText03
    }
    public static var tileSquareText04 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquareText04
    }
    public static var tileSquarePeekImageAndText01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquarePeekImageAndText01
    }
    public static var tileSquarePeekImageAndText02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquarePeekImageAndText02
    }
    public static var tileSquarePeekImageAndText03 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquarePeekImageAndText03
    }
    public static var tileSquarePeekImageAndText04 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquarePeekImageAndText04
    }
    public static var tileWideImage : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideImage
    }
    public static var tileWideImageCollection : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideImageCollection
    }
    public static var tileWideImageAndText01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideImageAndText01
    }
    public static var tileWideImageAndText02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideImageAndText02
    }
    public static var tileWideBlockAndText01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideBlockAndText01
    }
    public static var tileWideBlockAndText02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideBlockAndText02
    }
    public static var tileWidePeekImageCollection01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWidePeekImageCollection01
    }
    public static var tileWidePeekImageCollection02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWidePeekImageCollection02
    }
    public static var tileWidePeekImageCollection03 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWidePeekImageCollection03
    }
    public static var tileWidePeekImageCollection04 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWidePeekImageCollection04
    }
    public static var tileWidePeekImageCollection05 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWidePeekImageCollection05
    }
    public static var tileWidePeekImageCollection06 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWidePeekImageCollection06
    }
    public static var tileWidePeekImageAndText01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWidePeekImageAndText01
    }
    public static var tileWidePeekImageAndText02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWidePeekImageAndText02
    }
    public static var tileWidePeekImage01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWidePeekImage01
    }
    public static var tileWidePeekImage02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWidePeekImage02
    }
    public static var tileWidePeekImage03 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWidePeekImage03
    }
    public static var tileWidePeekImage04 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWidePeekImage04
    }
    public static var tileWidePeekImage05 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWidePeekImage05
    }
    public static var tileWidePeekImage06 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWidePeekImage06
    }
    public static var tileWideSmallImageAndText01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideSmallImageAndText01
    }
    public static var tileWideSmallImageAndText02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideSmallImageAndText02
    }
    public static var tileWideSmallImageAndText03 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideSmallImageAndText03
    }
    public static var tileWideSmallImageAndText04 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideSmallImageAndText04
    }
    public static var tileWideSmallImageAndText05 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideSmallImageAndText05
    }
    public static var tileWideText01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideText01
    }
    public static var tileWideText02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideText02
    }
    public static var tileWideText03 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideText03
    }
    public static var tileWideText04 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideText04
    }
    public static var tileWideText05 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideText05
    }
    public static var tileWideText06 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideText06
    }
    public static var tileWideText07 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideText07
    }
    public static var tileWideText08 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideText08
    }
    public static var tileWideText09 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideText09
    }
    public static var tileWideText10 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideText10
    }
    public static var tileWideText11 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWideText11
    }
    public static var tileSquare150x150Image : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare150x150Image
    }
    public static var tileSquare150x150Block : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare150x150Block
    }
    public static var tileSquare150x150Text01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare150x150Text01
    }
    public static var tileSquare150x150Text02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare150x150Text02
    }
    public static var tileSquare150x150Text03 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare150x150Text03
    }
    public static var tileSquare150x150Text04 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare150x150Text04
    }
    public static var tileSquare150x150PeekImageAndText01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare150x150PeekImageAndText01
    }
    public static var tileSquare150x150PeekImageAndText02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare150x150PeekImageAndText02
    }
    public static var tileSquare150x150PeekImageAndText03 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare150x150PeekImageAndText03
    }
    public static var tileSquare150x150PeekImageAndText04 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare150x150PeekImageAndText04
    }
    public static var tileWide310x150Image : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150Image
    }
    public static var tileWide310x150ImageCollection : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150ImageCollection
    }
    public static var tileWide310x150ImageAndText01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150ImageAndText01
    }
    public static var tileWide310x150ImageAndText02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150ImageAndText02
    }
    public static var tileWide310x150BlockAndText01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150BlockAndText01
    }
    public static var tileWide310x150BlockAndText02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150BlockAndText02
    }
    public static var tileWide310x150PeekImageCollection01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150PeekImageCollection01
    }
    public static var tileWide310x150PeekImageCollection02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150PeekImageCollection02
    }
    public static var tileWide310x150PeekImageCollection03 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150PeekImageCollection03
    }
    public static var tileWide310x150PeekImageCollection04 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150PeekImageCollection04
    }
    public static var tileWide310x150PeekImageCollection05 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150PeekImageCollection05
    }
    public static var tileWide310x150PeekImageCollection06 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150PeekImageCollection06
    }
    public static var tileWide310x150PeekImageAndText01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150PeekImageAndText01
    }
    public static var tileWide310x150PeekImageAndText02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150PeekImageAndText02
    }
    public static var tileWide310x150PeekImage01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150PeekImage01
    }
    public static var tileWide310x150PeekImage02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150PeekImage02
    }
    public static var tileWide310x150PeekImage03 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150PeekImage03
    }
    public static var tileWide310x150PeekImage04 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150PeekImage04
    }
    public static var tileWide310x150PeekImage05 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150PeekImage05
    }
    public static var tileWide310x150PeekImage06 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150PeekImage06
    }
    public static var tileWide310x150SmallImageAndText01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150SmallImageAndText01
    }
    public static var tileWide310x150SmallImageAndText02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150SmallImageAndText02
    }
    public static var tileWide310x150SmallImageAndText03 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150SmallImageAndText03
    }
    public static var tileWide310x150SmallImageAndText04 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150SmallImageAndText04
    }
    public static var tileWide310x150SmallImageAndText05 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150SmallImageAndText05
    }
    public static var tileWide310x150Text01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150Text01
    }
    public static var tileWide310x150Text02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150Text02
    }
    public static var tileWide310x150Text03 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150Text03
    }
    public static var tileWide310x150Text04 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150Text04
    }
    public static var tileWide310x150Text05 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150Text05
    }
    public static var tileWide310x150Text06 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150Text06
    }
    public static var tileWide310x150Text07 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150Text07
    }
    public static var tileWide310x150Text08 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150Text08
    }
    public static var tileWide310x150Text09 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150Text09
    }
    public static var tileWide310x150Text10 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150Text10
    }
    public static var tileWide310x150Text11 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150Text11
    }
    public static var tileSquare310x310BlockAndText01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310BlockAndText01
    }
    public static var tileSquare310x310BlockAndText02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310BlockAndText02
    }
    public static var tileSquare310x310Image : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310Image
    }
    public static var tileSquare310x310ImageAndText01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310ImageAndText01
    }
    public static var tileSquare310x310ImageAndText02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310ImageAndText02
    }
    public static var tileSquare310x310ImageAndTextOverlay01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310ImageAndTextOverlay01
    }
    public static var tileSquare310x310ImageAndTextOverlay02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310ImageAndTextOverlay02
    }
    public static var tileSquare310x310ImageAndTextOverlay03 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310ImageAndTextOverlay03
    }
    public static var tileSquare310x310ImageCollectionAndText01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310ImageCollectionAndText01
    }
    public static var tileSquare310x310ImageCollectionAndText02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310ImageCollectionAndText02
    }
    public static var tileSquare310x310ImageCollection : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310ImageCollection
    }
    public static var tileSquare310x310SmallImagesAndTextList01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310SmallImagesAndTextList01
    }
    public static var tileSquare310x310SmallImagesAndTextList02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310SmallImagesAndTextList02
    }
    public static var tileSquare310x310SmallImagesAndTextList03 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310SmallImagesAndTextList03
    }
    public static var tileSquare310x310SmallImagesAndTextList04 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310SmallImagesAndTextList04
    }
    public static var tileSquare310x310Text01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310Text01
    }
    public static var tileSquare310x310Text02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310Text02
    }
    public static var tileSquare310x310Text03 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310Text03
    }
    public static var tileSquare310x310Text04 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310Text04
    }
    public static var tileSquare310x310Text05 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310Text05
    }
    public static var tileSquare310x310Text06 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310Text06
    }
    public static var tileSquare310x310Text07 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310Text07
    }
    public static var tileSquare310x310Text08 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310Text08
    }
    public static var tileSquare310x310TextList01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310TextList01
    }
    public static var tileSquare310x310TextList02 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310TextList02
    }
    public static var tileSquare310x310TextList03 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310TextList03
    }
    public static var tileSquare310x310SmallImageAndText01 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310SmallImageAndText01
    }
    public static var tileSquare310x310SmallImagesAndTextList05 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310SmallImagesAndTextList05
    }
    public static var tileSquare310x310Text09 : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare310x310Text09
    }
    public static var tileSquare71x71IconWithBadge : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare71x71IconWithBadge
    }
    public static var tileSquare150x150IconWithBadge : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare150x150IconWithBadge
    }
    public static var tileWide310x150IconWithBadgeAndText : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileWide310x150IconWithBadgeAndText
    }
    public static var tileSquare71x71Image : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileSquare71x71Image
    }
    public static var tileTall150x310Image : UWP.TileTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CTileTemplateType_TileTall150x310Image
    }
}
extension UWP.TileTemplateType: @retroactive Hashable, @retroactive Codable {}

extension UWP.ToastDismissalReason {
    public static var userCanceled : UWP.ToastDismissalReason {
        __x_ABI_CWindows_CUI_CNotifications_CToastDismissalReason_UserCanceled
    }
    public static var applicationHidden : UWP.ToastDismissalReason {
        __x_ABI_CWindows_CUI_CNotifications_CToastDismissalReason_ApplicationHidden
    }
    public static var timedOut : UWP.ToastDismissalReason {
        __x_ABI_CWindows_CUI_CNotifications_CToastDismissalReason_TimedOut
    }
}
extension UWP.ToastDismissalReason: @retroactive Hashable, @retroactive Codable {}

extension UWP.ToastHistoryChangedType {
    public static var cleared : UWP.ToastHistoryChangedType {
        __x_ABI_CWindows_CUI_CNotifications_CToastHistoryChangedType_Cleared
    }
    public static var removed : UWP.ToastHistoryChangedType {
        __x_ABI_CWindows_CUI_CNotifications_CToastHistoryChangedType_Removed
    }
    public static var expired : UWP.ToastHistoryChangedType {
        __x_ABI_CWindows_CUI_CNotifications_CToastHistoryChangedType_Expired
    }
    public static var added : UWP.ToastHistoryChangedType {
        __x_ABI_CWindows_CUI_CNotifications_CToastHistoryChangedType_Added
    }
}
extension UWP.ToastHistoryChangedType: @retroactive Hashable, @retroactive Codable {}

extension UWP.ToastNotificationPriority {
    public static var `default` : UWP.ToastNotificationPriority {
        __x_ABI_CWindows_CUI_CNotifications_CToastNotificationPriority_Default
    }
    public static var high : UWP.ToastNotificationPriority {
        __x_ABI_CWindows_CUI_CNotifications_CToastNotificationPriority_High
    }
}
extension UWP.ToastNotificationPriority: @retroactive Hashable, @retroactive Codable {}

extension UWP.ToastTemplateType {
    public static var toastImageAndText01 : UWP.ToastTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CToastTemplateType_ToastImageAndText01
    }
    public static var toastImageAndText02 : UWP.ToastTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CToastTemplateType_ToastImageAndText02
    }
    public static var toastImageAndText03 : UWP.ToastTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CToastTemplateType_ToastImageAndText03
    }
    public static var toastImageAndText04 : UWP.ToastTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CToastTemplateType_ToastImageAndText04
    }
    public static var toastText01 : UWP.ToastTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CToastTemplateType_ToastText01
    }
    public static var toastText02 : UWP.ToastTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CToastTemplateType_ToastText02
    }
    public static var toastText03 : UWP.ToastTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CToastTemplateType_ToastText03
    }
    public static var toastText04 : UWP.ToastTemplateType {
        __x_ABI_CWindows_CUI_CNotifications_CToastTemplateType_ToastText04
    }
}
extension UWP.ToastTemplateType: @retroactive Hashable, @retroactive Codable {}

extension UWP.UserNotificationChangedKind {
    public static var added : UWP.UserNotificationChangedKind {
        __x_ABI_CWindows_CUI_CNotifications_CUserNotificationChangedKind_Added
    }
    public static var removed : UWP.UserNotificationChangedKind {
        __x_ABI_CWindows_CUI_CNotifications_CUserNotificationChangedKind_Removed
    }
}
extension UWP.UserNotificationChangedKind: @retroactive Hashable, @retroactive Codable {}

